
sensor-sw-kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800aa40  0800aa40  0001aa40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa0  0800afa0  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800afa0  0800afa0  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afa0  0800afa0  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afa0  0800afa0  0001afa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afa4  0800afa4  0001afa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800afa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
 10 .bss          00000338  20000224  20000224  00020224  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000055c  2000055c  00020224  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 14 .debug_info   000115d5  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002910  00000000  00000000  0003186c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f08  00000000  00000000  00034180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ba0  00000000  00000000  00035088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d0d9  00000000  00000000  00035c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012f0d  00000000  00000000  00052d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a7244  00000000  00000000  00065c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005614  00000000  00000000  0010ce54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00112468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa24 	.word	0x0800aa24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800aa24 	.word	0x0800aa24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <getDiameter>:

#include "Data/sensor.h"
#include <stdlib.h>

// Getter-Methoden
float getDiameter(const Sensor* sensor) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    return sensor->info.diameter;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	ee07 3a90 	vmov	s15, r3
}
 8000d04:	eeb0 0a67 	vmov.f32	s0, s15
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <getFrequency>:

float getFrequency(const Sensor* sensor) {
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
    return sensor->info.frequency;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	ee07 3a90 	vmov	s15, r3
}
 8000d22:	eeb0 0a67 	vmov.f32	s0, s15
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <getCurve>:

const float* getCurve(const Sensor* sensor) {
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    return sensor->info.curve;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3308      	adds	r3, #8
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <getID>:

int getID(const Sensor* sensor) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    return sensor->info.id;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69db      	ldr	r3, [r3, #28]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <getType>:

const char* getType(const Sensor* sensor) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    return sensor->info.type;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <setDiameter>:

// Setter-Methoden
void setDiameter(Sensor* sensor, float diameter) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	ed87 0a00 	vstr	s0, [r7]
    sensor->info.diameter = diameter;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <setFrequency>:

void setFrequency(Sensor* sensor, float frequency) {
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	ed87 0a00 	vstr	s0, [r7]
    sensor->info.frequency = frequency;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	605a      	str	r2, [r3, #4]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <setCurve>:

void setCurve(Sensor* sensor,const float curve[5]) {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 5; i++){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e00d      	b.n	8000de0 <setCurve+0x2c>
	    sensor->info.curve[i] = curve[i];
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 5; i++){
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	ddee      	ble.n	8000dc4 <setCurve+0x10>
	}
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <setID>:

void setID(Sensor* sensor, int id) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    sensor->info.id = id;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	61da      	str	r2, [r3, #28]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <setType>:

void setType(Sensor* sensor, const char* type) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
    sensor->info.type = type;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	621a      	str	r2, [r3, #32]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <initSensor>:

// Konstruktor
Sensor initSensor(float diameter, float frequency,const float curve[5], int id, const char* type) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09a      	sub	sp, #104	; 0x68
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6178      	str	r0, [r7, #20]
 8000e34:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e38:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
    Sensor sensor;
    sensor.info.diameter = diameter;
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	61bb      	str	r3, [r7, #24]
    sensor.info.frequency = frequency;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < 5; i++){
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8000e4e:	e00e      	b.n	8000e6e <initSensor+0x42>
    	sensor.info.curve[i] = curve[i];
 8000e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	4413      	add	r3, r2
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	3368      	adds	r3, #104	; 0x68
 8000e62:	443b      	add	r3, r7
 8000e64:	3b50      	subs	r3, #80	; 0x50
 8000e66:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 5; i++){
 8000e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8000e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	dded      	ble.n	8000e50 <initSensor+0x24>
    }
    sensor.info.id = id;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
    sensor.info.type = type;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38

    // Initialisiere die Getter-Funktionen
    sensor.getDiameter = getDiameter;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <initSensor+0x90>)
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sensor.getFrequency = getFrequency;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <initSensor+0x94>)
 8000e82:	643b      	str	r3, [r7, #64]	; 0x40
    sensor.getCurve = getCurve;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <initSensor+0x98>)
 8000e86:	647b      	str	r3, [r7, #68]	; 0x44
    sensor.getID = getID;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <initSensor+0x9c>)
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
    sensor.getType = getType;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <initSensor+0xa0>)
 8000e8e:	64fb      	str	r3, [r7, #76]	; 0x4c

    // Initialisiere die Setter-Funktionen
    sensor.setDiameter = setDiameter;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <initSensor+0xa4>)
 8000e92:	653b      	str	r3, [r7, #80]	; 0x50
    sensor.setFrequency = setFrequency;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <initSensor+0xa8>)
 8000e96:	657b      	str	r3, [r7, #84]	; 0x54
    sensor.setCurve = setCurve;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <initSensor+0xac>)
 8000e9a:	65bb      	str	r3, [r7, #88]	; 0x58
    sensor.setID = setID;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <initSensor+0xb0>)
 8000e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    sensor.setType = setType;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <initSensor+0xb4>)
 8000ea2:	663b      	str	r3, [r7, #96]	; 0x60

    return sensor;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	224c      	movs	r2, #76	; 0x4c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f006 fcdb 	bl	800786a <memcpy>
}
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	3768      	adds	r7, #104	; 0x68
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08000cf5 	.word	0x08000cf5
 8000ec0:	08000d13 	.word	0x08000d13
 8000ec4:	08000d31 	.word	0x08000d31
 8000ec8:	08000d49 	.word	0x08000d49
 8000ecc:	08000d61 	.word	0x08000d61
 8000ed0:	08000d79 	.word	0x08000d79
 8000ed4:	08000d97 	.word	0x08000d97
 8000ed8:	08000db5 	.word	0x08000db5
 8000edc:	08000df5 	.word	0x08000df5
 8000ee0:	08000e11 	.word	0x08000e11

08000ee4 <getReceivedData>:


#include "Data/uart_data.h"

// Getter-Methoden
const uint8_t* getReceivedData(const UartData* uartData) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    return uartData->receivedData;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <getDataIndex>:

int getDataIndex(const UartData* uartData) {
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
    return uartData->dataIndex;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <getMessageComplete>:

int getMessageComplete(const UartData* uartData) {
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
    return uartData->messageComplete;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <setReceivedData>:

// Setter-Methoden
void setReceivedData(UartData* uartData, const uint8_t* receivedData) {
 8000f2a:	b480      	push	{r7}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
    // Kopiere die Daten
    for (int i = 0; i < 64; i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e00b      	b.n	8000f52 <setReceivedData+0x28>
        uartData->receivedData[i] = receivedData[i];
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	7819      	ldrb	r1, [r3, #0]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	460a      	mov	r2, r1
 8000f4a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b3f      	cmp	r3, #63	; 0x3f
 8000f56:	ddf0      	ble.n	8000f3a <setReceivedData+0x10>
    }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <setDataIndex>:

void setDataIndex(UartData* uartData, int dataIndex) {
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
    uartData->dataIndex = dataIndex;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <setMessageComplete>:

void setMessageComplete(UartData* uartData, int messageComplete) {
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
    uartData->messageComplete = messageComplete;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <createUartDataObject>:

// Konstruktor
UartDataObject createUartDataObject() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09c      	sub	sp, #112	; 0x70
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    UartDataObject uartDataObject;
    uartDataObject.getReceivedData = &getReceivedData;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <createUartDataObject+0x60>)
 8000faa:	657b      	str	r3, [r7, #84]	; 0x54
    uartDataObject.getDataIndex = &getDataIndex;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <createUartDataObject+0x64>)
 8000fae:	65bb      	str	r3, [r7, #88]	; 0x58
    uartDataObject.getMessageComplete = &getMessageComplete;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <createUartDataObject+0x68>)
 8000fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    uartDataObject.setReceivedData = &setReceivedData;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <createUartDataObject+0x6c>)
 8000fb6:	663b      	str	r3, [r7, #96]	; 0x60
    uartDataObject.setDataIndex = &setDataIndex;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <createUartDataObject+0x70>)
 8000fba:	667b      	str	r3, [r7, #100]	; 0x64
    uartDataObject.setMessageComplete = &setMessageComplete;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <createUartDataObject+0x74>)
 8000fbe:	66bb      	str	r3, [r7, #104]	; 0x68

    // Initialisiere die Daten
    for (int i = 0; i < 64; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fc4:	e008      	b.n	8000fd8 <createUartDataObject+0x38>
        uartDataObject.data.receivedData[i] = 0;
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fcc:	4413      	add	r3, r2
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 8000fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fda:	2b3f      	cmp	r3, #63	; 0x3f
 8000fdc:	ddf3      	ble.n	8000fc6 <createUartDataObject+0x26>
    }
    uartDataObject.data.dataIndex = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
    uartDataObject.data.messageComplete = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	653b      	str	r3, [r7, #80]	; 0x50

    return uartDataObject;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2260      	movs	r2, #96	; 0x60
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f006 fc3a 	bl	800786a <memcpy>
}
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	3770      	adds	r7, #112	; 0x70
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08000ee5 	.word	0x08000ee5
 8001004:	08000efb 	.word	0x08000efb
 8001008:	08000f13 	.word	0x08000f13
 800100c:	08000f2b 	.word	0x08000f2b
 8001010:	08000f67 	.word	0x08000f67
 8001014:	08000f83 	.word	0x08000f83

08001018 <createInterfaceReceiveHandler>:
InterfaceReceiveHandler createInterfaceReceiveHandler(Sensor* sensor,
			                                          SensorSendHandler* sender,
		                                              UART_HandleTypeDef* uart2,
													  UART_HandleTypeDef* uart3,
													  TIM_HandleTypeDef* htim3)
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
    InterfaceReceiveHandler handler;
    handler.sensor = sensor;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	613b      	str	r3, [r7, #16]
    handler.sender = sender;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	617b      	str	r3, [r7, #20]
    handler.uart2  = uart2;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	61fb      	str	r3, [r7, #28]
    handler.uart3  = uart3;
 8001032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001034:	623b      	str	r3, [r7, #32]
    handler.htim3  = htim3;
 8001036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001038:	627b      	str	r3, [r7, #36]	; 0x24


    // Zuweisung der globalen Variable
    gHandler = handler;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <createInterfaceReceiveHandler+0x5c>)
 800103c:	461d      	mov	r5, r3
 800103e:	f107 0410 	add.w	r4, r7, #16
 8001042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800104a:	e885 0003 	stmia.w	r5, {r0, r1}

    handler.uartProcessor = createUartProcessor(interface_dictionary);
 800104e:	480a      	ldr	r0, [pc, #40]	; (8001078 <createInterfaceReceiveHandler+0x60>)
 8001050:	f000 fb96 	bl	8001780 <createUartProcessor>
 8001054:	61b8      	str	r0, [r7, #24]
    return handler;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	461d      	mov	r5, r3
 800105a:	f107 0410 	add.w	r4, r7, #16
 800105e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001066:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bdb0      	pop	{r4, r5, r7, pc}
 8001072:	bf00      	nop
 8001074:	20000240 	.word	0x20000240
 8001078:	20000000 	.word	0x20000000

0800107c <handleFreqChange>:

// Methoden
void handleFreqChange(const char* value) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    // Find position of 'Q' in the string
    char* qPosition = strchr(value, 'Q');
 8001084:	2151      	movs	r1, #81	; 0x51
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f006 fb35 	bl	80076f6 <strchr>
 800108c:	60f8      	str	r0, [r7, #12]

    if (qPosition != NULL) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d028      	beq.n	80010e6 <handleFreqChange+0x6a>
        qPosition++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
        // Use sscanf to extract the float value
        float frequency;
        if (sscanf(qPosition, "%f", &frequency) == 1) {
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	461a      	mov	r2, r3
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <handleFreqChange+0x74>)
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f006 faae 	bl	8007604 <siscanf>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d11b      	bne.n	80010e6 <handleFreqChange+0x6a>
            // Set the new timer frequency
        	calculate_Periode(frequency);
 80010ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	f000 f81f 	bl	80010f8 <calculate_Periode>
        	gHandler.sensor->setFrequency(gHandler.sensor,frequency);
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <handleFreqChange+0x78>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <handleFreqChange+0x78>)
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	4610      	mov	r0, r2
 80010ce:	4798      	blx	r3
            gHandler.sender->interface.sendFrequency(gHandler.uart3, frequency);
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <handleFreqChange+0x78>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <handleFreqChange+0x78>)
 80010d8:	6912      	ldr	r2, [r2, #16]
 80010da:	edd7 7a02 	vldr	s15, [r7, #8]
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	4610      	mov	r0, r2
 80010e4:	4798      	blx	r3
        }
    }
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800aa8c 	.word	0x0800aa8c
 80010f4:	20000240 	.word	0x20000240

080010f8 <calculate_Periode>:
void calculate_Periode(float f) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	ed87 0a01 	vstr	s0, [r7, #4]
	if(f < 1 || f > 2000)
 8001102:	edd7 7a01 	vldr	s15, [r7, #4]
 8001106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800110a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001112:	d443      	bmi.n	800119c <calculate_Periode+0xa4>
 8001114:	edd7 7a01 	vldr	s15, [r7, #4]
 8001118:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80011a4 <calculate_Periode+0xac>
 800111c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	dc3a      	bgt.n	800119c <calculate_Periode+0xa4>
		return; // Frequenz außerhalb des zulässigen Bereiches

	HAL_TIM_Base_Stop(gHandler.htim3);
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <calculate_Periode+0xb0>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fd69 	bl	8003c02 <HAL_TIM_Base_Stop>
    // Grundfrequenz des TIM3-Timers
    uint32_t tim3Grundfrequenz = HAL_RCC_GetSysClockFreq();
 8001130:	f002 fc56 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8001134:	6138      	str	r0, [r7, #16]
    uint32_t prescaler = gHandler.htim3->Init.Prescaler;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <calculate_Periode+0xb0>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	60fb      	str	r3, [r7, #12]
    // Berechnung der Periode
    uint32_t periode = (tim3Grundfrequenz / (prescaler * f)) - 1;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001152:	edd7 7a01 	vldr	s15, [r7, #4]
 8001156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116a:	ee17 3a90 	vmov	r3, s15
 800116e:	617b      	str	r3, [r7, #20]

    // Überprüfung, ob die Periode im gültigen Bereich liegt
    if (periode > 0xFFFF) {
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d302      	bcc.n	800117e <calculate_Periode+0x86>
        // Periode ist zu groß, setze den Maximalwert
        periode = 0xFFFF;
 8001178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117c:	617b      	str	r3, [r7, #20]
    }
    gHandler.htim3->Init.Period = periode;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <calculate_Periode+0xb0>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	60da      	str	r2, [r3, #12]

    //init_Timer(periode);
	HAL_TIM_Base_Init(gHandler.htim3);
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <calculate_Periode+0xb0>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fce2 	bl	8003b54 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start_IT(gHandler.htim3);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <calculate_Periode+0xb0>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fd5b 	bl	8003c50 <HAL_TIM_Base_Start_IT>
 800119a:	e000      	b.n	800119e <calculate_Periode+0xa6>
		return; // Frequenz außerhalb des zulässigen Bereiches
 800119c:	bf00      	nop
}
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	44fa0000 	.word	0x44fa0000
 80011a8:	20000240 	.word	0x20000240

080011ac <handleFreq>:

void handleFreq(const char* value) {
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	gHandler.sender->interface.sendFrequency(gHandler.uart3, gHandler.sensor->getFrequency(gHandler.sensor));
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <handleFreq+0x34>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	685c      	ldr	r4, [r3, #4]
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <handleFreq+0x34>)
 80011bc:	691d      	ldr	r5, [r3, #16]
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <handleFreq+0x34>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <handleFreq+0x34>)
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	4610      	mov	r0, r2
 80011ca:	4798      	blx	r3
 80011cc:	eef0 7a40 	vmov.f32	s15, s0
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	4628      	mov	r0, r5
 80011d6:	47a0      	blx	r4
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	20000240 	.word	0x20000240

080011e4 <handleCurve>:

void handleCurve(const char* params) {
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	gHandler.sender->interface.sendCurve(gHandler.uart3, gHandler.sensor->getCurve(gHandler.sensor));
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <handleCurve+0x30>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	689c      	ldr	r4, [r3, #8]
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <handleCurve+0x30>)
 80011f4:	691d      	ldr	r5, [r3, #16]
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <handleCurve+0x30>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <handleCurve+0x30>)
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	4610      	mov	r0, r2
 8001202:	4798      	blx	r3
 8001204:	4603      	mov	r3, r0
 8001206:	4619      	mov	r1, r3
 8001208:	4628      	mov	r0, r5
 800120a:	47a0      	blx	r4
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bdb0      	pop	{r4, r5, r7, pc}
 8001214:	20000240 	.word	0x20000240

08001218 <handleSN>:

void handleSN(const char* sn) {
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	gHandler.sender->interface.sendSN(gHandler.uart3, gHandler.sensor->getID(gHandler.sensor));
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <handleSN+0x30>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	691c      	ldr	r4, [r3, #16]
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <handleSN+0x30>)
 8001228:	691d      	ldr	r5, [r3, #16]
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <handleSN+0x30>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <handleSN+0x30>)
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	4610      	mov	r0, r2
 8001236:	4798      	blx	r3
 8001238:	4603      	mov	r3, r0
 800123a:	4619      	mov	r1, r3
 800123c:	4628      	mov	r0, r5
 800123e:	47a0      	blx	r4
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bdb0      	pop	{r4, r5, r7, pc}
 8001248:	20000240 	.word	0x20000240

0800124c <handleType>:

void handleType(const char* value) {
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	gHandler.sender->interface.sendType(gHandler.uart3, gHandler.sensor->getType(gHandler.sensor));
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <handleType+0x30>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	68dc      	ldr	r4, [r3, #12]
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <handleType+0x30>)
 800125c:	691d      	ldr	r5, [r3, #16]
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <handleType+0x30>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <handleType+0x30>)
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	4610      	mov	r0, r2
 800126a:	4798      	blx	r3
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	4628      	mov	r0, r5
 8001272:	47a0      	blx	r4
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bdb0      	pop	{r4, r5, r7, pc}
 800127c:	20000240 	.word	0x20000240

08001280 <handleSetCurve>:

void handleSetCurve(const char *value) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	; 0x40
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    int length = strlen(value);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7fe fff1 	bl	8000270 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    char *result = (char *)malloc(length + 1);  // +1 für das Nullzeichen am Ende
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	3301      	adds	r3, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fb26 	bl	80058e8 <malloc>
 800129c:	4603      	mov	r3, r0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    if (result == NULL) {
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <handleSetCurve+0x2c>
        exit(EXIT_FAILURE); // Es konnte kein speicher allokiert werden
 80012a6:	2001      	movs	r0, #1
 80012a8:	f004 fb0c 	bl	80058c4 <exit>
    }
    int i = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    int index = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
    float curve[5];
    while(i < 5 && index < length){
 80012b4:	e059      	b.n	800136a <handleSetCurve+0xea>
        float param = 0.0;
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
        int startIndex = -1;  // Index des ersten Leerzeichens
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
        int endIndex = -1;    // Index des zweiten Leerzeichens
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30

        for (int j = index; j < length; j++) {
 80012c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012cc:	e01b      	b.n	8001306 <handleSetCurve+0x86>
            if (value[j] == ' ' || value[j] == '\r') {
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b20      	cmp	r3, #32
 80012d8:	d005      	beq.n	80012e6 <handleSetCurve+0x66>
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b0d      	cmp	r3, #13
 80012e4:	d10c      	bne.n	8001300 <handleSetCurve+0x80>
                if (startIndex == -1) {
 80012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d103      	bne.n	80012f6 <handleSetCurve+0x76>
                    startIndex = j + 1;
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	3301      	adds	r3, #1
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
 80012f4:	e004      	b.n	8001300 <handleSetCurve+0x80>
                } else {
                    endIndex = j;
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
                    index = j;
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
                    break;
 80012fe:	e006      	b.n	800130e <handleSetCurve+0x8e>
        for (int j = index; j < length; j++) {
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001302:	3301      	adds	r3, #1
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	429a      	cmp	r2, r3
 800130c:	dbdf      	blt.n	80012ce <handleSetCurve+0x4e>
                }
            }
        }

        if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d029      	beq.n	800136a <handleSetCurve+0xea>
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d025      	beq.n	800136a <handleSetCurve+0xea>
 800131e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	429a      	cmp	r2, r3
 8001324:	da21      	bge.n	800136a <handleSetCurve+0xea>
            // Kopiere den Teil der Zeichenkette zwischen den beiden Leerzeichen
            strncpy(result, value + startIndex, endIndex - startIndex);
 8001326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	18d1      	adds	r1, r2, r3
 800132c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	461a      	mov	r2, r3
 8001334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001336:	f006 f9fd 	bl	8007734 <strncpy>
            result[endIndex - startIndex] = '\0';  // Nullzeichen am Ende hinzufügen
 800133a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	461a      	mov	r2, r3
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	4413      	add	r3, r2
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
            curve[i] = strtof(result, NULL);
 800134a:	2100      	movs	r1, #0
 800134c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800134e:	f005 f991 	bl	8006674 <strtof>
 8001352:	eef0 7a40 	vmov.f32	s15, s0
 8001356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	3340      	adds	r3, #64	; 0x40
 800135c:	443b      	add	r3, r7
 800135e:	3b34      	subs	r3, #52	; 0x34
 8001360:	edc3 7a00 	vstr	s15, [r3]
            i++;
 8001364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001366:	3301      	adds	r3, #1
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(i < 5 && index < length){
 800136a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136c:	2b04      	cmp	r3, #4
 800136e:	dc03      	bgt.n	8001378 <handleSetCurve+0xf8>
 8001370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	429a      	cmp	r2, r3
 8001376:	db9e      	blt.n	80012b6 <handleSetCurve+0x36>
        }
    }

    if (gHandler.sensor != NULL && gHandler.sensor->setCurve != NULL) {
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <handleSetCurve+0x124>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00d      	beq.n	800139c <handleSetCurve+0x11c>
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <handleSetCurve+0x124>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <handleSetCurve+0x11c>
        gHandler.sensor->setCurve(gHandler.sensor, curve);
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <handleSetCurve+0x124>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <handleSetCurve+0x124>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	f107 010c 	add.w	r1, r7, #12
 8001398:	4610      	mov	r0, r2
 800139a:	4798      	blx	r3
    }
}
 800139c:	bf00      	nop
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000240 	.word	0x20000240

080013a8 <handleCalReset>:

void handleCalReset(){
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	// Wird diese Funktion aufgerufen startet die Calibration sequence
	// TODO: Implement calibration sequence
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <handleAddCalValue>:
void handleAddCalValue(const char* value){
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	// Neue True Diameter wert wurde übertragen
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <handleCalEnd>:
void handleCalEnd(){
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
	// Flag -> Calibration sequence end
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <processInterfaceMessage>:

void processInterfaceMessage(InterfaceReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	4613      	mov	r3, r2
 80013e4:	71fb      	strb	r3, [r7, #7]
	processCommand(&(handler->uartProcessor), receivedData, receivedDataIndex);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3308      	adds	r3, #8
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fa04 	bl	80017fc <processCommand>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <sendDiameter_impl>:
#include <stdio.h>
#include <string.h>


// Implementierung der Interface methoden
void sendDiameter_impl(UART_HandleTypeDef *huart,float value) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "diam ";
 8001408:	4a1c      	ldr	r2, [pc, #112]	; (800147c <sendDiameter_impl+0x80>)
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001412:	6018      	str	r0, [r3, #0]
 8001414:	3304      	adds	r3, #4
 8001416:	8019      	strh	r1, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = "/r/n";
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <sendDiameter_impl+0x84>)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001422:	6018      	str	r0, [r3, #0]
 8001424:	3304      	adds	r3, #4
 8001426:	7019      	strb	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8001428:	6838      	ldr	r0, [r7, #0]
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	f107 0014 	add.w	r0, r7, #20
 8001436:	4913      	ldr	r1, [pc, #76]	; (8001484 <sendDiameter_impl+0x88>)
 8001438:	f006 f8c4 	bl	80075c4 <siprintf>

	HAL_UART_Transmit(huart, tag, 5, 10);
 800143c:	f107 0120 	add.w	r1, r7, #32
 8001440:	230a      	movs	r3, #10
 8001442:	2205      	movs	r2, #5
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f003 f865 	bl	8004514 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ff0e 	bl	8000270 <strlen>
 8001454:	4603      	mov	r3, r0
 8001456:	b29a      	uxth	r2, r3
 8001458:	f107 0114 	add.w	r1, r7, #20
 800145c:	230a      	movs	r3, #10
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f003 f858 	bl	8004514 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, 4, 10);
 8001464:	f107 010c 	add.w	r1, r7, #12
 8001468:	230a      	movs	r3, #10
 800146a:	2204      	movs	r2, #4
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f003 f851 	bl	8004514 <HAL_UART_Transmit>
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800aa98 	.word	0x0800aa98
 8001480:	0800aaa0 	.word	0x0800aaa0
 8001484:	0800aa90 	.word	0x0800aa90

08001488 <sendFrequency_impl>:

void sendFrequency_impl(UART_HandleTypeDef *huart, float frequency) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "freq ";
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <sendFrequency_impl+0x80>)
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149e:	6018      	str	r0, [r3, #0]
 80014a0:	3304      	adds	r3, #4
 80014a2:	8019      	strh	r1, [r3, #0]
	uint8_t freq[10];
	uint8_t endTag[] = "/r/n";
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <sendFrequency_impl+0x84>)
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ae:	6018      	str	r0, [r3, #0]
 80014b0:	3304      	adds	r3, #4
 80014b2:	7019      	strb	r1, [r3, #0]

	sprintf((char *)freq, "%.0f", frequency);
 80014b4:	6838      	ldr	r0, [r7, #0]
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	f107 0014 	add.w	r0, r7, #20
 80014c2:	4913      	ldr	r1, [pc, #76]	; (8001510 <sendFrequency_impl+0x88>)
 80014c4:	f006 f87e 	bl	80075c4 <siprintf>

	HAL_UART_Transmit(huart, tag, 5, 10);
 80014c8:	f107 0120 	add.w	r1, r7, #32
 80014cc:	230a      	movs	r3, #10
 80014ce:	2205      	movs	r2, #5
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f003 f81f 	bl	8004514 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, freq, strlen((char *)freq), 10);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fec8 	bl	8000270 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f107 0114 	add.w	r1, r7, #20
 80014e8:	230a      	movs	r3, #10
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f003 f812 	bl	8004514 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, 4, 10);
 80014f0:	f107 010c 	add.w	r1, r7, #12
 80014f4:	230a      	movs	r3, #10
 80014f6:	2204      	movs	r2, #4
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f003 f80b 	bl	8004514 <HAL_UART_Transmit>
}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	0800aab0 	.word	0x0800aab0
 800150c:	0800aaa0 	.word	0x0800aaa0
 8001510:	0800aaa8 	.word	0x0800aaa8

08001514 <sendCurve_impl>:

void sendCurve_impl(UART_HandleTypeDef *huart, const float curve[5]) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	uint8_t tag[] = "curve ";
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <sendCurve_impl+0xb8>)
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001528:	6018      	str	r0, [r3, #0]
 800152a:	3304      	adds	r3, #4
 800152c:	8019      	strh	r1, [r3, #0]
 800152e:	3302      	adds	r3, #2
 8001530:	0c0a      	lsrs	r2, r1, #16
 8001532:	701a      	strb	r2, [r3, #0]
	uint8_t cur[10];
	uint8_t endTag[] = "/r/n";
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <sendCurve_impl+0xbc>)
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153e:	6018      	str	r0, [r3, #0]
 8001540:	3304      	adds	r3, #4
 8001542:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(huart, " ", 1, 10);
 8001544:	230a      	movs	r3, #10
 8001546:	2201      	movs	r2, #1
 8001548:	4922      	ldr	r1, [pc, #136]	; (80015d4 <sendCurve_impl+0xc0>)
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f002 ffe2 	bl	8004514 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, tag, 5, 10);
 8001550:	f107 011c 	add.w	r1, r7, #28
 8001554:	230a      	movs	r3, #10
 8001556:	2205      	movs	r2, #5
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f002 ffdb 	bl	8004514 <HAL_UART_Transmit>
	for(int i = 0; i < 5; i++){
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e024      	b.n	80015ae <sendCurve_impl+0x9a>
		sprintf((char *)cur, "%.2f", curve[i]);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	f107 0010 	add.w	r0, r7, #16
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <sendCurve_impl+0xc4>)
 800157e:	f006 f821 	bl	80075c4 <siprintf>
		HAL_UART_Transmit(huart, cur, strlen((char*)cur), 10);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe72 	bl	8000270 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	f107 0110 	add.w	r1, r7, #16
 8001594:	230a      	movs	r3, #10
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f002 ffbc 	bl	8004514 <HAL_UART_Transmit>
		HAL_UART_Transmit(huart, " ", 1, 10);
 800159c:	230a      	movs	r3, #10
 800159e:	2201      	movs	r2, #1
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <sendCurve_impl+0xc0>)
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f002 ffb6 	bl	8004514 <HAL_UART_Transmit>
	for(int i = 0; i < 5; i++){
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	3301      	adds	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	ddd7      	ble.n	8001564 <sendCurve_impl+0x50>
	}
	HAL_UART_Transmit(huart, endTag, 4, 10);
 80015b4:	f107 0108 	add.w	r1, r7, #8
 80015b8:	230a      	movs	r3, #10
 80015ba:	2204      	movs	r2, #4
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f002 ffa9 	bl	8004514 <HAL_UART_Transmit>
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	0800aabc 	.word	0x0800aabc
 80015d0:	0800aaa0 	.word	0x0800aaa0
 80015d4:	0800aab8 	.word	0x0800aab8
 80015d8:	0800aa90 	.word	0x0800aa90

080015dc <sendSN_impl>:
void sendSN_impl(UART_HandleTypeDef *huart, int id) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    uint8_t tag[] = "sn ";
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <sendSN_impl+0x84>)
 80015e8:	61fb      	str	r3, [r7, #28]
    uint8_t id_str[10];
    uint8_t endTag[] = "\r\n";
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <sendSN_impl+0x88>)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	4611      	mov	r1, r2
 80015f4:	8019      	strh	r1, [r3, #0]
 80015f6:	3302      	adds	r3, #2
 80015f8:	0c12      	lsrs	r2, r2, #16
 80015fa:	701a      	strb	r2, [r3, #0]

    sprintf((char*)id_str, "%d", id);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4919      	ldr	r1, [pc, #100]	; (8001668 <sendSN_impl+0x8c>)
 8001604:	4618      	mov	r0, r3
 8001606:	f005 ffdd 	bl	80075c4 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fe2e 	bl	8000270 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	f107 011c 	add.w	r1, r7, #28
 800161c:	230a      	movs	r3, #10
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f002 ff78 	bl	8004514 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, id_str, strlen((char*)id_str), 10);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fe21 	bl	8000270 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	f107 0110 	add.w	r1, r7, #16
 8001636:	230a      	movs	r3, #10
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f002 ff6b 	bl	8004514 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fe14 	bl	8000270 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	f107 010c 	add.w	r1, r7, #12
 8001650:	230a      	movs	r3, #10
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f002 ff5e 	bl	8004514 <HAL_UART_Transmit>
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	00206e73 	.word	0x00206e73
 8001664:	0800aac8 	.word	0x0800aac8
 8001668:	0800aac4 	.word	0x0800aac4

0800166c <sendType_impl>:
void sendType_impl(UART_HandleTypeDef *huart, const char* type) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
    uint8_t tag[] = "type ";
 8001676:	4a29      	ldr	r2, [pc, #164]	; (800171c <sendType_impl+0xb0>)
 8001678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001680:	6018      	str	r0, [r3, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	8019      	strh	r1, [r3, #0]
    uint8_t endTag[] = "\r\n";
 8001686:	4a26      	ldr	r2, [pc, #152]	; (8001720 <sendType_impl+0xb4>)
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	4611      	mov	r1, r2
 8001690:	8019      	strh	r1, [r3, #0]
 8001692:	3302      	adds	r3, #2
 8001694:	0c12      	lsrs	r2, r2, #16
 8001696:	701a      	strb	r2, [r3, #0]
    uint8_t hw[] = " hw1.0.0";
 8001698:	4a22      	ldr	r2, [pc, #136]	; (8001724 <sendType_impl+0xb8>)
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	ca07      	ldmia	r2, {r0, r1, r2}
 80016a0:	c303      	stmia	r3!, {r0, r1}
 80016a2:	701a      	strb	r2, [r3, #0]
    uint8_t sw[] = " sw1.0.0";
 80016a4:	4a20      	ldr	r2, [pc, #128]	; (8001728 <sendType_impl+0xbc>)
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ac:	c303      	stmia	r3!, {r0, r1}
 80016ae:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(huart, tag, 5, 10);
 80016b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016b4:	230a      	movs	r3, #10
 80016b6:	2205      	movs	r2, #5
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f002 ff2b 	bl	8004514 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, (uint8_t*)type, (uint16_t)strlen(type), 10);  // Explizite Konvertierung
 80016be:	6838      	ldr	r0, [r7, #0]
 80016c0:	f7fe fdd6 	bl	8000270 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	230a      	movs	r3, #10
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f002 ff21 	bl	8004514 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, hw, strlen((char*)hw), 10);
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fdca 	bl	8000270 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f107 0118 	add.w	r1, r7, #24
 80016e4:	230a      	movs	r3, #10
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f002 ff14 	bl	8004514 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, sw, strlen((char*)sw), 10);
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fdbd 	bl	8000270 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f107 010c 	add.w	r1, r7, #12
 80016fe:	230a      	movs	r3, #10
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f002 ff07 	bl	8004514 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, 4, 10);
 8001706:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800170a:	230a      	movs	r3, #10
 800170c:	2204      	movs	r2, #4
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f002 ff00 	bl	8004514 <HAL_UART_Transmit>
}
 8001714:	bf00      	nop
 8001716:	3730      	adds	r7, #48	; 0x30
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	0800aacc 	.word	0x0800aacc
 8001720:	0800aac8 	.word	0x0800aac8
 8001724:	0800aad4 	.word	0x0800aad4
 8001728:	0800aae0 	.word	0x0800aae0

0800172c <createSendHandler>:



SensorSendHandler createSendHandler(uint32_t timeout) {
 800172c:	b4b0      	push	{r4, r5, r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
    SensorSendHandler handler;
    handler.interface.sendDiameter = sendDiameter_impl;
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <createSendHandler+0x40>)
 8001738:	60bb      	str	r3, [r7, #8]
    handler.interface.sendFrequency = sendFrequency_impl;
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <createSendHandler+0x44>)
 800173c:	60fb      	str	r3, [r7, #12]
    handler.interface.sendCurve = sendCurve_impl;
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <createSendHandler+0x48>)
 8001740:	613b      	str	r3, [r7, #16]
    handler.interface.sendType = sendType_impl;
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <createSendHandler+0x4c>)
 8001744:	617b      	str	r3, [r7, #20]
    handler.interface.sendSN = sendSN_impl;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <createSendHandler+0x50>)
 8001748:	61bb      	str	r3, [r7, #24]
    handler.interface.timeout = timeout;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	61fb      	str	r3, [r7, #28]
    return handler;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	461d      	mov	r5, r3
 8001752:	f107 0408 	add.w	r4, r7, #8
 8001756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800175e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	bcb0      	pop	{r4, r5, r7}
 800176a:	4770      	bx	lr
 800176c:	080013fd 	.word	0x080013fd
 8001770:	08001489 	.word	0x08001489
 8001774:	08001515 	.word	0x08001515
 8001778:	0800166d 	.word	0x0800166d
 800177c:	080015dd 	.word	0x080015dd

08001780 <createUartProcessor>:
#include <string.h>



// Funktion zur Initialisierung des UART-Prozessors
UartProcessor createUartProcessor(CommandEntry* dictionary) {
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    UartProcessor uartProcessor;
    uartProcessor.commandDictionary = dictionary;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60fb      	str	r3, [r7, #12]
    return uartProcessor;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <strncasecmp>:

// Case-insensitive String-Vergleich
int strnicmp(const char *s1, const char *s2, size_t n) {
 800179a:	b590      	push	{r4, r7, lr}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 80017a6:	e019      	b.n	80017dc <strncasecmp+0x42>
        if (tolower(*s1) != tolower(*s2))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 ffc7 	bl	8006740 <tolower>
 80017b2:	4604      	mov	r4, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 ffc1 	bl	8006740 <tolower>
 80017be:	4603      	mov	r3, r0
 80017c0:	429c      	cmp	r4, r3
 80017c2:	d002      	beq.n	80017ca <strncasecmp+0x30>
            return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	e014      	b.n	80017f4 <strncasecmp+0x5a>
        s1++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
        s2++;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
        n--;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3b01      	subs	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <strncasecmp+0x58>
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <strncasecmp+0x58>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1da      	bne.n	80017a8 <strncasecmp+0xe>
    }
    return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <processCommand>:

void processCommand(UartProcessor* uartProcessor,uint8_t* receivedData,uint8_t receivedDataIndex) {
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e023      	b.n	8001858 <processCommand+0x5c>
    	if (strnicmp((char*)receivedData, uartProcessor->commandDictionary[i].command, strlen(uartProcessor->commandDictionary[i].command)) == 0) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	681c      	ldr	r4, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fd21 	bl	8000270 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4621      	mov	r1, r4
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f7ff ffb0 	bl	800179a <strncasecmp>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d108      	bne.n	8001852 <processCommand+0x56>
            // Rufe den entsprechenden Handler auf
    		uartProcessor->commandDictionary[i].functionPointer((char*)receivedData);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	68b8      	ldr	r0, [r7, #8]
 800184e:	4798      	blx	r3
            return;
 8001850:	e00a      	b.n	8001868 <processCommand+0x6c>
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1d3      	bne.n	8001810 <processCommand+0x14>
        }
    }
}
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}
	...

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b0b4      	sub	sp, #208	; 0xd0
 8001874:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001876:	f000 fb99 	bl	8001fac <HAL_Init>

  /* USER CODE BEGIN Init */
  float curve[5] = {1.0, 2.5, 3.7, 4.2, 5.8};
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <main+0xf0>)
 800187c:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001880:	461d      	mov	r5, r3
 8001882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	6023      	str	r3, [r4, #0]

  // Initialisierung des SensorInformation-Objekts mit der initSensor-Funktion
  sensor = initSensor(2.5, 10.0, curve, 1, "Mechanischer Sensor");
 800188a:	4c36      	ldr	r4, [pc, #216]	; (8001964 <main+0xf4>)
 800188c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001890:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <main+0xf8>)
 8001896:	2201      	movs	r2, #1
 8001898:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800189c:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80018a0:	f7ff fac4 	bl	8000e2c <initSensor>
 80018a4:	4620      	mov	r0, r4
 80018a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018aa:	224c      	movs	r2, #76	; 0x4c
 80018ac:	4619      	mov	r1, r3
 80018ae:	f005 ffdc 	bl	800786a <memcpy>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b2:	f000 f865 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b6:	f000 f91f 	bl	8001af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018ba:	f000 f8ed 	bl	8001a98 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018be:	f000 f89b 	bl	80019f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80018c2:	f000 f919 	bl	8001af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018c6:	f000 f8e7 	bl	8001a98 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018ca:	f000 f895 	bl	80019f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uartData = createUartDataObject();
 80018ce:	4c27      	ldr	r4, [pc, #156]	; (800196c <main+0xfc>)
 80018d0:	463b      	mov	r3, r7
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fb64 	bl	8000fa0 <createUartDataObject>
 80018d8:	4620      	mov	r0, r4
 80018da:	463b      	mov	r3, r7
 80018dc:	2260      	movs	r2, #96	; 0x60
 80018de:	4619      	mov	r1, r3
 80018e0:	f005 ffc3 	bl	800786a <memcpy>
  sender = createSendHandler(10);
 80018e4:	4c22      	ldr	r4, [pc, #136]	; (8001970 <main+0x100>)
 80018e6:	463b      	mov	r3, r7
 80018e8:	210a      	movs	r1, #10
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff1e 	bl	800172c <createSendHandler>
 80018f0:	4625      	mov	r5, r4
 80018f2:	463c      	mov	r4, r7
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fc:	e885 0003 	stmia.w	r5, {r0, r1}
  reciever = createInterfaceReceiveHandler(&sensor, &sender, &huart2, &huart2, &htim3);
 8001900:	4c1c      	ldr	r4, [pc, #112]	; (8001974 <main+0x104>)
 8001902:	4638      	mov	r0, r7
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <main+0x108>)
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <main+0x10c>)
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <main+0x10c>)
 800190e:	4a18      	ldr	r2, [pc, #96]	; (8001970 <main+0x100>)
 8001910:	4914      	ldr	r1, [pc, #80]	; (8001964 <main+0xf4>)
 8001912:	f7ff fb81 	bl	8001018 <createInterfaceReceiveHandler>
 8001916:	4625      	mov	r5, r4
 8001918:	463c      	mov	r4, r7
 800191a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001922:	e885 0003 	stmia.w	r5, {r0, r1}

  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_UART_Receive_IT(&huart2,uartData.data.receivedData, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	4910      	ldr	r1, [pc, #64]	; (800196c <main+0xfc>)
 800192a:	4814      	ldr	r0, [pc, #80]	; (800197c <main+0x10c>)
 800192c:	f002 fe7c 	bl	8004628 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // AUSWERTUNG EMPFANGENER NACHRICHTEN
	  if (uartData.data.messageComplete) {
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <main+0xfc>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0fb      	beq.n	8001930 <main+0xc0>
		  processInterfaceMessage(&reciever, uartData.data.receivedData, uartData.data.dataIndex);
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <main+0xfc>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	490a      	ldr	r1, [pc, #40]	; (800196c <main+0xfc>)
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <main+0x104>)
 8001944:	f7ff fd48 	bl	80013d8 <processInterfaceMessage>
		  // Zurücksetzen für die nächste Nachricht
		  uartData.data.messageComplete = 0;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <main+0xfc>)
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
		  uartData.data.dataIndex = 0;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <main+0xfc>)
 8001950:	2200      	movs	r2, #0
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)uartData.data.receivedData, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	4905      	ldr	r1, [pc, #20]	; (800196c <main+0xfc>)
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <main+0x10c>)
 800195a:	f002 fe65 	bl	8004628 <HAL_UART_Receive_IT>
	  if (uartData.data.messageComplete) {
 800195e:	e7e7      	b.n	8001930 <main+0xc0>
 8001960:	0800ab00 	.word	0x0800ab00
 8001964:	20000344 	.word	0x20000344
 8001968:	0800aaec 	.word	0x0800aaec
 800196c:	20000390 	.word	0x20000390
 8001970:	2000032c 	.word	0x2000032c
 8001974:	200003f0 	.word	0x200003f0
 8001978:	20000258 	.word	0x20000258
 800197c:	200002a4 	.word	0x200002a4

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b090      	sub	sp, #64	; 0x40
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	2228      	movs	r2, #40	; 0x28
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f005 fea9 	bl	80076e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a6:	2301      	movs	r3, #1
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019aa:	2310      	movs	r3, #16
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fe58 	bl	800266c <HAL_RCC_OscConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019c2:	f000 f921 	bl	8001c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c6:	230f      	movs	r3, #15
 80019c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 fe82 	bl	80036e8 <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019ea:	f000 f90d 	bl	8001c08 <Error_Handler>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <MX_TIM3_Init+0x9c>)
 8001a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a1e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001a22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3e:	4814      	ldr	r0, [pc, #80]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a40:	f002 f888 	bl	8003b54 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a4a:	f000 f8dd 	bl	8001c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a5c:	f002 fa73 	bl	8003f46 <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001a66:	f000 f8cf 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a78:	f002 fc72 	bl	8004360 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001a82:	f000 f8c1 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000258 	.word	0x20000258
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <MX_USART2_UART_Init+0x5c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_USART2_UART_Init+0x58>)
 8001adc:	f002 fccc 	bl	8004478 <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ae6:	f000 f88f 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200002a4 	.word	0x200002a4
 8001af4:	40004400 	.word	0x40004400

08001af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_GPIO_Init+0x44>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <MX_GPIO_Init+0x44>)
 8001b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b08:	6153      	str	r3, [r2, #20]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_GPIO_Init+0x44>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_GPIO_Init+0x44>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <MX_GPIO_Init+0x44>)
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_GPIO_Init+0x44>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <sendDiameterPeriodic>:

/* USER CODE BEGIN 4 */
void sendDiameterPeriodic(void) {
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	//sender.interface.sendDiameter(&huart1,sensor.getDiameter(&sensor));
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	//	HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_13); Only for debug
	sendDiameterPeriodic();
 8001b54:	f7ff fff4 	bl	8001b40 <sendDiameterPeriodic>
	HAL_TIM_IRQHandler(&htim3);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM3_IRQHandler+0x14>)
 8001b5a:	f002 f8d5 	bl	8003d08 <HAL_TIM_IRQHandler>

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000258 	.word	0x20000258

08001b68 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <HAL_UART_RxCpltCallback+0x98>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d13f      	bne.n	8001bf8 <HAL_UART_RxCpltCallback+0x90>
    if (uartData.data.dataIndex == 0 && uartData.data.receivedData[0] != '?' && uartData.data.receivedData[0] != '!') {
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d110      	bne.n	8001ba2 <HAL_UART_RxCpltCallback+0x3a>
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b3f      	cmp	r3, #63	; 0x3f
 8001b86:	d00c      	beq.n	8001ba2 <HAL_UART_RxCpltCallback+0x3a>
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b21      	cmp	r3, #33	; 0x21
 8001b8e:	d008      	beq.n	8001ba2 <HAL_UART_RxCpltCallback+0x3a>
      // Fehlerhafte Startbyte, Nachricht ignorieren
      uartData.data.dataIndex = 0;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_UART_Receive_IT(&huart2, &uartData.data.receivedData[0], 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	491a      	ldr	r1, [pc, #104]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001b9a:	4819      	ldr	r0, [pc, #100]	; (8001c00 <HAL_UART_RxCpltCallback+0x98>)
 8001b9c:	f002 fd44 	bl	8004628 <HAL_UART_Receive_IT>
    } else {
      uartData.data.dataIndex++;
      HAL_UART_Receive_IT(&huart2, (uint8_t *)&uartData.data.receivedData[uartData.data.dataIndex], 1);
    }
  }
}
 8001ba0:	e02a      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0x90>
    } else if (uartData.data.receivedData[uartData.data.dataIndex] == '\r') {
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	2b0d      	cmp	r3, #13
 8001bac:	d109      	bne.n	8001bc2 <HAL_UART_RxCpltCallback+0x5a>
      uartData.data.receivedData[uartData.data.dataIndex + 1] = '\0';  // Null-Terminierung hinzufügen
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	54d1      	strb	r1, [r2, r3]
      uartData.data.messageComplete = 1;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001bc0:	e01a      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0x90>
    } else if (uartData.data.dataIndex >= sizeof(uartData.data.receivedData) - 1) {
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8001bc8:	d908      	bls.n	8001bdc <HAL_UART_RxCpltCallback+0x74>
      uartData.data.dataIndex = 0;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_UART_Receive_IT(&huart2, &uartData.data.receivedData[0], 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	490c      	ldr	r1, [pc, #48]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <HAL_UART_RxCpltCallback+0x98>)
 8001bd6:	f002 fd27 	bl	8004628 <HAL_UART_Receive_IT>
}
 8001bda:	e00d      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0x90>
      uartData.data.dataIndex++;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
      HAL_UART_Receive_IT(&huart2, (uint8_t *)&uartData.data.receivedData[uartData.data.dataIndex], 1);
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_UART_RxCpltCallback+0x9c>)
 8001bec:	4413      	add	r3, r2
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <HAL_UART_RxCpltCallback+0x98>)
 8001bf4:	f002 fd18 	bl	8004628 <HAL_UART_Receive_IT>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200002a4 	.word	0x200002a4
 8001c04:	20000390 	.word	0x20000390

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <Error_Handler+0x8>
	...

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_MspInit+0x44>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_MspInit+0x44>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6193      	str	r3, [r2, #24]
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_MspInit+0x44>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_MspInit+0x44>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_MspInit+0x44>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_MspInit+0x44>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_TIM_Base_MspInit+0x44>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d113      	bne.n	8001c96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_TIM_Base_MspInit+0x48>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_TIM_Base_MspInit+0x48>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	61d3      	str	r3, [r2, #28]
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_TIM_Base_MspInit+0x48>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	201d      	movs	r0, #29
 8001c8c:	f000 facf 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c90:	201d      	movs	r0, #29
 8001c92:	f000 fae8 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_UART_MspInit+0x90>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d131      	bne.n	8001d2e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_UART_MspInit+0x94>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_UART_MspInit+0x94>)
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_UART_MspInit+0x94>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_UART_MspInit+0x94>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_UART_MspInit+0x94>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_UART_MspInit+0x94>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001cfa:	f248 0304 	movw	r3, #32772	; 0x8004
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f000 fb35 	bl	8002388 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2026      	movs	r0, #38	; 0x26
 8001d24:	f000 fa83 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d28:	2026      	movs	r0, #38	; 0x26
 8001d2a:	f000 fa9c 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40004400 	.word	0x40004400
 8001d3c:	40021000 	.word	0x40021000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 f954 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART2_IRQHandler+0x10>)
 8001d9a:	f002 fc89 	bl	80046b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200002a4 	.word	0x200002a4

08001da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_kill>:

int _kill(int pid, int sig)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dc2:	f005 fd25 	bl	8007810 <__errno>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2216      	movs	r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
  return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_exit>:

void _exit (int status)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ffe7 	bl	8001db8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dea:	e7fe      	b.n	8001dea <_exit+0x12>

08001dec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e00a      	b.n	8001e14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dfe:	f3af 8000 	nop.w
 8001e02:	4601      	mov	r1, r0
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	b2ca      	uxtb	r2, r1
 8001e0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbf0      	blt.n	8001dfe <_read+0x12>
  }

  return len;
 8001e1c:	687b      	ldr	r3, [r7, #4]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e009      	b.n	8001e4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	60ba      	str	r2, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf1      	blt.n	8001e38 <_write+0x12>
  }
  return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_close>:

int _close(int file)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e86:	605a      	str	r2, [r3, #4]
  return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_isatty>:

int _isatty(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <_sbrk+0x5c>)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <_sbrk+0x60>)
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <_sbrk+0x64>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <_sbrk+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef8:	f005 fc8a 	bl	8007810 <__errno>
 8001efc:	4603      	mov	r3, r0
 8001efe:	220c      	movs	r2, #12
 8001f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e009      	b.n	8001f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <_sbrk+0x64>)
 8001f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20003000 	.word	0x20003000
 8001f28:	00000400 	.word	0x00000400
 8001f2c:	20000408 	.word	0x20000408
 8001f30:	20000560 	.word	0x20000560

08001f34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <SystemInit+0x20>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <SystemInit+0x20>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f5c:	f7ff ffea 	bl	8001f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	; (8001f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <LoopForever+0xe>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <LoopForever+0x16>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f005 fc49 	bl	800781c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8a:	f7ff fc71 	bl	8001870 <main>

08001f8e <LoopForever>:

LoopForever:
    b LoopForever
 8001f8e:	e7fe      	b.n	8001f8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f90:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001f9c:	0800afa8 	.word	0x0800afa8
  ldr r2, =_sbss
 8001fa0:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8001fa4:	2000055c 	.word	0x2000055c

08001fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC1_2_IRQHandler>
	...

08001fac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x28>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x28>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f92b 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fe24 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000

08001fd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f943 	bl	8002282 <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f90b 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000050 	.word	0x20000050
 8002030:	20000058 	.word	0x20000058
 8002034:	20000054 	.word	0x20000054

08002038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000058 	.word	0x20000058
 800205c:	2000040c 	.word	0x2000040c

08002060 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;  
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	2000040c 	.word	0x2000040c

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d008      	beq.n	80022be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2204      	movs	r2, #4
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e020      	b.n	8002300 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020e 	bic.w	r2, r2, #14
 80022cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800231e:	2b02      	cmp	r3, #2
 8002320:	d005      	beq.n	800232e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2204      	movs	r2, #4
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e027      	b.n	800237e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 020e 	bic.w	r2, r2, #14
 800233c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0201 	bic.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
    } 
  }
  return status;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002396:	e14e      	b.n	8002636 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8140 	beq.w	8002630 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d005      	beq.n	80023c8 <HAL_GPIO_Init+0x40>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d130      	bne.n	800242a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023fe:	2201      	movs	r2, #1
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 0201 	and.w	r2, r3, #1
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b03      	cmp	r3, #3
 8002434:	d017      	beq.n	8002466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d123      	bne.n	80024ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	6939      	ldr	r1, [r7, #16]
 80024b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0203 	and.w	r2, r3, #3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 809a 	beq.w	8002630 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fc:	4b55      	ldr	r3, [pc, #340]	; (8002654 <HAL_GPIO_Init+0x2cc>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a54      	ldr	r2, [pc, #336]	; (8002654 <HAL_GPIO_Init+0x2cc>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b52      	ldr	r3, [pc, #328]	; (8002654 <HAL_GPIO_Init+0x2cc>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002514:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_GPIO_Init+0x2d0>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800253e:	d013      	beq.n	8002568 <HAL_GPIO_Init+0x1e0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a46      	ldr	r2, [pc, #280]	; (800265c <HAL_GPIO_Init+0x2d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00d      	beq.n	8002564 <HAL_GPIO_Init+0x1dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a45      	ldr	r2, [pc, #276]	; (8002660 <HAL_GPIO_Init+0x2d8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <HAL_GPIO_Init+0x1d8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a44      	ldr	r2, [pc, #272]	; (8002664 <HAL_GPIO_Init+0x2dc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_GPIO_Init+0x1d4>
 8002558:	2303      	movs	r3, #3
 800255a:	e006      	b.n	800256a <HAL_GPIO_Init+0x1e2>
 800255c:	2305      	movs	r3, #5
 800255e:	e004      	b.n	800256a <HAL_GPIO_Init+0x1e2>
 8002560:	2302      	movs	r3, #2
 8002562:	e002      	b.n	800256a <HAL_GPIO_Init+0x1e2>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_GPIO_Init+0x1e2>
 8002568:	2300      	movs	r3, #0
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	f002 0203 	and.w	r2, r2, #3
 8002570:	0092      	lsls	r2, r2, #2
 8002572:	4093      	lsls	r3, r2
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800257a:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_GPIO_Init+0x2d0>)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002588:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025ac:	4a2e      	ldr	r2, [pc, #184]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800262a:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3301      	adds	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	f47f aea9 	bne.w	8002398 <HAL_GPIO_Init+0x10>
  }
}
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40021000 	.word	0x40021000
 8002658:	40010000 	.word	0x40010000
 800265c:	48000400 	.word	0x48000400
 8002660:	48000800 	.word	0x48000800
 8002664:	48000c00 	.word	0x48000c00
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002672:	af00      	add	r7, sp, #0
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f001 b823 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 817d 	beq.w	80029a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026a8:	4bbc      	ldr	r3, [pc, #752]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d00c      	beq.n	80026ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b4:	4bb9      	ldr	r3, [pc, #740]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d15c      	bne.n	800277a <HAL_RCC_OscConfig+0x10e>
 80026c0:	4bb6      	ldr	r3, [pc, #728]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d155      	bne.n	800277a <HAL_RCC_OscConfig+0x10e>
 80026ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_OscConfig+0x94>
 80026fa:	4ba8      	ldr	r3, [pc, #672]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e015      	b.n	800272c <HAL_RCC_OscConfig+0xc0>
 8002700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002704:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002718:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800271c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002728:	4b9c      	ldr	r3, [pc, #624]	; (800299c <HAL_RCC_OscConfig+0x330>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002730:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002734:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002738:	fa92 f2a2 	rbit	r2, r2
 800273c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002740:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002744:	fab2 f282 	clz	r2, r2
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f042 0220 	orr.w	r2, r2, #32
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f002 021f 	and.w	r2, r2, #31
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f202 	lsl.w	r2, r1, r2
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 811f 	beq.w	80029a0 <HAL_RCC_OscConfig+0x334>
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 8116 	bne.w	80029a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f000 bfaf 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x12e>
 800278c:	4b83      	ldr	r3, [pc, #524]	; (800299c <HAL_RCC_OscConfig+0x330>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a82      	ldr	r2, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x330>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e036      	b.n	8002808 <HAL_RCC_OscConfig+0x19c>
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x158>
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7b      	ldr	r2, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b79      	ldr	r3, [pc, #484]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a78      	ldr	r2, [pc, #480]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e021      	b.n	8002808 <HAL_RCC_OscConfig+0x19c>
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x184>
 80027d6:	4b71      	ldr	r3, [pc, #452]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a70      	ldr	r2, [pc, #448]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b6e      	ldr	r3, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6d      	ldr	r2, [pc, #436]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0x19c>
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a69      	ldr	r2, [pc, #420]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a66      	ldr	r2, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x330>)
 8002802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002806:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002808:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x330>)
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f023 020f 	bic.w	r2, r3, #15
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	495f      	ldr	r1, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x330>)
 800281e:	4313      	orrs	r3, r2
 8002820:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d059      	beq.n	80028e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fc15 	bl	8002060 <HAL_GetTick>
 8002836:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff fc10 	bl	8002060 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d902      	bls.n	8002852 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	f000 bf43 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
 8002852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002856:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002866:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_RCC_OscConfig+0x218>
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x330>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	e015      	b.n	80028b0 <HAL_RCC_OscConfig+0x244>
 8002884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002888:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x330>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80028b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028bc:	fa92 f2a2 	rbit	r2, r2
 80028c0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80028c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80028c8:	fab2 f282 	clz	r2, r2
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f042 0220 	orr.w	r2, r2, #32
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	f002 021f 	and.w	r2, r2, #31
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ab      	beq.n	800283c <HAL_RCC_OscConfig+0x1d0>
 80028e4:	e05d      	b.n	80029a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff fbbb 	bl	8002060 <HAL_GetTick>
 80028ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff fbb6 	bl	8002060 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d902      	bls.n	8002906 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	f000 bee9 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
 8002906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800291a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d102      	bne.n	8002938 <HAL_RCC_OscConfig+0x2cc>
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCC_OscConfig+0x330>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e015      	b.n	8002964 <HAL_RCC_OscConfig+0x2f8>
 8002938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800294c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002950:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002954:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_RCC_OscConfig+0x330>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002968:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800296c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002970:	fa92 f2a2 	rbit	r2, r2
 8002974:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002978:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f042 0220 	orr.w	r2, r2, #32
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f002 021f 	and.w	r2, r2, #31
 800298c:	2101      	movs	r1, #1
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ab      	bne.n	80028f0 <HAL_RCC_OscConfig+0x284>
 8002998:	e003      	b.n	80029a2 <HAL_RCC_OscConfig+0x336>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 817d 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029b8:	4ba6      	ldr	r3, [pc, #664]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00b      	beq.n	80029dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029c4:	4ba3      	ldr	r3, [pc, #652]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d172      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x44a>
 80029d0:	4ba0      	ldr	r3, [pc, #640]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d16c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x44a>
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0x3a0>
 8002a06:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e013      	b.n	8002a34 <HAL_RCC_OscConfig+0x3c8>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2202      	movs	r2, #2
 8002a36:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a46:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f042 0220 	orr.w	r2, r2, #32
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f002 021f 	and.w	r2, r2, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCC_OscConfig+0x410>
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f000 be2e 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b75      	ldr	r3, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	21f8      	movs	r1, #248	; 0xf8
 8002a92:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a9a:	fa91 f1a1 	rbit	r1, r1
 8002a9e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002aa2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002aa6:	fab1 f181 	clz	r1, r1
 8002aaa:	b2c9      	uxtb	r1, r1
 8002aac:	408b      	lsls	r3, r1
 8002aae:	4969      	ldr	r1, [pc, #420]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab4:	e0fd      	b.n	8002cb2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8088 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x56c>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ada:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	461a      	mov	r2, r3
 8002af0:	2301      	movs	r3, #1
 8002af2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7ff fab4 	bl	8002060 <HAL_GetTick>
 8002af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7ff faaf 	bl	8002060 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d902      	bls.n	8002b14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	f000 bde2 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4d8>
 8002b3e:	4b45      	ldr	r3, [pc, #276]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e013      	b.n	8002b6c <HAL_RCC_OscConfig+0x500>
 8002b44:	2302      	movs	r3, #2
 8002b46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b56:	2302      	movs	r3, #2
 8002b58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b68:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b82:	fab2 f282 	clz	r2, r2
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f042 0220 	orr.w	r2, r2, #32
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f002 021f 	and.w	r2, r2, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0af      	beq.n	8002afe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	21f8      	movs	r1, #248	; 0xf8
 8002bb4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bbc:	fa91 f1a1 	rbit	r1, r1
 8002bc0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002bc4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002bc8:	fab1 f181 	clz	r1, r1
 8002bcc:	b2c9      	uxtb	r1, r1
 8002bce:	408b      	lsls	r3, r1
 8002bd0:	4920      	ldr	r1, [pc, #128]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
 8002bd6:	e06c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x646>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2300      	movs	r3, #0
 8002c02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7ff fa2c 	bl	8002060 <HAL_GetTick>
 8002c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7ff fa27 	bl	8002060 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d902      	bls.n	8002c24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	f000 bd5a 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d104      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5ec>
 8002c4e:	4b01      	ldr	r3, [pc, #4]	; (8002c54 <HAL_RCC_OscConfig+0x5e8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	e015      	b.n	8002c80 <HAL_RCC_OscConfig+0x614>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c7c:	4bc8      	ldr	r3, [pc, #800]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2202      	movs	r2, #2
 8002c82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c8a:	fa92 f2a2 	rbit	r2, r2
 8002c8e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	f042 0220 	orr.w	r2, r2, #32
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ad      	bne.n	8002c0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8110 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d079      	beq.n	8002dcc <HAL_RCC_OscConfig+0x760>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4bab      	ldr	r3, [pc, #684]	; (8002fa4 <HAL_RCC_OscConfig+0x938>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2301      	movs	r3, #1
 8002d00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7ff f9ad 	bl	8002060 <HAL_GetTick>
 8002d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7ff f9a8 	bl	8002060 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d902      	bls.n	8002d22 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f000 bcdb 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fa93 f2a3 	rbit	r2, r3
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d60:	2202      	movs	r2, #2
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	fa93 f2a3 	rbit	r2, r3
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7c:	4b88      	ldr	r3, [pc, #544]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d88:	2102      	movs	r1, #2
 8002d8a:	6019      	str	r1, [r3, #0]
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f1a3 	rbit	r1, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002da2:	6019      	str	r1, [r3, #0]
  return result;
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0a0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x6a0>
 8002dca:	e08d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x87c>
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dee:	601a      	str	r2, [r3, #0]
  return result;
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002df8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <HAL_RCC_OscConfig+0x938>)
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff f927 	bl	8002060 <HAL_GetTick>
 8002e12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e18:	f7ff f922 	bl	8002060 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d902      	bls.n	8002e2e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	f000 bc55 	b.w	80036d8 <HAL_RCC_OscConfig+0x106c>
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e36:	2202      	movs	r2, #2
 8002e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e7e:	2202      	movs	r2, #2
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	6019      	str	r1, [r3, #0]
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f1a3 	rbit	r1, r3
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ec0:	6019      	str	r1, [r3, #0]
  return result;
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d197      	bne.n	8002e18 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 81a1 	beq.w	8003240 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f10:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	61d3      	str	r3, [r2, #28]
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f36:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x93c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d11a      	bne.n	8002f80 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_RCC_OscConfig+0x93c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_RCC_OscConfig+0x93c>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7ff f883 	bl	8002060 <HAL_GetTick>
 8002f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	e009      	b.n	8002f74 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7ff f87e 	bl	8002060 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e3b1      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_RCC_OscConfig+0x93c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCC_OscConfig+0x940>
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a02      	ldr	r2, [pc, #8]	; (8002fa0 <HAL_RCC_OscConfig+0x934>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	e03c      	b.n	8003018 <HAL_RCC_OscConfig+0x9ac>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	10908120 	.word	0x10908120
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x96a>
 8002fbc:	4bc1      	ldr	r3, [pc, #772]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4ac0      	ldr	r2, [pc, #768]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6213      	str	r3, [r2, #32]
 8002fc8:	4bbe      	ldr	r3, [pc, #760]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4abd      	ldr	r2, [pc, #756]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	e020      	b.n	8003018 <HAL_RCC_OscConfig+0x9ac>
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x994>
 8002fe6:	4bb7      	ldr	r3, [pc, #732]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4ab6      	ldr	r2, [pc, #728]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6213      	str	r3, [r2, #32]
 8002ff2:	4bb4      	ldr	r3, [pc, #720]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4ab3      	ldr	r2, [pc, #716]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x9ac>
 8003000:	4bb0      	ldr	r3, [pc, #704]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4aaf      	ldr	r2, [pc, #700]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6213      	str	r3, [r2, #32]
 800300c:	4bad      	ldr	r3, [pc, #692]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4aac      	ldr	r2, [pc, #688]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8081 	beq.w	800312c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7ff f819 	bl	8002060 <HAL_GetTick>
 800302e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7ff f814 	bl	8002060 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e345      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003054:	2202      	movs	r2, #2
 8003056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003078:	2202      	movs	r2, #2
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003092:	601a      	str	r2, [r3, #0]
  return result;
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800309c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0xa4c>
 80030b2:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	e013      	b.n	80030e0 <HAL_RCC_OscConfig+0xa74>
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	fa93 f2a3 	rbit	r2, r3
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	4b79      	ldr	r3, [pc, #484]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030e8:	2102      	movs	r1, #2
 80030ea:	6011      	str	r1, [r2, #0]
 80030ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	fa92 f1a2 	rbit	r1, r2
 80030fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003102:	6011      	str	r1, [r2, #0]
  return result;
 8003104:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003108:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	fab2 f282 	clz	r2, r2
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f002 021f 	and.w	r2, r2, #31
 800311e:	2101      	movs	r1, #1
 8003120:	fa01 f202 	lsl.w	r2, r1, r2
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d084      	beq.n	8003034 <HAL_RCC_OscConfig+0x9c8>
 800312a:	e07f      	b.n	800322c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7fe ff98 	bl	8002060 <HAL_GetTick>
 8003130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003134:	e00b      	b.n	800314e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fe ff93 	bl	8002060 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e2c4      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003156:	2202      	movs	r2, #2
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800317a:	2202      	movs	r2, #2
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	fa93 f2a3 	rbit	r2, r3
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003194:	601a      	str	r2, [r3, #0]
  return result;
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800319e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_OscConfig+0xb4e>
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	e013      	b.n	80031e2 <HAL_RCC_OscConfig+0xb76>
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031c2:	2202      	movs	r2, #2
 80031c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031ea:	2102      	movs	r1, #2
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fa92 f1a2 	rbit	r1, r2
 80031fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003200:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003204:	6011      	str	r1, [r2, #0]
  return result;
 8003206:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800320a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f002 021f 	and.w	r2, r2, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f202 	lsl.w	r2, r1, r2
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d184      	bne.n	8003136 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800322c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8242 	beq.w	80036d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_RCC_OscConfig+0xc58>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	f000 8213 	beq.w	8003686 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2b02      	cmp	r3, #2
 800326e:	f040 8162 	bne.w	8003536 <HAL_RCC_OscConfig+0xeca>
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800327a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003296:	601a      	str	r2, [r3, #0]
  return result;
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	461a      	mov	r2, r3
 80032b4:	2300      	movs	r3, #0
 80032b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fed2 	bl	8002060 <HAL_GetTick>
 80032bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	e00c      	b.n	80032dc <HAL_RCC_OscConfig+0xc70>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe feca 	bl	8002060 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1fd      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003300:	601a      	str	r2, [r3, #0]
  return result;
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800330a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d102      	bne.n	8003326 <HAL_RCC_OscConfig+0xcba>
 8003320:	4bb0      	ldr	r3, [pc, #704]	; (80035e4 <HAL_RCC_OscConfig+0xf78>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	e027      	b.n	8003376 <HAL_RCC_OscConfig+0xd0a>
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800332e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	fa93 f2a3 	rbit	r2, r3
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fa93 f2a3 	rbit	r2, r3
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	4b9c      	ldr	r3, [pc, #624]	; (80035e4 <HAL_RCC_OscConfig+0xf78>)
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800337a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800337e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003382:	6011      	str	r1, [r2, #0]
 8003384:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003388:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	fa92 f1a2 	rbit	r1, r2
 8003392:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003396:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800339a:	6011      	str	r1, [r2, #0]
  return result;
 800339c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f042 0220 	orr.w	r2, r2, #32
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d182      	bne.n	80032c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c2:	4b88      	ldr	r3, [pc, #544]	; (80035e4 <HAL_RCC_OscConfig+0xf78>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	430b      	orrs	r3, r1
 80033e4:	497f      	ldr	r1, [pc, #508]	; (80035e4 <HAL_RCC_OscConfig+0xf78>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800340e:	601a      	str	r2, [r3, #0]
  return result;
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003418:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2301      	movs	r3, #1
 800342e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fe16 	bl	8002060 <HAL_GetTick>
 8003434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003438:	e009      	b.n	800344e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe fe11 	bl	8002060 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e144      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003472:	601a      	str	r2, [r3, #0]
  return result;
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800347c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_RCC_OscConfig+0xe2c>
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_RCC_OscConfig+0xf78>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e027      	b.n	80034e8 <HAL_RCC_OscConfig+0xe7c>
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	fa93 f2a3 	rbit	r2, r3
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fa93 f2a3 	rbit	r2, r3
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_OscConfig+0xf78>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	fa92 f1a2 	rbit	r1, r2
 8003504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003508:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800350c:	6011      	str	r1, [r2, #0]
  return result;
 800350e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003512:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	fab2 f282 	clz	r2, r2
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f042 0220 	orr.w	r2, r2, #32
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	f002 021f 	and.w	r2, r2, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f202 	lsl.w	r2, r1, r2
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d082      	beq.n	800343a <HAL_RCC_OscConfig+0xdce>
 8003534:	e0cf      	b.n	80036d6 <HAL_RCC_OscConfig+0x106a>
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800353e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003564:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003570:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	461a      	mov	r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe fd70 	bl	8002060 <HAL_GetTick>
 8003580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	e009      	b.n	800359a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003586:	f7fe fd6b 	bl	8002060 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e09e      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	fa93 f2a3 	rbit	r2, r3
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035be:	601a      	str	r2, [r3, #0]
  return result;
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d104      	bne.n	80035e8 <HAL_RCC_OscConfig+0xf7c>
 80035de:	4b01      	ldr	r3, [pc, #4]	; (80035e4 <HAL_RCC_OscConfig+0xf78>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	e029      	b.n	8003638 <HAL_RCC_OscConfig+0xfcc>
 80035e4:	40021000 	.word	0x40021000
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f2a3 	rbit	r2, r3
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCC_OscConfig+0x1078>)
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800363c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003640:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800364a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	fa92 f1a2 	rbit	r1, r2
 8003654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003658:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800365c:	6011      	str	r1, [r2, #0]
  return result;
 800365e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003662:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	fab2 f282 	clz	r2, r2
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	f042 0220 	orr.w	r2, r2, #32
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f002 021f 	and.w	r2, r2, #31
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f202 	lsl.w	r2, r1, r2
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d180      	bne.n	8003586 <HAL_RCC_OscConfig+0xf1a>
 8003684:	e027      	b.n	80036d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e01e      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_OscConfig+0x1078>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d10b      	bne.n	80036d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000

080036e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b09e      	sub	sp, #120	; 0x78
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e162      	b.n	80039c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b90      	ldr	r3, [pc, #576]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b8d      	ldr	r3, [pc, #564]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	498b      	ldr	r1, [pc, #556]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b89      	ldr	r3, [pc, #548]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e14a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373c:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	497f      	ldr	r1, [pc, #508]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80dc 	beq.w	8003914 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d13c      	bne.n	80037de <HAL_RCC_ClockConfig+0xf6>
 8003764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003768:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d102      	bne.n	800378e <HAL_RCC_ClockConfig+0xa6>
 8003788:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	e00f      	b.n	80037ae <HAL_RCC_ClockConfig+0xc6>
 800378e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003792:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	667b      	str	r3, [r7, #100]	; 0x64
 800379c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a0:	663b      	str	r3, [r7, #96]	; 0x60
 80037a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80037b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037b6:	fa92 f2a2 	rbit	r2, r2
 80037ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037be:	fab2 f282 	clz	r2, r2
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	f042 0220 	orr.w	r2, r2, #32
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	f002 021f 	and.w	r2, r2, #31
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d17b      	bne.n	80038d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0f3      	b.n	80039c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d13c      	bne.n	8003860 <HAL_RCC_ClockConfig+0x178>
 80037e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <HAL_RCC_ClockConfig+0x128>
 800380a:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	e00f      	b.n	8003830 <HAL_RCC_ClockConfig+0x148>
 8003810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003814:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	647b      	str	r3, [r7, #68]	; 0x44
 800381e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003822:	643b      	str	r3, [r7, #64]	; 0x40
 8003824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003834:	63ba      	str	r2, [r7, #56]	; 0x38
 8003836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003838:	fa92 f2a2 	rbit	r2, r2
 800383c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800383e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003840:	fab2 f282 	clz	r2, r2
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f042 0220 	orr.w	r2, r2, #32
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f002 021f 	and.w	r2, r2, #31
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d13a      	bne.n	80038d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b2      	b.n	80039c6 <HAL_RCC_ClockConfig+0x2de>
 8003860:	2302      	movs	r3, #2
 8003862:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_RCC_ClockConfig+0x1a0>
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e00d      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1bc>
 8003888:	2302      	movs	r3, #2
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	2302      	movs	r3, #2
 8003896:	623b      	str	r3, [r7, #32]
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	2202      	movs	r2, #2
 80038a6:	61ba      	str	r2, [r7, #24]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	fa92 f2a2 	rbit	r2, r2
 80038ae:	617a      	str	r2, [r7, #20]
  return result;
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	fab2 f282 	clz	r2, r2
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f002 021f 	and.w	r2, r2, #31
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e079      	b.n	80039c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	491a      	ldr	r1, [pc, #104]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e4:	f7fe fbbc 	bl	8002060 <HAL_GetTick>
 80038e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7fe fbb8 	bl	8002060 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e061      	b.n	80039c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_RCC_ClockConfig+0x260>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 020c 	and.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	429a      	cmp	r2, r3
 8003912:	d1eb      	bne.n	80038ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d214      	bcs.n	800394c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 0207 	bic.w	r2, r3, #7
 800392a:	4906      	ldr	r1, [pc, #24]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <HAL_RCC_ClockConfig+0x25c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e040      	b.n	80039c6 <HAL_RCC_ClockConfig+0x2de>
 8003944:	40022000 	.word	0x40022000
 8003948:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_RCC_ClockConfig+0x2e8>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	491a      	ldr	r1, [pc, #104]	; (80039d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4912      	ldr	r1, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800398a:	f000 f829 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800398e:	4601      	mov	r1, r0
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	22f0      	movs	r2, #240	; 0xf0
 800399a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	fa92 f2a2 	rbit	r2, r2
 80039a2:	60fa      	str	r2, [r7, #12]
  return result;
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	fab2 f282 	clz	r2, r2
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	40d3      	lsrs	r3, r2
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x2ec>)
 80039b0:	5cd3      	ldrb	r3, [r2, r3]
 80039b2:	fa21 f303 	lsr.w	r3, r1, r3
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_RCC_ClockConfig+0x2f0>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_RCC_ClockConfig+0x2f4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe fb0a 	bl	8001fd8 <HAL_InitTick>
  
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3778      	adds	r7, #120	; 0x78
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	0800ab20 	.word	0x0800ab20
 80039d8:	20000050 	.word	0x20000050
 80039dc:	20000054 	.word	0x20000054

080039e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b08b      	sub	sp, #44	; 0x2c
 80039e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d002      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x30>
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x36>
 8003a0e:	e03c      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a12:	623b      	str	r3, [r7, #32]
      break;
 8003a14:	e03c      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	fa92 f2a2 	rbit	r2, r2
 8003a28:	607a      	str	r2, [r7, #4]
  return result;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	fab2 f282 	clz	r2, r2
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	40d3      	lsrs	r3, r2
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a3a:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	220f      	movs	r2, #15
 8003a44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	fa92 f2a2 	rbit	r2, r2
 8003a4c:	60fa      	str	r2, [r7, #12]
  return result;
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	40d3      	lsrs	r3, r2
 8003a58:	4a14      	ldr	r2, [pc, #80]	; (8003aac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a68:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	e004      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	623b      	str	r3, [r7, #32]
      break;
 8003a88:	e002      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a8c:	623b      	str	r3, [r7, #32]
      break;
 8003a8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	372c      	adds	r7, #44	; 0x2c
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	007a1200 	.word	0x007a1200
 8003aa8:	0800ab38 	.word	0x0800ab38
 8003aac:	0800ab48 	.word	0x0800ab48
 8003ab0:	003d0900 	.word	0x003d0900

08003ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000050 	.word	0x20000050

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ad2:	f7ff ffef 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ae0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ae4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	fa92 f2a2 	rbit	r2, r2
 8003aec:	603a      	str	r2, [r7, #0]
  return result;
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	fab2 f282 	clz	r2, r2
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	40d3      	lsrs	r3, r2
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	0800ab30 	.word	0x0800ab30

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b16:	f7ff ffcd 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	fa92 f2a2 	rbit	r2, r2
 8003b30:	603a      	str	r2, [r7, #0]
  return result;
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	40d3      	lsrs	r3, r2
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	0800ab30 	.word	0x0800ab30

08003b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e049      	b.n	8003bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fe f86e 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f000 fad2 	bl	800413c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <HAL_TIM_Base_Stop+0x38>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	f240 4344 	movw	r3, #1092	; 0x444
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_Base_Stop+0x38>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e040      	b.n	8003cea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x58>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d009      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x58>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_TIM_Base_Start_IT+0xac>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x58>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d115      	bne.n	8003cd4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d015      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x96>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d011      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	e008      	b.n	8003ce6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e000      	b.n	8003ce8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	00010007 	.word	0x00010007

08003d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0202 	mvn.w	r2, #2
 8003d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9d8 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9ca 	bl	80040ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f9db 	bl	8004114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d122      	bne.n	8003db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d11b      	bne.n	8003db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0204 	mvn.w	r2, #4
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f9ae 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9a0 	bl	80040ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f9b1 	bl	8004114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d122      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d11b      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0208 	mvn.w	r2, #8
 8003ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f984 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003df8:	e005      	b.n	8003e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f976 	bl	80040ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f987 	bl	8004114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d122      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d11b      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0210 	mvn.w	r2, #16
 8003e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2208      	movs	r2, #8
 8003e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f95a 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e005      	b.n	8003e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f94c 	bl	80040ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f95d 	bl	8004114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0201 	mvn.w	r2, #1
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f926 	bl	80040d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b80      	cmp	r3, #128	; 0x80
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 facc 	bl	8004450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fabf 	bl	8004464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f90b 	bl	8004128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0220 	mvn.w	r2, #32
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fa7f 	bl	800443c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_ConfigClockSource+0x1c>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0b6      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x18a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9e:	d03e      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xd8>
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	f200 8087 	bhi.w	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	f000 8086 	beq.w	80040bc <HAL_TIM_ConfigClockSource+0x176>
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d87f      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fb6:	2b70      	cmp	r3, #112	; 0x70
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xaa>
 8003fba:	2b70      	cmp	r3, #112	; 0x70
 8003fbc:	d87b      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fbe:	2b60      	cmp	r3, #96	; 0x60
 8003fc0:	d050      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0x11e>
 8003fc2:	2b60      	cmp	r3, #96	; 0x60
 8003fc4:	d877      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fc6:	2b50      	cmp	r3, #80	; 0x50
 8003fc8:	d03c      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0xfe>
 8003fca:	2b50      	cmp	r3, #80	; 0x50
 8003fcc:	d873      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d058      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x13e>
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d86f      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fd6:	2b30      	cmp	r3, #48	; 0x30
 8003fd8:	d064      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fda:	2b30      	cmp	r3, #48	; 0x30
 8003fdc:	d86b      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d060      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d867      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d05c      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d05a      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fee:	e062      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	f000 f98e 	bl	8004320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004012:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
      break;
 800401c:	e04f      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	f000 f977 	bl	8004320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004040:	609a      	str	r2, [r3, #8]
      break;
 8004042:	e03c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004050:	461a      	mov	r2, r3
 8004052:	f000 f8eb 	bl	800422c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2150      	movs	r1, #80	; 0x50
 800405c:	4618      	mov	r0, r3
 800405e:	f000 f944 	bl	80042ea <TIM_ITRx_SetConfig>
      break;
 8004062:	e02c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004070:	461a      	mov	r2, r3
 8004072:	f000 f90a 	bl	800428a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2160      	movs	r1, #96	; 0x60
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f934 	bl	80042ea <TIM_ITRx_SetConfig>
      break;
 8004082:	e01c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004090:	461a      	mov	r2, r3
 8004092:	f000 f8cb 	bl	800422c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2140      	movs	r1, #64	; 0x40
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f924 	bl	80042ea <TIM_ITRx_SetConfig>
      break;
 80040a2:	e00c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 f91b 	bl	80042ea <TIM_ITRx_SetConfig>
      break;
 80040b4:	e003      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
      break;
 80040ba:	e000      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a32      	ldr	r2, [pc, #200]	; (8004218 <TIM_Base_SetConfig+0xdc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <TIM_Base_SetConfig+0x28>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415a:	d003      	beq.n	8004164 <TIM_Base_SetConfig+0x28>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a2f      	ldr	r2, [pc, #188]	; (800421c <TIM_Base_SetConfig+0xe0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d108      	bne.n	8004176 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a27      	ldr	r2, [pc, #156]	; (8004218 <TIM_Base_SetConfig+0xdc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <TIM_Base_SetConfig+0x6a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d00f      	beq.n	80041a6 <TIM_Base_SetConfig+0x6a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <TIM_Base_SetConfig+0xe0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0x6a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <TIM_Base_SetConfig+0xe4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0x6a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a22      	ldr	r2, [pc, #136]	; (8004224 <TIM_Base_SetConfig+0xe8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0x6a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a21      	ldr	r2, [pc, #132]	; (8004228 <TIM_Base_SetConfig+0xec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <TIM_Base_SetConfig+0xdc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00b      	beq.n	80041fc <TIM_Base_SetConfig+0xc0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <TIM_Base_SetConfig+0xe4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <TIM_Base_SetConfig+0xc0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <TIM_Base_SetConfig+0xe8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0xc0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <TIM_Base_SetConfig+0xec>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40012c00 	.word	0x40012c00
 800421c:	40000400 	.word	0x40000400
 8004220:	40014000 	.word	0x40014000
 8004224:	40014400 	.word	0x40014400
 8004228:	40014800 	.word	0x40014800

0800422c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 030a 	bic.w	r3, r3, #10
 8004268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800428a:	b480      	push	{r7}
 800428c:	b087      	sub	sp, #28
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f023 0210 	bic.w	r2, r3, #16
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	f043 0307 	orr.w	r3, r3, #7
 800430c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	609a      	str	r2, [r3, #8]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800433a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	021a      	lsls	r2, r3, #8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	431a      	orrs	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004374:	2302      	movs	r3, #2
 8004376:	e054      	b.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a24      	ldr	r2, [pc, #144]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d009      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a13      	ldr	r2, [pc, #76]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10c      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400
 8004438:	40014000 	.word	0x40014000

0800443c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e040      	b.n	800450c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd fc04 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fc00 	bl	8004cbc <UART_SetConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fd2a 	bl	8004f28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fdb1 	bl	800506c <UART_CheckIdleState>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004528:	2b20      	cmp	r3, #32
 800452a:	d178      	bne.n	800461e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_UART_Transmit+0x24>
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e071      	b.n	8004620 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2221      	movs	r2, #33	; 0x21
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454a:	f7fd fd89 	bl	8002060 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d108      	bne.n	800457c <HAL_UART_Transmit+0x68>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e003      	b.n	8004584 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004584:	e030      	b.n	80045e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2200      	movs	r2, #0
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fe13 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e03c      	b.n	8004620 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b8:	b292      	uxth	r2, r2
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	3302      	adds	r3, #2
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e008      	b.n	80045d6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	b292      	uxth	r2, r2
 80045ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1c8      	bne.n	8004586 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	2140      	movs	r1, #64	; 0x40
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fddc 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e005      	b.n	8004620 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463c:	2b20      	cmp	r3, #32
 800463e:	d132      	bne.n	80046a6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Receive_IT+0x24>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e02b      	b.n	80046a8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d018      	beq.n	8004696 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	613b      	str	r3, [r7, #16]
   return(result);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	69f9      	ldr	r1, [r7, #28]
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e6      	bne.n	8004664 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	461a      	mov	r2, r3
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fdf5 	bl	800528c <UART_Start_Receive_IT>
 80046a2:	4603      	mov	r3, r0
 80046a4:	e000      	b.n	80046a8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b0ba      	sub	sp, #232	; 0xe8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046da:	f640 030f 	movw	r3, #2063	; 0x80f
 80046de:	4013      	ands	r3, r2
 80046e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d115      	bne.n	8004718 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00f      	beq.n	8004718 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 82ab 	beq.w	8004c64 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
      }
      return;
 8004716:	e2a5      	b.n	8004c64 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8117 	beq.w	8004950 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800472e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004732:	4b85      	ldr	r3, [pc, #532]	; (8004948 <HAL_UART_IRQHandler+0x298>)
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 810a 	beq.w	8004950 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d011      	beq.n	800476c <HAL_UART_IRQHandler+0xbc>
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004762:	f043 0201 	orr.w	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d011      	beq.n	800479c <HAL_UART_IRQHandler+0xec>
 8004778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00b      	beq.n	800479c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2202      	movs	r2, #2
 800478a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d011      	beq.n	80047cc <HAL_UART_IRQHandler+0x11c>
 80047a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2204      	movs	r2, #4
 80047ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c2:	f043 0202 	orr.w	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d017      	beq.n	8004808 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2208      	movs	r2, #8
 80047f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fe:	f043 0208 	orr.w	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <HAL_UART_IRQHandler+0x18a>
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00c      	beq.n	800483a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8211 	beq.w	8004c68 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d005      	beq.n	8004892 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800488a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04f      	beq.n	8004932 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fdc0 	bl	8005418 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d141      	bne.n	800492a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3308      	adds	r3, #8
 80048ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1d9      	bne.n	80048a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d013      	beq.n	8004922 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	4a13      	ldr	r2, [pc, #76]	; (800494c <HAL_UART_IRQHandler+0x29c>)
 8004900:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fd00 	bl	800230c <HAL_DMA_Abort_IT>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d017      	beq.n	8004942 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800491c:	4610      	mov	r0, r2
 800491e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	e00f      	b.n	8004942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9b4 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	e00b      	b.n	8004942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9b0 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e007      	b.n	8004942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9ac 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004940:	e192      	b.n	8004c68 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004942:	bf00      	nop
    return;
 8004944:	e190      	b.n	8004c68 <HAL_UART_IRQHandler+0x5b8>
 8004946:	bf00      	nop
 8004948:	04000120 	.word	0x04000120
 800494c:	080054e1 	.word	0x080054e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004954:	2b01      	cmp	r3, #1
 8004956:	f040 814b 	bne.w	8004bf0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8144 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 813d 	beq.w	8004bf0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2210      	movs	r2, #16
 800497c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	f040 80b5 	bne.w	8004af8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800499a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8164 	beq.w	8004c6c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ae:	429a      	cmp	r2, r3
 80049b0:	f080 815c 	bcs.w	8004c6c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	f000 8086 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1da      	bne.n	80049ca <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e1      	bne.n	8004a14 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3308      	adds	r3, #8
 8004a56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a74:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e3      	bne.n	8004a50 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	f023 0310 	bic.w	r3, r3, #16
 8004aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e4      	bne.n	8004a96 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fd fbe2 	bl	800229a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f8d7 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004af6:	e0b9      	b.n	8004c6c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80ab 	beq.w	8004c70 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80a6 	beq.w	8004c70 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
 8004b48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e4      	bne.n	8004b24 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	623b      	str	r3, [r7, #32]
   return(result);
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e3      	bne.n	8004b5a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e4      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f85b 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bee:	e03f      	b.n	8004c70 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00e      	beq.n	8004c1a <HAL_UART_IRQHandler+0x56a>
 8004bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fe4c 	bl	80058b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c18:	e02d      	b.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01c      	beq.n	8004c74 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
    }
    return;
 8004c42:	e017      	b.n	8004c74 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d012      	beq.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00c      	beq.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fc55 	bl	800550c <UART_EndTransmit_IT>
    return;
 8004c62:	e008      	b.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c64:	bf00      	nop
 8004c66:	e006      	b.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c68:	bf00      	nop
 8004c6a:	e004      	b.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c74:	bf00      	nop
  }

}
 8004c76:	37e8      	adds	r7, #232	; 0xe8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b8a      	ldr	r3, [pc, #552]	; (8004f10 <UART_SetConfig+0x254>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a78      	ldr	r2, [pc, #480]	; (8004f14 <UART_SetConfig+0x258>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d120      	bne.n	8004d7a <UART_SetConfig+0xbe>
 8004d38:	4b77      	ldr	r3, [pc, #476]	; (8004f18 <UART_SetConfig+0x25c>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d817      	bhi.n	8004d74 <UART_SetConfig+0xb8>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x90>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d69 	.word	0x08004d69
 8004d54:	08004d6f 	.word	0x08004d6f
 8004d58:	08004d63 	.word	0x08004d63
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e01d      	b.n	8004d9e <UART_SetConfig+0xe2>
 8004d62:	2302      	movs	r3, #2
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e01a      	b.n	8004d9e <UART_SetConfig+0xe2>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e017      	b.n	8004d9e <UART_SetConfig+0xe2>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e014      	b.n	8004d9e <UART_SetConfig+0xe2>
 8004d74:	2310      	movs	r3, #16
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e011      	b.n	8004d9e <UART_SetConfig+0xe2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a67      	ldr	r2, [pc, #412]	; (8004f1c <UART_SetConfig+0x260>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d102      	bne.n	8004d8a <UART_SetConfig+0xce>
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
 8004d88:	e009      	b.n	8004d9e <UART_SetConfig+0xe2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a64      	ldr	r2, [pc, #400]	; (8004f20 <UART_SetConfig+0x264>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d102      	bne.n	8004d9a <UART_SetConfig+0xde>
 8004d94:	2300      	movs	r3, #0
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e001      	b.n	8004d9e <UART_SetConfig+0xe2>
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da6:	d15a      	bne.n	8004e5e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004da8:	7ffb      	ldrb	r3, [r7, #31]
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d827      	bhi.n	8004dfe <UART_SetConfig+0x142>
 8004dae:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <UART_SetConfig+0xf8>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	08004dff 	.word	0x08004dff
 8004dc4:	08004def 	.word	0x08004def
 8004dc8:	08004dff 	.word	0x08004dff
 8004dcc:	08004dff 	.word	0x08004dff
 8004dd0:	08004dff 	.word	0x08004dff
 8004dd4:	08004df7 	.word	0x08004df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd8:	f7fe fe78 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8004ddc:	61b8      	str	r0, [r7, #24]
        break;
 8004dde:	e013      	b.n	8004e08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de0:	f7fe fe96 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8004de4:	61b8      	str	r0, [r7, #24]
        break;
 8004de6:	e00f      	b.n	8004e08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de8:	4b4e      	ldr	r3, [pc, #312]	; (8004f24 <UART_SetConfig+0x268>)
 8004dea:	61bb      	str	r3, [r7, #24]
        break;
 8004dec:	e00c      	b.n	8004e08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dee:	f7fe fdf7 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8004df2:	61b8      	str	r0, [r7, #24]
        break;
 8004df4:	e008      	b.n	8004e08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfa:	61bb      	str	r3, [r7, #24]
        break;
 8004dfc:	e004      	b.n	8004e08 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	77bb      	strb	r3, [r7, #30]
        break;
 8004e06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d074      	beq.n	8004ef8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	005a      	lsls	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	441a      	add	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d916      	bls.n	8004e58 <UART_SetConfig+0x19c>
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d212      	bcs.n	8004e58 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f023 030f 	bic.w	r3, r3, #15
 8004e3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	89fb      	ldrh	r3, [r7, #14]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	89fa      	ldrh	r2, [r7, #14]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	e04f      	b.n	8004ef8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	77bb      	strb	r3, [r7, #30]
 8004e5c:	e04c      	b.n	8004ef8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e5e:	7ffb      	ldrb	r3, [r7, #31]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d828      	bhi.n	8004eb6 <UART_SetConfig+0x1fa>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0x1b0>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004eb7 	.word	0x08004eb7
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004eb7 	.word	0x08004eb7
 8004e84:	08004eb7 	.word	0x08004eb7
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004eaf 	.word	0x08004eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe fe1c 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8004e94:	61b8      	str	r0, [r7, #24]
        break;
 8004e96:	e013      	b.n	8004ec0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fe fe3a 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	61b8      	str	r0, [r7, #24]
        break;
 8004e9e:	e00f      	b.n	8004ec0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea0:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <UART_SetConfig+0x268>)
 8004ea2:	61bb      	str	r3, [r7, #24]
        break;
 8004ea4:	e00c      	b.n	8004ec0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7fe fd9b 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8004eaa:	61b8      	str	r0, [r7, #24]
        break;
 8004eac:	e008      	b.n	8004ec0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb2:	61bb      	str	r3, [r7, #24]
        break;
 8004eb4:	e004      	b.n	8004ec0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	77bb      	strb	r3, [r7, #30]
        break;
 8004ebe:	bf00      	nop
    }

    if (pclk != 0U)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	085a      	lsrs	r2, r3, #1
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	441a      	add	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b0f      	cmp	r3, #15
 8004ede:	d909      	bls.n	8004ef4 <UART_SetConfig+0x238>
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d205      	bcs.n	8004ef4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	e001      	b.n	8004ef8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f04:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	efff69f3 	.word	0xefff69f3
 8004f14:	40013800 	.word	0x40013800
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40004400 	.word	0x40004400
 8004f20:	40004800 	.word	0x40004800
 8004f24:	007a1200 	.word	0x007a1200

08004f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01a      	beq.n	800503e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005026:	d10a      	bne.n	800503e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b098      	sub	sp, #96	; 0x60
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800507c:	f7fc fff0 	bl	8002060 <HAL_GetTick>
 8005080:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b08      	cmp	r3, #8
 800508e:	d12e      	bne.n	80050ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005098:	2200      	movs	r2, #0
 800509a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f88c 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d021      	beq.n	80050ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050be:	653b      	str	r3, [r7, #80]	; 0x50
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e062      	b.n	80051b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d149      	bne.n	8005190 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005104:	2200      	movs	r2, #0
 8005106:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f856 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03c      	beq.n	8005190 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	623b      	str	r3, [r7, #32]
   return(result);
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800512a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	633b      	str	r3, [r7, #48]	; 0x30
 8005136:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800513a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e6      	bne.n	8005116 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3308      	adds	r3, #8
 800514e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	60fb      	str	r3, [r7, #12]
   return(result);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	617b      	str	r3, [r7, #20]
   return(result);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e011      	b.n	80051b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3758      	adds	r7, #88	; 0x58
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	e049      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d045      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fc ff43 	bl	8002060 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <UART_WaitOnFlagUntilTimeout+0x30>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e048      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d031      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b08      	cmp	r3, #8
 800520a:	d110      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2208      	movs	r2, #8
 8005212:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f8ff 	bl	8005418 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2208      	movs	r2, #8
 800521e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e029      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523c:	d111      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f8e5 	bl	8005418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e00f      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	429a      	cmp	r2, r3
 800527e:	d0a6      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800528c:	b480      	push	{r7}
 800528e:	b097      	sub	sp, #92	; 0x5c
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052be:	d10e      	bne.n	80052de <UART_Start_Receive_IT+0x52>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d105      	bne.n	80052d4 <UART_Start_Receive_IT+0x48>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d2:	e02d      	b.n	8005330 <UART_Start_Receive_IT+0xa4>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	22ff      	movs	r2, #255	; 0xff
 80052d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052dc:	e028      	b.n	8005330 <UART_Start_Receive_IT+0xa4>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10d      	bne.n	8005302 <UART_Start_Receive_IT+0x76>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <UART_Start_Receive_IT+0x6c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052f6:	e01b      	b.n	8005330 <UART_Start_Receive_IT+0xa4>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	227f      	movs	r2, #127	; 0x7f
 80052fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005300:	e016      	b.n	8005330 <UART_Start_Receive_IT+0xa4>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800530a:	d10d      	bne.n	8005328 <UART_Start_Receive_IT+0x9c>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <UART_Start_Receive_IT+0x92>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	227f      	movs	r2, #127	; 0x7f
 8005318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800531c:	e008      	b.n	8005330 <UART_Start_Receive_IT+0xa4>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	223f      	movs	r2, #63	; 0x3f
 8005322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005326:	e003      	b.n	8005330 <UART_Start_Receive_IT+0xa4>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2222      	movs	r2, #34	; 0x22
 800533c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005360:	64ba      	str	r2, [r7, #72]	; 0x48
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d107      	bne.n	800538e <UART_Start_Receive_IT+0x102>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4a21      	ldr	r2, [pc, #132]	; (8005410 <UART_Start_Receive_IT+0x184>)
 800538a:	669a      	str	r2, [r3, #104]	; 0x68
 800538c:	e002      	b.n	8005394 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4a20      	ldr	r2, [pc, #128]	; (8005414 <UART_Start_Receive_IT+0x188>)
 8005392:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d019      	beq.n	80053d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80053b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
 80053bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e6      	bne.n	800539c <UART_Start_Receive_IT+0x110>
 80053ce:	e018      	b.n	8005402 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	613b      	str	r3, [r7, #16]
   return(result);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f043 0320 	orr.w	r3, r3, #32
 80053e4:	653b      	str	r3, [r7, #80]	; 0x50
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e6      	bne.n	80053d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	375c      	adds	r7, #92	; 0x5c
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	08005709 	.word	0x08005709
 8005414:	08005561 	.word	0x08005561

08005418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b095      	sub	sp, #84	; 0x54
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543e:	643b      	str	r3, [r7, #64]	; 0x40
 8005440:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e6      	bne.n	8005420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	61fb      	str	r3, [r7, #28]
   return(result);
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	64bb      	str	r3, [r7, #72]	; 0x48
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3308      	adds	r3, #8
 8005470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e5      	bne.n	8005452 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548a:	2b01      	cmp	r3, #1
 800548c:	d118      	bne.n	80054c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	60bb      	str	r3, [r7, #8]
   return(result);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f023 0310 	bic.w	r3, r3, #16
 80054a2:	647b      	str	r3, [r7, #68]	; 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054d4:	bf00      	nop
 80054d6:	3754      	adds	r7, #84	; 0x54
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fbc6 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	60bb      	str	r3, [r7, #8]
   return(result);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6979      	ldr	r1, [r7, #20]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	613b      	str	r3, [r7, #16]
   return(result);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e6      	bne.n	8005514 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fb92 	bl	8004c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005558:	bf00      	nop
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b09c      	sub	sp, #112	; 0x70
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800556e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005578:	2b22      	cmp	r3, #34	; 0x22
 800557a:	f040 80b9 	bne.w	80056f0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005584:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005588:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800558c:	b2d9      	uxtb	r1, r3
 800558e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005592:	b2da      	uxtb	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	400a      	ands	r2, r1
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f040 809c 	bne.w	8005700 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80055e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e6      	bne.n	80055c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	667b      	str	r3, [r7, #100]	; 0x64
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800561a:	647a      	str	r2, [r7, #68]	; 0x44
 800561c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d018      	beq.n	8005682 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	623b      	str	r3, [r7, #32]
   return(result);
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005664:	663b      	str	r3, [r7, #96]	; 0x60
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566e:	633b      	str	r3, [r7, #48]	; 0x30
 8005670:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e6      	bne.n	8005650 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	2b01      	cmp	r3, #1
 8005688:	d12e      	bne.n	80056e8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	60fb      	str	r3, [r7, #12]
   return(result);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f023 0310 	bic.w	r3, r3, #16
 80056a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	69b9      	ldr	r1, [r7, #24]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	617b      	str	r3, [r7, #20]
   return(result);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e6      	bne.n	8005690 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f003 0310 	and.w	r3, r3, #16
 80056cc:	2b10      	cmp	r3, #16
 80056ce:	d103      	bne.n	80056d8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2210      	movs	r2, #16
 80056d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fadf 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056e6:	e00b      	b.n	8005700 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fc fa3d 	bl	8001b68 <HAL_UART_RxCpltCallback>
}
 80056ee:	e007      	b.n	8005700 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0208 	orr.w	r2, r2, #8
 80056fe:	619a      	str	r2, [r3, #24]
}
 8005700:	bf00      	nop
 8005702:	3770      	adds	r7, #112	; 0x70
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b09c      	sub	sp, #112	; 0x70
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005716:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005720:	2b22      	cmp	r3, #34	; 0x22
 8005722:	f040 80b9 	bne.w	8005898 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800572c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005736:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800573a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800573e:	4013      	ands	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005744:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	1c9a      	adds	r2, r3, #2
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 809c 	bne.w	80058a8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800577e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005784:	667b      	str	r3, [r7, #100]	; 0x64
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578e:	657b      	str	r3, [r7, #84]	; 0x54
 8005790:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800579c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	663b      	str	r3, [r7, #96]	; 0x60
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057c2:	643a      	str	r2, [r7, #64]	; 0x40
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e5      	bne.n	80057a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d018      	beq.n	800582a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	61fb      	str	r3, [r7, #28]
   return(result);
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800580c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005818:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e6      	bne.n	80057f8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582e:	2b01      	cmp	r3, #1
 8005830:	d12e      	bne.n	8005890 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	60bb      	str	r3, [r7, #8]
   return(result);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	65bb      	str	r3, [r7, #88]	; 0x58
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005856:	61bb      	str	r3, [r7, #24]
 8005858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	613b      	str	r3, [r7, #16]
   return(result);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e6      	bne.n	8005838 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d103      	bne.n	8005880 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2210      	movs	r2, #16
 800587e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fa0b 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800588e:	e00b      	b.n	80058a8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7fc f969 	bl	8001b68 <HAL_UART_RxCpltCallback>
}
 8005896:	e007      	b.n	80058a8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	619a      	str	r2, [r3, #24]
}
 80058a8:	bf00      	nop
 80058aa:	3770      	adds	r7, #112	; 0x70
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <exit>:
 80058c4:	b508      	push	{r3, lr}
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <exit+0x1c>)
 80058c8:	4604      	mov	r4, r0
 80058ca:	b113      	cbz	r3, 80058d2 <exit+0xe>
 80058cc:	2100      	movs	r1, #0
 80058ce:	f3af 8000 	nop.w
 80058d2:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <exit+0x20>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	b103      	cbz	r3, 80058da <exit+0x16>
 80058d8:	4798      	blx	r3
 80058da:	4620      	mov	r0, r4
 80058dc:	f7fc fa7c 	bl	8001dd8 <_exit>
 80058e0:	00000000 	.word	0x00000000
 80058e4:	20000550 	.word	0x20000550

080058e8 <malloc>:
 80058e8:	4b02      	ldr	r3, [pc, #8]	; (80058f4 <malloc+0xc>)
 80058ea:	4601      	mov	r1, r0
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	f000 b823 	b.w	8005938 <_malloc_r>
 80058f2:	bf00      	nop
 80058f4:	20000220 	.word	0x20000220

080058f8 <sbrk_aligned>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4e0e      	ldr	r6, [pc, #56]	; (8005934 <sbrk_aligned+0x3c>)
 80058fc:	460c      	mov	r4, r1
 80058fe:	6831      	ldr	r1, [r6, #0]
 8005900:	4605      	mov	r5, r0
 8005902:	b911      	cbnz	r1, 800590a <sbrk_aligned+0x12>
 8005904:	f001 ff62 	bl	80077cc <_sbrk_r>
 8005908:	6030      	str	r0, [r6, #0]
 800590a:	4621      	mov	r1, r4
 800590c:	4628      	mov	r0, r5
 800590e:	f001 ff5d 	bl	80077cc <_sbrk_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d00a      	beq.n	800592c <sbrk_aligned+0x34>
 8005916:	1cc4      	adds	r4, r0, #3
 8005918:	f024 0403 	bic.w	r4, r4, #3
 800591c:	42a0      	cmp	r0, r4
 800591e:	d007      	beq.n	8005930 <sbrk_aligned+0x38>
 8005920:	1a21      	subs	r1, r4, r0
 8005922:	4628      	mov	r0, r5
 8005924:	f001 ff52 	bl	80077cc <_sbrk_r>
 8005928:	3001      	adds	r0, #1
 800592a:	d101      	bne.n	8005930 <sbrk_aligned+0x38>
 800592c:	f04f 34ff 	mov.w	r4, #4294967295
 8005930:	4620      	mov	r0, r4
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	20000414 	.word	0x20000414

08005938 <_malloc_r>:
 8005938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800593c:	1ccd      	adds	r5, r1, #3
 800593e:	f025 0503 	bic.w	r5, r5, #3
 8005942:	3508      	adds	r5, #8
 8005944:	2d0c      	cmp	r5, #12
 8005946:	bf38      	it	cc
 8005948:	250c      	movcc	r5, #12
 800594a:	2d00      	cmp	r5, #0
 800594c:	4607      	mov	r7, r0
 800594e:	db01      	blt.n	8005954 <_malloc_r+0x1c>
 8005950:	42a9      	cmp	r1, r5
 8005952:	d905      	bls.n	8005960 <_malloc_r+0x28>
 8005954:	230c      	movs	r3, #12
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	2600      	movs	r6, #0
 800595a:	4630      	mov	r0, r6
 800595c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a34 <_malloc_r+0xfc>
 8005964:	f000 f868 	bl	8005a38 <__malloc_lock>
 8005968:	f8d8 3000 	ldr.w	r3, [r8]
 800596c:	461c      	mov	r4, r3
 800596e:	bb5c      	cbnz	r4, 80059c8 <_malloc_r+0x90>
 8005970:	4629      	mov	r1, r5
 8005972:	4638      	mov	r0, r7
 8005974:	f7ff ffc0 	bl	80058f8 <sbrk_aligned>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	4604      	mov	r4, r0
 800597c:	d155      	bne.n	8005a2a <_malloc_r+0xf2>
 800597e:	f8d8 4000 	ldr.w	r4, [r8]
 8005982:	4626      	mov	r6, r4
 8005984:	2e00      	cmp	r6, #0
 8005986:	d145      	bne.n	8005a14 <_malloc_r+0xdc>
 8005988:	2c00      	cmp	r4, #0
 800598a:	d048      	beq.n	8005a1e <_malloc_r+0xe6>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	4631      	mov	r1, r6
 8005990:	4638      	mov	r0, r7
 8005992:	eb04 0903 	add.w	r9, r4, r3
 8005996:	f001 ff19 	bl	80077cc <_sbrk_r>
 800599a:	4581      	cmp	r9, r0
 800599c:	d13f      	bne.n	8005a1e <_malloc_r+0xe6>
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	1a6d      	subs	r5, r5, r1
 80059a2:	4629      	mov	r1, r5
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7ff ffa7 	bl	80058f8 <sbrk_aligned>
 80059aa:	3001      	adds	r0, #1
 80059ac:	d037      	beq.n	8005a1e <_malloc_r+0xe6>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	442b      	add	r3, r5
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	f8d8 3000 	ldr.w	r3, [r8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d038      	beq.n	8005a2e <_malloc_r+0xf6>
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	42a2      	cmp	r2, r4
 80059c0:	d12b      	bne.n	8005a1a <_malloc_r+0xe2>
 80059c2:	2200      	movs	r2, #0
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	e00f      	b.n	80059e8 <_malloc_r+0xb0>
 80059c8:	6822      	ldr	r2, [r4, #0]
 80059ca:	1b52      	subs	r2, r2, r5
 80059cc:	d41f      	bmi.n	8005a0e <_malloc_r+0xd6>
 80059ce:	2a0b      	cmp	r2, #11
 80059d0:	d917      	bls.n	8005a02 <_malloc_r+0xca>
 80059d2:	1961      	adds	r1, r4, r5
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	6025      	str	r5, [r4, #0]
 80059d8:	bf18      	it	ne
 80059da:	6059      	strne	r1, [r3, #4]
 80059dc:	6863      	ldr	r3, [r4, #4]
 80059de:	bf08      	it	eq
 80059e0:	f8c8 1000 	streq.w	r1, [r8]
 80059e4:	5162      	str	r2, [r4, r5]
 80059e6:	604b      	str	r3, [r1, #4]
 80059e8:	4638      	mov	r0, r7
 80059ea:	f104 060b 	add.w	r6, r4, #11
 80059ee:	f000 f829 	bl	8005a44 <__malloc_unlock>
 80059f2:	f026 0607 	bic.w	r6, r6, #7
 80059f6:	1d23      	adds	r3, r4, #4
 80059f8:	1af2      	subs	r2, r6, r3
 80059fa:	d0ae      	beq.n	800595a <_malloc_r+0x22>
 80059fc:	1b9b      	subs	r3, r3, r6
 80059fe:	50a3      	str	r3, [r4, r2]
 8005a00:	e7ab      	b.n	800595a <_malloc_r+0x22>
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	6862      	ldr	r2, [r4, #4]
 8005a06:	d1dd      	bne.n	80059c4 <_malloc_r+0x8c>
 8005a08:	f8c8 2000 	str.w	r2, [r8]
 8005a0c:	e7ec      	b.n	80059e8 <_malloc_r+0xb0>
 8005a0e:	4623      	mov	r3, r4
 8005a10:	6864      	ldr	r4, [r4, #4]
 8005a12:	e7ac      	b.n	800596e <_malloc_r+0x36>
 8005a14:	4634      	mov	r4, r6
 8005a16:	6876      	ldr	r6, [r6, #4]
 8005a18:	e7b4      	b.n	8005984 <_malloc_r+0x4c>
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	e7cc      	b.n	80059b8 <_malloc_r+0x80>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4638      	mov	r0, r7
 8005a24:	f000 f80e 	bl	8005a44 <__malloc_unlock>
 8005a28:	e797      	b.n	800595a <_malloc_r+0x22>
 8005a2a:	6025      	str	r5, [r4, #0]
 8005a2c:	e7dc      	b.n	80059e8 <_malloc_r+0xb0>
 8005a2e:	605b      	str	r3, [r3, #4]
 8005a30:	deff      	udf	#255	; 0xff
 8005a32:	bf00      	nop
 8005a34:	20000410 	.word	0x20000410

08005a38 <__malloc_lock>:
 8005a38:	4801      	ldr	r0, [pc, #4]	; (8005a40 <__malloc_lock+0x8>)
 8005a3a:	f001 bf14 	b.w	8007866 <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20000558 	.word	0x20000558

08005a44 <__malloc_unlock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__malloc_unlock+0x8>)
 8005a46:	f001 bf0f 	b.w	8007868 <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20000558 	.word	0x20000558

08005a50 <sulp>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4604      	mov	r4, r0
 8005a54:	460d      	mov	r5, r1
 8005a56:	ec45 4b10 	vmov	d0, r4, r5
 8005a5a:	4616      	mov	r6, r2
 8005a5c:	f003 fcc0 	bl	80093e0 <__ulp>
 8005a60:	ec51 0b10 	vmov	r0, r1, d0
 8005a64:	b17e      	cbz	r6, 8005a86 <sulp+0x36>
 8005a66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005a6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dd09      	ble.n	8005a86 <sulp+0x36>
 8005a72:	051b      	lsls	r3, r3, #20
 8005a74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a78:	2400      	movs	r4, #0
 8005a7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a7e:	4622      	mov	r2, r4
 8005a80:	462b      	mov	r3, r5
 8005a82:	f7fa fdb9 	bl	80005f8 <__aeabi_dmul>
 8005a86:	bd70      	pop	{r4, r5, r6, pc}

08005a88 <_strtod_l>:
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	ed2d 8b02 	vpush	{d8}
 8005a90:	b09b      	sub	sp, #108	; 0x6c
 8005a92:	4604      	mov	r4, r0
 8005a94:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a96:	2200      	movs	r2, #0
 8005a98:	9216      	str	r2, [sp, #88]	; 0x58
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	f04f 0800 	mov.w	r8, #0
 8005aa0:	f04f 0900 	mov.w	r9, #0
 8005aa4:	460a      	mov	r2, r1
 8005aa6:	9215      	str	r2, [sp, #84]	; 0x54
 8005aa8:	7811      	ldrb	r1, [r2, #0]
 8005aaa:	292b      	cmp	r1, #43	; 0x2b
 8005aac:	d04c      	beq.n	8005b48 <_strtod_l+0xc0>
 8005aae:	d83a      	bhi.n	8005b26 <_strtod_l+0x9e>
 8005ab0:	290d      	cmp	r1, #13
 8005ab2:	d834      	bhi.n	8005b1e <_strtod_l+0x96>
 8005ab4:	2908      	cmp	r1, #8
 8005ab6:	d834      	bhi.n	8005b22 <_strtod_l+0x9a>
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d03d      	beq.n	8005b38 <_strtod_l+0xb0>
 8005abc:	2200      	movs	r2, #0
 8005abe:	920a      	str	r2, [sp, #40]	; 0x28
 8005ac0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005ac2:	7832      	ldrb	r2, [r6, #0]
 8005ac4:	2a30      	cmp	r2, #48	; 0x30
 8005ac6:	f040 80b4 	bne.w	8005c32 <_strtod_l+0x1aa>
 8005aca:	7872      	ldrb	r2, [r6, #1]
 8005acc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005ad0:	2a58      	cmp	r2, #88	; 0x58
 8005ad2:	d170      	bne.n	8005bb6 <_strtod_l+0x12e>
 8005ad4:	9302      	str	r3, [sp, #8]
 8005ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	ab16      	add	r3, sp, #88	; 0x58
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	4a8e      	ldr	r2, [pc, #568]	; (8005d18 <_strtod_l+0x290>)
 8005ae0:	ab17      	add	r3, sp, #92	; 0x5c
 8005ae2:	a915      	add	r1, sp, #84	; 0x54
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f002 fe0d 	bl	8008704 <__gethex>
 8005aea:	f010 070f 	ands.w	r7, r0, #15
 8005aee:	4605      	mov	r5, r0
 8005af0:	d005      	beq.n	8005afe <_strtod_l+0x76>
 8005af2:	2f06      	cmp	r7, #6
 8005af4:	d12a      	bne.n	8005b4c <_strtod_l+0xc4>
 8005af6:	3601      	adds	r6, #1
 8005af8:	2300      	movs	r3, #0
 8005afa:	9615      	str	r6, [sp, #84]	; 0x54
 8005afc:	930a      	str	r3, [sp, #40]	; 0x28
 8005afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 857f 	bne.w	8006604 <_strtod_l+0xb7c>
 8005b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b08:	b1db      	cbz	r3, 8005b42 <_strtod_l+0xba>
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b10:	ec43 2b10 	vmov	d0, r2, r3
 8005b14:	b01b      	add	sp, #108	; 0x6c
 8005b16:	ecbd 8b02 	vpop	{d8}
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	2920      	cmp	r1, #32
 8005b20:	d1cc      	bne.n	8005abc <_strtod_l+0x34>
 8005b22:	3201      	adds	r2, #1
 8005b24:	e7bf      	b.n	8005aa6 <_strtod_l+0x1e>
 8005b26:	292d      	cmp	r1, #45	; 0x2d
 8005b28:	d1c8      	bne.n	8005abc <_strtod_l+0x34>
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	910a      	str	r1, [sp, #40]	; 0x28
 8005b2e:	1c51      	adds	r1, r2, #1
 8005b30:	9115      	str	r1, [sp, #84]	; 0x54
 8005b32:	7852      	ldrb	r2, [r2, #1]
 8005b34:	2a00      	cmp	r2, #0
 8005b36:	d1c3      	bne.n	8005ac0 <_strtod_l+0x38>
 8005b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b3a:	9515      	str	r5, [sp, #84]	; 0x54
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 855f 	bne.w	8006600 <_strtod_l+0xb78>
 8005b42:	4642      	mov	r2, r8
 8005b44:	464b      	mov	r3, r9
 8005b46:	e7e3      	b.n	8005b10 <_strtod_l+0x88>
 8005b48:	2100      	movs	r1, #0
 8005b4a:	e7ef      	b.n	8005b2c <_strtod_l+0xa4>
 8005b4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b4e:	b13a      	cbz	r2, 8005b60 <_strtod_l+0xd8>
 8005b50:	2135      	movs	r1, #53	; 0x35
 8005b52:	a818      	add	r0, sp, #96	; 0x60
 8005b54:	f003 fd41 	bl	80095da <__copybits>
 8005b58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f003 f914 	bl	8008d88 <_Bfree>
 8005b60:	3f01      	subs	r7, #1
 8005b62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b64:	2f04      	cmp	r7, #4
 8005b66:	d806      	bhi.n	8005b76 <_strtod_l+0xee>
 8005b68:	e8df f007 	tbb	[pc, r7]
 8005b6c:	201d0314 	.word	0x201d0314
 8005b70:	14          	.byte	0x14
 8005b71:	00          	.byte	0x00
 8005b72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8005b76:	05e9      	lsls	r1, r5, #23
 8005b78:	bf48      	it	mi
 8005b7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005b7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b82:	0d1b      	lsrs	r3, r3, #20
 8005b84:	051b      	lsls	r3, r3, #20
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1b9      	bne.n	8005afe <_strtod_l+0x76>
 8005b8a:	f001 fe41 	bl	8007810 <__errno>
 8005b8e:	2322      	movs	r3, #34	; 0x22
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	e7b4      	b.n	8005afe <_strtod_l+0x76>
 8005b94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005b98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ba0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005ba4:	e7e7      	b.n	8005b76 <_strtod_l+0xee>
 8005ba6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005d20 <_strtod_l+0x298>
 8005baa:	e7e4      	b.n	8005b76 <_strtod_l+0xee>
 8005bac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005bb0:	f04f 38ff 	mov.w	r8, #4294967295
 8005bb4:	e7df      	b.n	8005b76 <_strtod_l+0xee>
 8005bb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	9215      	str	r2, [sp, #84]	; 0x54
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	2b30      	cmp	r3, #48	; 0x30
 8005bc0:	d0f9      	beq.n	8005bb6 <_strtod_l+0x12e>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d09b      	beq.n	8005afe <_strtod_l+0x76>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f04f 0a00 	mov.w	sl, #0
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005bd6:	46d3      	mov	fp, sl
 8005bd8:	220a      	movs	r2, #10
 8005bda:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005bdc:	7806      	ldrb	r6, [r0, #0]
 8005bde:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005be2:	b2d9      	uxtb	r1, r3
 8005be4:	2909      	cmp	r1, #9
 8005be6:	d926      	bls.n	8005c36 <_strtod_l+0x1ae>
 8005be8:	494c      	ldr	r1, [pc, #304]	; (8005d1c <_strtod_l+0x294>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	f001 fd90 	bl	8007710 <strncmp>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d030      	beq.n	8005c56 <_strtod_l+0x1ce>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	4632      	mov	r2, r6
 8005bf8:	9005      	str	r0, [sp, #20]
 8005bfa:	465e      	mov	r6, fp
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2a65      	cmp	r2, #101	; 0x65
 8005c00:	d001      	beq.n	8005c06 <_strtod_l+0x17e>
 8005c02:	2a45      	cmp	r2, #69	; 0x45
 8005c04:	d113      	bne.n	8005c2e <_strtod_l+0x1a6>
 8005c06:	b91e      	cbnz	r6, 8005c10 <_strtod_l+0x188>
 8005c08:	9a04      	ldr	r2, [sp, #16]
 8005c0a:	4302      	orrs	r2, r0
 8005c0c:	d094      	beq.n	8005b38 <_strtod_l+0xb0>
 8005c0e:	2600      	movs	r6, #0
 8005c10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005c12:	1c6a      	adds	r2, r5, #1
 8005c14:	9215      	str	r2, [sp, #84]	; 0x54
 8005c16:	786a      	ldrb	r2, [r5, #1]
 8005c18:	2a2b      	cmp	r2, #43	; 0x2b
 8005c1a:	d074      	beq.n	8005d06 <_strtod_l+0x27e>
 8005c1c:	2a2d      	cmp	r2, #45	; 0x2d
 8005c1e:	d078      	beq.n	8005d12 <_strtod_l+0x28a>
 8005c20:	f04f 0c00 	mov.w	ip, #0
 8005c24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005c28:	2909      	cmp	r1, #9
 8005c2a:	d97f      	bls.n	8005d2c <_strtod_l+0x2a4>
 8005c2c:	9515      	str	r5, [sp, #84]	; 0x54
 8005c2e:	2700      	movs	r7, #0
 8005c30:	e09e      	b.n	8005d70 <_strtod_l+0x2e8>
 8005c32:	2300      	movs	r3, #0
 8005c34:	e7c8      	b.n	8005bc8 <_strtod_l+0x140>
 8005c36:	f1bb 0f08 	cmp.w	fp, #8
 8005c3a:	bfd8      	it	le
 8005c3c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005c3e:	f100 0001 	add.w	r0, r0, #1
 8005c42:	bfda      	itte	le
 8005c44:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c48:	9309      	strle	r3, [sp, #36]	; 0x24
 8005c4a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005c4e:	f10b 0b01 	add.w	fp, fp, #1
 8005c52:	9015      	str	r0, [sp, #84]	; 0x54
 8005c54:	e7c1      	b.n	8005bda <_strtod_l+0x152>
 8005c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	9215      	str	r2, [sp, #84]	; 0x54
 8005c5c:	785a      	ldrb	r2, [r3, #1]
 8005c5e:	f1bb 0f00 	cmp.w	fp, #0
 8005c62:	d037      	beq.n	8005cd4 <_strtod_l+0x24c>
 8005c64:	9005      	str	r0, [sp, #20]
 8005c66:	465e      	mov	r6, fp
 8005c68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c6c:	2b09      	cmp	r3, #9
 8005c6e:	d912      	bls.n	8005c96 <_strtod_l+0x20e>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e7c4      	b.n	8005bfe <_strtod_l+0x176>
 8005c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	9215      	str	r2, [sp, #84]	; 0x54
 8005c7a:	785a      	ldrb	r2, [r3, #1]
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	2a30      	cmp	r2, #48	; 0x30
 8005c80:	d0f8      	beq.n	8005c74 <_strtod_l+0x1ec>
 8005c82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	f200 84c1 	bhi.w	800660e <_strtod_l+0xb86>
 8005c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c8e:	9005      	str	r0, [sp, #20]
 8005c90:	2000      	movs	r0, #0
 8005c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c94:	4606      	mov	r6, r0
 8005c96:	3a30      	subs	r2, #48	; 0x30
 8005c98:	f100 0301 	add.w	r3, r0, #1
 8005c9c:	d014      	beq.n	8005cc8 <_strtod_l+0x240>
 8005c9e:	9905      	ldr	r1, [sp, #20]
 8005ca0:	4419      	add	r1, r3
 8005ca2:	9105      	str	r1, [sp, #20]
 8005ca4:	4633      	mov	r3, r6
 8005ca6:	eb00 0c06 	add.w	ip, r0, r6
 8005caa:	210a      	movs	r1, #10
 8005cac:	4563      	cmp	r3, ip
 8005cae:	d113      	bne.n	8005cd8 <_strtod_l+0x250>
 8005cb0:	1833      	adds	r3, r6, r0
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	f106 0601 	add.w	r6, r6, #1
 8005cb8:	4406      	add	r6, r0
 8005cba:	dc1a      	bgt.n	8005cf2 <_strtod_l+0x26a>
 8005cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	fb03 2301 	mla	r3, r3, r1, r2
 8005cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cca:	1c51      	adds	r1, r2, #1
 8005ccc:	9115      	str	r1, [sp, #84]	; 0x54
 8005cce:	7852      	ldrb	r2, [r2, #1]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	e7c9      	b.n	8005c68 <_strtod_l+0x1e0>
 8005cd4:	4658      	mov	r0, fp
 8005cd6:	e7d2      	b.n	8005c7e <_strtod_l+0x1f6>
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	f103 0301 	add.w	r3, r3, #1
 8005cde:	dc03      	bgt.n	8005ce8 <_strtod_l+0x260>
 8005ce0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ce2:	434f      	muls	r7, r1
 8005ce4:	9709      	str	r7, [sp, #36]	; 0x24
 8005ce6:	e7e1      	b.n	8005cac <_strtod_l+0x224>
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	bfd8      	it	le
 8005cec:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005cf0:	e7dc      	b.n	8005cac <_strtod_l+0x224>
 8005cf2:	2e10      	cmp	r6, #16
 8005cf4:	bfdc      	itt	le
 8005cf6:	230a      	movle	r3, #10
 8005cf8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005cfc:	e7e3      	b.n	8005cc6 <_strtod_l+0x23e>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9305      	str	r3, [sp, #20]
 8005d02:	2301      	movs	r3, #1
 8005d04:	e780      	b.n	8005c08 <_strtod_l+0x180>
 8005d06:	f04f 0c00 	mov.w	ip, #0
 8005d0a:	1caa      	adds	r2, r5, #2
 8005d0c:	9215      	str	r2, [sp, #84]	; 0x54
 8005d0e:	78aa      	ldrb	r2, [r5, #2]
 8005d10:	e788      	b.n	8005c24 <_strtod_l+0x19c>
 8005d12:	f04f 0c01 	mov.w	ip, #1
 8005d16:	e7f8      	b.n	8005d0a <_strtod_l+0x282>
 8005d18:	0800ab5c 	.word	0x0800ab5c
 8005d1c:	0800ab58 	.word	0x0800ab58
 8005d20:	7ff00000 	.word	0x7ff00000
 8005d24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d26:	1c51      	adds	r1, r2, #1
 8005d28:	9115      	str	r1, [sp, #84]	; 0x54
 8005d2a:	7852      	ldrb	r2, [r2, #1]
 8005d2c:	2a30      	cmp	r2, #48	; 0x30
 8005d2e:	d0f9      	beq.n	8005d24 <_strtod_l+0x29c>
 8005d30:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005d34:	2908      	cmp	r1, #8
 8005d36:	f63f af7a 	bhi.w	8005c2e <_strtod_l+0x1a6>
 8005d3a:	3a30      	subs	r2, #48	; 0x30
 8005d3c:	9208      	str	r2, [sp, #32]
 8005d3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d40:	920c      	str	r2, [sp, #48]	; 0x30
 8005d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d44:	1c57      	adds	r7, r2, #1
 8005d46:	9715      	str	r7, [sp, #84]	; 0x54
 8005d48:	7852      	ldrb	r2, [r2, #1]
 8005d4a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005d4e:	f1be 0f09 	cmp.w	lr, #9
 8005d52:	d938      	bls.n	8005dc6 <_strtod_l+0x33e>
 8005d54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d56:	1a7f      	subs	r7, r7, r1
 8005d58:	2f08      	cmp	r7, #8
 8005d5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005d5e:	dc03      	bgt.n	8005d68 <_strtod_l+0x2e0>
 8005d60:	9908      	ldr	r1, [sp, #32]
 8005d62:	428f      	cmp	r7, r1
 8005d64:	bfa8      	it	ge
 8005d66:	460f      	movge	r7, r1
 8005d68:	f1bc 0f00 	cmp.w	ip, #0
 8005d6c:	d000      	beq.n	8005d70 <_strtod_l+0x2e8>
 8005d6e:	427f      	negs	r7, r7
 8005d70:	2e00      	cmp	r6, #0
 8005d72:	d14f      	bne.n	8005e14 <_strtod_l+0x38c>
 8005d74:	9904      	ldr	r1, [sp, #16]
 8005d76:	4301      	orrs	r1, r0
 8005d78:	f47f aec1 	bne.w	8005afe <_strtod_l+0x76>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f47f aedb 	bne.w	8005b38 <_strtod_l+0xb0>
 8005d82:	2a69      	cmp	r2, #105	; 0x69
 8005d84:	d029      	beq.n	8005dda <_strtod_l+0x352>
 8005d86:	dc26      	bgt.n	8005dd6 <_strtod_l+0x34e>
 8005d88:	2a49      	cmp	r2, #73	; 0x49
 8005d8a:	d026      	beq.n	8005dda <_strtod_l+0x352>
 8005d8c:	2a4e      	cmp	r2, #78	; 0x4e
 8005d8e:	f47f aed3 	bne.w	8005b38 <_strtod_l+0xb0>
 8005d92:	499b      	ldr	r1, [pc, #620]	; (8006000 <_strtod_l+0x578>)
 8005d94:	a815      	add	r0, sp, #84	; 0x54
 8005d96:	f002 fef5 	bl	8008b84 <__match>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	f43f aecc 	beq.w	8005b38 <_strtod_l+0xb0>
 8005da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b28      	cmp	r3, #40	; 0x28
 8005da6:	d12f      	bne.n	8005e08 <_strtod_l+0x380>
 8005da8:	4996      	ldr	r1, [pc, #600]	; (8006004 <_strtod_l+0x57c>)
 8005daa:	aa18      	add	r2, sp, #96	; 0x60
 8005dac:	a815      	add	r0, sp, #84	; 0x54
 8005dae:	f002 fefd 	bl	8008bac <__hexnan>
 8005db2:	2805      	cmp	r0, #5
 8005db4:	d128      	bne.n	8005e08 <_strtod_l+0x380>
 8005db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005db8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005dbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005dc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005dc4:	e69b      	b.n	8005afe <_strtod_l+0x76>
 8005dc6:	9f08      	ldr	r7, [sp, #32]
 8005dc8:	210a      	movs	r1, #10
 8005dca:	fb01 2107 	mla	r1, r1, r7, r2
 8005dce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005dd2:	9208      	str	r2, [sp, #32]
 8005dd4:	e7b5      	b.n	8005d42 <_strtod_l+0x2ba>
 8005dd6:	2a6e      	cmp	r2, #110	; 0x6e
 8005dd8:	e7d9      	b.n	8005d8e <_strtod_l+0x306>
 8005dda:	498b      	ldr	r1, [pc, #556]	; (8006008 <_strtod_l+0x580>)
 8005ddc:	a815      	add	r0, sp, #84	; 0x54
 8005dde:	f002 fed1 	bl	8008b84 <__match>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f43f aea8 	beq.w	8005b38 <_strtod_l+0xb0>
 8005de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dea:	4988      	ldr	r1, [pc, #544]	; (800600c <_strtod_l+0x584>)
 8005dec:	3b01      	subs	r3, #1
 8005dee:	a815      	add	r0, sp, #84	; 0x54
 8005df0:	9315      	str	r3, [sp, #84]	; 0x54
 8005df2:	f002 fec7 	bl	8008b84 <__match>
 8005df6:	b910      	cbnz	r0, 8005dfe <_strtod_l+0x376>
 8005df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	9315      	str	r3, [sp, #84]	; 0x54
 8005dfe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800601c <_strtod_l+0x594>
 8005e02:	f04f 0800 	mov.w	r8, #0
 8005e06:	e67a      	b.n	8005afe <_strtod_l+0x76>
 8005e08:	4881      	ldr	r0, [pc, #516]	; (8006010 <_strtod_l+0x588>)
 8005e0a:	f001 fd3d 	bl	8007888 <nan>
 8005e0e:	ec59 8b10 	vmov	r8, r9, d0
 8005e12:	e674      	b.n	8005afe <_strtod_l+0x76>
 8005e14:	9b05      	ldr	r3, [sp, #20]
 8005e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e18:	1afb      	subs	r3, r7, r3
 8005e1a:	f1bb 0f00 	cmp.w	fp, #0
 8005e1e:	bf08      	it	eq
 8005e20:	46b3      	moveq	fp, r6
 8005e22:	2e10      	cmp	r6, #16
 8005e24:	9308      	str	r3, [sp, #32]
 8005e26:	4635      	mov	r5, r6
 8005e28:	bfa8      	it	ge
 8005e2a:	2510      	movge	r5, #16
 8005e2c:	f7fa fb6a 	bl	8000504 <__aeabi_ui2d>
 8005e30:	2e09      	cmp	r6, #9
 8005e32:	4680      	mov	r8, r0
 8005e34:	4689      	mov	r9, r1
 8005e36:	dd13      	ble.n	8005e60 <_strtod_l+0x3d8>
 8005e38:	4b76      	ldr	r3, [pc, #472]	; (8006014 <_strtod_l+0x58c>)
 8005e3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005e3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e42:	f7fa fbd9 	bl	80005f8 <__aeabi_dmul>
 8005e46:	4680      	mov	r8, r0
 8005e48:	4650      	mov	r0, sl
 8005e4a:	4689      	mov	r9, r1
 8005e4c:	f7fa fb5a 	bl	8000504 <__aeabi_ui2d>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4640      	mov	r0, r8
 8005e56:	4649      	mov	r1, r9
 8005e58:	f7fa fa18 	bl	800028c <__adddf3>
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4689      	mov	r9, r1
 8005e60:	2e0f      	cmp	r6, #15
 8005e62:	dc38      	bgt.n	8005ed6 <_strtod_l+0x44e>
 8005e64:	9b08      	ldr	r3, [sp, #32]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f43f ae49 	beq.w	8005afe <_strtod_l+0x76>
 8005e6c:	dd24      	ble.n	8005eb8 <_strtod_l+0x430>
 8005e6e:	2b16      	cmp	r3, #22
 8005e70:	dc0b      	bgt.n	8005e8a <_strtod_l+0x402>
 8005e72:	4968      	ldr	r1, [pc, #416]	; (8006014 <_strtod_l+0x58c>)
 8005e74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	f7fa fbba 	bl	80005f8 <__aeabi_dmul>
 8005e84:	4680      	mov	r8, r0
 8005e86:	4689      	mov	r9, r1
 8005e88:	e639      	b.n	8005afe <_strtod_l+0x76>
 8005e8a:	9a08      	ldr	r2, [sp, #32]
 8005e8c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005e90:	4293      	cmp	r3, r2
 8005e92:	db20      	blt.n	8005ed6 <_strtod_l+0x44e>
 8005e94:	4c5f      	ldr	r4, [pc, #380]	; (8006014 <_strtod_l+0x58c>)
 8005e96:	f1c6 060f 	rsb	r6, r6, #15
 8005e9a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea6:	f7fa fba7 	bl	80005f8 <__aeabi_dmul>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	1b9e      	subs	r6, r3, r6
 8005eae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005eb6:	e7e3      	b.n	8005e80 <_strtod_l+0x3f8>
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	3316      	adds	r3, #22
 8005ebc:	db0b      	blt.n	8005ed6 <_strtod_l+0x44e>
 8005ebe:	9b05      	ldr	r3, [sp, #20]
 8005ec0:	1bdf      	subs	r7, r3, r7
 8005ec2:	4b54      	ldr	r3, [pc, #336]	; (8006014 <_strtod_l+0x58c>)
 8005ec4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ecc:	4640      	mov	r0, r8
 8005ece:	4649      	mov	r1, r9
 8005ed0:	f7fa fcbc 	bl	800084c <__aeabi_ddiv>
 8005ed4:	e7d6      	b.n	8005e84 <_strtod_l+0x3fc>
 8005ed6:	9b08      	ldr	r3, [sp, #32]
 8005ed8:	1b75      	subs	r5, r6, r5
 8005eda:	441d      	add	r5, r3
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	dd70      	ble.n	8005fc2 <_strtod_l+0x53a>
 8005ee0:	f015 030f 	ands.w	r3, r5, #15
 8005ee4:	d00a      	beq.n	8005efc <_strtod_l+0x474>
 8005ee6:	494b      	ldr	r1, [pc, #300]	; (8006014 <_strtod_l+0x58c>)
 8005ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef4:	f7fa fb80 	bl	80005f8 <__aeabi_dmul>
 8005ef8:	4680      	mov	r8, r0
 8005efa:	4689      	mov	r9, r1
 8005efc:	f035 050f 	bics.w	r5, r5, #15
 8005f00:	d04d      	beq.n	8005f9e <_strtod_l+0x516>
 8005f02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005f06:	dd22      	ble.n	8005f4e <_strtod_l+0x4c6>
 8005f08:	2500      	movs	r5, #0
 8005f0a:	46ab      	mov	fp, r5
 8005f0c:	9509      	str	r5, [sp, #36]	; 0x24
 8005f0e:	9505      	str	r5, [sp, #20]
 8005f10:	2322      	movs	r3, #34	; 0x22
 8005f12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800601c <_strtod_l+0x594>
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	f04f 0800 	mov.w	r8, #0
 8005f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f43f aded 	beq.w	8005afe <_strtod_l+0x76>
 8005f24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005f26:	4620      	mov	r0, r4
 8005f28:	f002 ff2e 	bl	8008d88 <_Bfree>
 8005f2c:	9905      	ldr	r1, [sp, #20]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f002 ff2a 	bl	8008d88 <_Bfree>
 8005f34:	4659      	mov	r1, fp
 8005f36:	4620      	mov	r0, r4
 8005f38:	f002 ff26 	bl	8008d88 <_Bfree>
 8005f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f002 ff22 	bl	8008d88 <_Bfree>
 8005f44:	4629      	mov	r1, r5
 8005f46:	4620      	mov	r0, r4
 8005f48:	f002 ff1e 	bl	8008d88 <_Bfree>
 8005f4c:	e5d7      	b.n	8005afe <_strtod_l+0x76>
 8005f4e:	4b32      	ldr	r3, [pc, #200]	; (8006018 <_strtod_l+0x590>)
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	2300      	movs	r3, #0
 8005f54:	112d      	asrs	r5, r5, #4
 8005f56:	4640      	mov	r0, r8
 8005f58:	4649      	mov	r1, r9
 8005f5a:	469a      	mov	sl, r3
 8005f5c:	2d01      	cmp	r5, #1
 8005f5e:	dc21      	bgt.n	8005fa4 <_strtod_l+0x51c>
 8005f60:	b10b      	cbz	r3, 8005f66 <_strtod_l+0x4de>
 8005f62:	4680      	mov	r8, r0
 8005f64:	4689      	mov	r9, r1
 8005f66:	492c      	ldr	r1, [pc, #176]	; (8006018 <_strtod_l+0x590>)
 8005f68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005f6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f78:	f7fa fb3e 	bl	80005f8 <__aeabi_dmul>
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <_strtod_l+0x594>)
 8005f7e:	460a      	mov	r2, r1
 8005f80:	400b      	ands	r3, r1
 8005f82:	4927      	ldr	r1, [pc, #156]	; (8006020 <_strtod_l+0x598>)
 8005f84:	428b      	cmp	r3, r1
 8005f86:	4680      	mov	r8, r0
 8005f88:	d8be      	bhi.n	8005f08 <_strtod_l+0x480>
 8005f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f8e:	428b      	cmp	r3, r1
 8005f90:	bf86      	itte	hi
 8005f92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006024 <_strtod_l+0x59c>
 8005f96:	f04f 38ff 	movhi.w	r8, #4294967295
 8005f9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	e07b      	b.n	800609c <_strtod_l+0x614>
 8005fa4:	07ea      	lsls	r2, r5, #31
 8005fa6:	d505      	bpl.n	8005fb4 <_strtod_l+0x52c>
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f7fa fb23 	bl	80005f8 <__aeabi_dmul>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	9a04      	ldr	r2, [sp, #16]
 8005fb6:	3208      	adds	r2, #8
 8005fb8:	f10a 0a01 	add.w	sl, sl, #1
 8005fbc:	106d      	asrs	r5, r5, #1
 8005fbe:	9204      	str	r2, [sp, #16]
 8005fc0:	e7cc      	b.n	8005f5c <_strtod_l+0x4d4>
 8005fc2:	d0ec      	beq.n	8005f9e <_strtod_l+0x516>
 8005fc4:	426d      	negs	r5, r5
 8005fc6:	f015 020f 	ands.w	r2, r5, #15
 8005fca:	d00a      	beq.n	8005fe2 <_strtod_l+0x55a>
 8005fcc:	4b11      	ldr	r3, [pc, #68]	; (8006014 <_strtod_l+0x58c>)
 8005fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa fc37 	bl	800084c <__aeabi_ddiv>
 8005fde:	4680      	mov	r8, r0
 8005fe0:	4689      	mov	r9, r1
 8005fe2:	112d      	asrs	r5, r5, #4
 8005fe4:	d0db      	beq.n	8005f9e <_strtod_l+0x516>
 8005fe6:	2d1f      	cmp	r5, #31
 8005fe8:	dd1e      	ble.n	8006028 <_strtod_l+0x5a0>
 8005fea:	2500      	movs	r5, #0
 8005fec:	46ab      	mov	fp, r5
 8005fee:	9509      	str	r5, [sp, #36]	; 0x24
 8005ff0:	9505      	str	r5, [sp, #20]
 8005ff2:	2322      	movs	r3, #34	; 0x22
 8005ff4:	f04f 0800 	mov.w	r8, #0
 8005ff8:	f04f 0900 	mov.w	r9, #0
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	e78d      	b.n	8005f1c <_strtod_l+0x494>
 8006000:	0800abbd 	.word	0x0800abbd
 8006004:	0800ab70 	.word	0x0800ab70
 8006008:	0800abb5 	.word	0x0800abb5
 800600c:	0800abf2 	.word	0x0800abf2
 8006010:	0800af9c 	.word	0x0800af9c
 8006014:	0800ad60 	.word	0x0800ad60
 8006018:	0800ad38 	.word	0x0800ad38
 800601c:	7ff00000 	.word	0x7ff00000
 8006020:	7ca00000 	.word	0x7ca00000
 8006024:	7fefffff 	.word	0x7fefffff
 8006028:	f015 0310 	ands.w	r3, r5, #16
 800602c:	bf18      	it	ne
 800602e:	236a      	movne	r3, #106	; 0x6a
 8006030:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80063d4 <_strtod_l+0x94c>
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	4640      	mov	r0, r8
 8006038:	4649      	mov	r1, r9
 800603a:	2300      	movs	r3, #0
 800603c:	07ea      	lsls	r2, r5, #31
 800603e:	d504      	bpl.n	800604a <_strtod_l+0x5c2>
 8006040:	e9da 2300 	ldrd	r2, r3, [sl]
 8006044:	f7fa fad8 	bl	80005f8 <__aeabi_dmul>
 8006048:	2301      	movs	r3, #1
 800604a:	106d      	asrs	r5, r5, #1
 800604c:	f10a 0a08 	add.w	sl, sl, #8
 8006050:	d1f4      	bne.n	800603c <_strtod_l+0x5b4>
 8006052:	b10b      	cbz	r3, 8006058 <_strtod_l+0x5d0>
 8006054:	4680      	mov	r8, r0
 8006056:	4689      	mov	r9, r1
 8006058:	9b04      	ldr	r3, [sp, #16]
 800605a:	b1bb      	cbz	r3, 800608c <_strtod_l+0x604>
 800605c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006060:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006064:	2b00      	cmp	r3, #0
 8006066:	4649      	mov	r1, r9
 8006068:	dd10      	ble.n	800608c <_strtod_l+0x604>
 800606a:	2b1f      	cmp	r3, #31
 800606c:	f340 811e 	ble.w	80062ac <_strtod_l+0x824>
 8006070:	2b34      	cmp	r3, #52	; 0x34
 8006072:	bfde      	ittt	le
 8006074:	f04f 33ff 	movle.w	r3, #4294967295
 8006078:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800607c:	4093      	lslle	r3, r2
 800607e:	f04f 0800 	mov.w	r8, #0
 8006082:	bfcc      	ite	gt
 8006084:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006088:	ea03 0901 	andle.w	r9, r3, r1
 800608c:	2200      	movs	r2, #0
 800608e:	2300      	movs	r3, #0
 8006090:	4640      	mov	r0, r8
 8006092:	4649      	mov	r1, r9
 8006094:	f7fa fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006098:	2800      	cmp	r0, #0
 800609a:	d1a6      	bne.n	8005fea <_strtod_l+0x562>
 800609c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060a2:	4633      	mov	r3, r6
 80060a4:	465a      	mov	r2, fp
 80060a6:	4620      	mov	r0, r4
 80060a8:	f002 fed6 	bl	8008e58 <__s2b>
 80060ac:	9009      	str	r0, [sp, #36]	; 0x24
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f af2a 	beq.w	8005f08 <_strtod_l+0x480>
 80060b4:	9a08      	ldr	r2, [sp, #32]
 80060b6:	9b05      	ldr	r3, [sp, #20]
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	eba3 0307 	sub.w	r3, r3, r7
 80060be:	bfa8      	it	ge
 80060c0:	2300      	movge	r3, #0
 80060c2:	930c      	str	r3, [sp, #48]	; 0x30
 80060c4:	2500      	movs	r5, #0
 80060c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80060ca:	9312      	str	r3, [sp, #72]	; 0x48
 80060cc:	46ab      	mov	fp, r5
 80060ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d0:	4620      	mov	r0, r4
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	f002 fe18 	bl	8008d08 <_Balloc>
 80060d8:	9005      	str	r0, [sp, #20]
 80060da:	2800      	cmp	r0, #0
 80060dc:	f43f af18 	beq.w	8005f10 <_strtod_l+0x488>
 80060e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	3202      	adds	r2, #2
 80060e6:	f103 010c 	add.w	r1, r3, #12
 80060ea:	0092      	lsls	r2, r2, #2
 80060ec:	300c      	adds	r0, #12
 80060ee:	f001 fbbc 	bl	800786a <memcpy>
 80060f2:	ec49 8b10 	vmov	d0, r8, r9
 80060f6:	aa18      	add	r2, sp, #96	; 0x60
 80060f8:	a917      	add	r1, sp, #92	; 0x5c
 80060fa:	4620      	mov	r0, r4
 80060fc:	f003 f9e0 	bl	80094c0 <__d2b>
 8006100:	ec49 8b18 	vmov	d8, r8, r9
 8006104:	9016      	str	r0, [sp, #88]	; 0x58
 8006106:	2800      	cmp	r0, #0
 8006108:	f43f af02 	beq.w	8005f10 <_strtod_l+0x488>
 800610c:	2101      	movs	r1, #1
 800610e:	4620      	mov	r0, r4
 8006110:	f002 ff3a 	bl	8008f88 <__i2b>
 8006114:	4683      	mov	fp, r0
 8006116:	2800      	cmp	r0, #0
 8006118:	f43f aefa 	beq.w	8005f10 <_strtod_l+0x488>
 800611c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800611e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006120:	2e00      	cmp	r6, #0
 8006122:	bfab      	itete	ge
 8006124:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006126:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006128:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800612a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800612e:	bfac      	ite	ge
 8006130:	eb06 0a03 	addge.w	sl, r6, r3
 8006134:	1b9f      	sublt	r7, r3, r6
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	1af6      	subs	r6, r6, r3
 800613a:	4416      	add	r6, r2
 800613c:	4ba0      	ldr	r3, [pc, #640]	; (80063c0 <_strtod_l+0x938>)
 800613e:	3e01      	subs	r6, #1
 8006140:	429e      	cmp	r6, r3
 8006142:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006146:	f280 80c4 	bge.w	80062d2 <_strtod_l+0x84a>
 800614a:	1b9b      	subs	r3, r3, r6
 800614c:	2b1f      	cmp	r3, #31
 800614e:	eba2 0203 	sub.w	r2, r2, r3
 8006152:	f04f 0101 	mov.w	r1, #1
 8006156:	f300 80b0 	bgt.w	80062ba <_strtod_l+0x832>
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	930e      	str	r3, [sp, #56]	; 0x38
 8006160:	2300      	movs	r3, #0
 8006162:	930d      	str	r3, [sp, #52]	; 0x34
 8006164:	eb0a 0602 	add.w	r6, sl, r2
 8006168:	9b04      	ldr	r3, [sp, #16]
 800616a:	45b2      	cmp	sl, r6
 800616c:	4417      	add	r7, r2
 800616e:	441f      	add	r7, r3
 8006170:	4653      	mov	r3, sl
 8006172:	bfa8      	it	ge
 8006174:	4633      	movge	r3, r6
 8006176:	42bb      	cmp	r3, r7
 8006178:	bfa8      	it	ge
 800617a:	463b      	movge	r3, r7
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfc2      	ittt	gt
 8006180:	1af6      	subgt	r6, r6, r3
 8006182:	1aff      	subgt	r7, r7, r3
 8006184:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800618a:	2b00      	cmp	r3, #0
 800618c:	dd17      	ble.n	80061be <_strtod_l+0x736>
 800618e:	4659      	mov	r1, fp
 8006190:	461a      	mov	r2, r3
 8006192:	4620      	mov	r0, r4
 8006194:	f002 ffb8 	bl	8009108 <__pow5mult>
 8006198:	4683      	mov	fp, r0
 800619a:	2800      	cmp	r0, #0
 800619c:	f43f aeb8 	beq.w	8005f10 <_strtod_l+0x488>
 80061a0:	4601      	mov	r1, r0
 80061a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80061a4:	4620      	mov	r0, r4
 80061a6:	f002 ff05 	bl	8008fb4 <__multiply>
 80061aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f43f aeaf 	beq.w	8005f10 <_strtod_l+0x488>
 80061b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80061b4:	4620      	mov	r0, r4
 80061b6:	f002 fde7 	bl	8008d88 <_Bfree>
 80061ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061bc:	9316      	str	r3, [sp, #88]	; 0x58
 80061be:	2e00      	cmp	r6, #0
 80061c0:	f300 808c 	bgt.w	80062dc <_strtod_l+0x854>
 80061c4:	9b08      	ldr	r3, [sp, #32]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dd08      	ble.n	80061dc <_strtod_l+0x754>
 80061ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061cc:	9905      	ldr	r1, [sp, #20]
 80061ce:	4620      	mov	r0, r4
 80061d0:	f002 ff9a 	bl	8009108 <__pow5mult>
 80061d4:	9005      	str	r0, [sp, #20]
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f43f ae9a 	beq.w	8005f10 <_strtod_l+0x488>
 80061dc:	2f00      	cmp	r7, #0
 80061de:	dd08      	ble.n	80061f2 <_strtod_l+0x76a>
 80061e0:	9905      	ldr	r1, [sp, #20]
 80061e2:	463a      	mov	r2, r7
 80061e4:	4620      	mov	r0, r4
 80061e6:	f002 ffe9 	bl	80091bc <__lshift>
 80061ea:	9005      	str	r0, [sp, #20]
 80061ec:	2800      	cmp	r0, #0
 80061ee:	f43f ae8f 	beq.w	8005f10 <_strtod_l+0x488>
 80061f2:	f1ba 0f00 	cmp.w	sl, #0
 80061f6:	dd08      	ble.n	800620a <_strtod_l+0x782>
 80061f8:	4659      	mov	r1, fp
 80061fa:	4652      	mov	r2, sl
 80061fc:	4620      	mov	r0, r4
 80061fe:	f002 ffdd 	bl	80091bc <__lshift>
 8006202:	4683      	mov	fp, r0
 8006204:	2800      	cmp	r0, #0
 8006206:	f43f ae83 	beq.w	8005f10 <_strtod_l+0x488>
 800620a:	9a05      	ldr	r2, [sp, #20]
 800620c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800620e:	4620      	mov	r0, r4
 8006210:	f003 f85c 	bl	80092cc <__mdiff>
 8006214:	4605      	mov	r5, r0
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f ae7a 	beq.w	8005f10 <_strtod_l+0x488>
 800621c:	68c3      	ldr	r3, [r0, #12]
 800621e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006220:	2300      	movs	r3, #0
 8006222:	60c3      	str	r3, [r0, #12]
 8006224:	4659      	mov	r1, fp
 8006226:	f003 f835 	bl	8009294 <__mcmp>
 800622a:	2800      	cmp	r0, #0
 800622c:	da60      	bge.n	80062f0 <_strtod_l+0x868>
 800622e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006230:	ea53 0308 	orrs.w	r3, r3, r8
 8006234:	f040 8084 	bne.w	8006340 <_strtod_l+0x8b8>
 8006238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800623c:	2b00      	cmp	r3, #0
 800623e:	d17f      	bne.n	8006340 <_strtod_l+0x8b8>
 8006240:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006244:	0d1b      	lsrs	r3, r3, #20
 8006246:	051b      	lsls	r3, r3, #20
 8006248:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800624c:	d978      	bls.n	8006340 <_strtod_l+0x8b8>
 800624e:	696b      	ldr	r3, [r5, #20]
 8006250:	b913      	cbnz	r3, 8006258 <_strtod_l+0x7d0>
 8006252:	692b      	ldr	r3, [r5, #16]
 8006254:	2b01      	cmp	r3, #1
 8006256:	dd73      	ble.n	8006340 <_strtod_l+0x8b8>
 8006258:	4629      	mov	r1, r5
 800625a:	2201      	movs	r2, #1
 800625c:	4620      	mov	r0, r4
 800625e:	f002 ffad 	bl	80091bc <__lshift>
 8006262:	4659      	mov	r1, fp
 8006264:	4605      	mov	r5, r0
 8006266:	f003 f815 	bl	8009294 <__mcmp>
 800626a:	2800      	cmp	r0, #0
 800626c:	dd68      	ble.n	8006340 <_strtod_l+0x8b8>
 800626e:	9904      	ldr	r1, [sp, #16]
 8006270:	4a54      	ldr	r2, [pc, #336]	; (80063c4 <_strtod_l+0x93c>)
 8006272:	464b      	mov	r3, r9
 8006274:	2900      	cmp	r1, #0
 8006276:	f000 8084 	beq.w	8006382 <_strtod_l+0x8fa>
 800627a:	ea02 0109 	and.w	r1, r2, r9
 800627e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006282:	dc7e      	bgt.n	8006382 <_strtod_l+0x8fa>
 8006284:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006288:	f77f aeb3 	ble.w	8005ff2 <_strtod_l+0x56a>
 800628c:	4b4e      	ldr	r3, [pc, #312]	; (80063c8 <_strtod_l+0x940>)
 800628e:	4640      	mov	r0, r8
 8006290:	4649      	mov	r1, r9
 8006292:	2200      	movs	r2, #0
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	4b4a      	ldr	r3, [pc, #296]	; (80063c4 <_strtod_l+0x93c>)
 800629a:	400b      	ands	r3, r1
 800629c:	4680      	mov	r8, r0
 800629e:	4689      	mov	r9, r1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f47f ae3f 	bne.w	8005f24 <_strtod_l+0x49c>
 80062a6:	2322      	movs	r3, #34	; 0x22
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	e63b      	b.n	8005f24 <_strtod_l+0x49c>
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	ea03 0808 	and.w	r8, r3, r8
 80062b8:	e6e8      	b.n	800608c <_strtod_l+0x604>
 80062ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80062be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80062c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80062c6:	36e2      	adds	r6, #226	; 0xe2
 80062c8:	fa01 f306 	lsl.w	r3, r1, r6
 80062cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80062d0:	e748      	b.n	8006164 <_strtod_l+0x6dc>
 80062d2:	2100      	movs	r1, #0
 80062d4:	2301      	movs	r3, #1
 80062d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80062da:	e743      	b.n	8006164 <_strtod_l+0x6dc>
 80062dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80062de:	4632      	mov	r2, r6
 80062e0:	4620      	mov	r0, r4
 80062e2:	f002 ff6b 	bl	80091bc <__lshift>
 80062e6:	9016      	str	r0, [sp, #88]	; 0x58
 80062e8:	2800      	cmp	r0, #0
 80062ea:	f47f af6b 	bne.w	80061c4 <_strtod_l+0x73c>
 80062ee:	e60f      	b.n	8005f10 <_strtod_l+0x488>
 80062f0:	46ca      	mov	sl, r9
 80062f2:	d171      	bne.n	80063d8 <_strtod_l+0x950>
 80062f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062fa:	b352      	cbz	r2, 8006352 <_strtod_l+0x8ca>
 80062fc:	4a33      	ldr	r2, [pc, #204]	; (80063cc <_strtod_l+0x944>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d12a      	bne.n	8006358 <_strtod_l+0x8d0>
 8006302:	9b04      	ldr	r3, [sp, #16]
 8006304:	4641      	mov	r1, r8
 8006306:	b1fb      	cbz	r3, 8006348 <_strtod_l+0x8c0>
 8006308:	4b2e      	ldr	r3, [pc, #184]	; (80063c4 <_strtod_l+0x93c>)
 800630a:	ea09 0303 	and.w	r3, r9, r3
 800630e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006312:	f04f 32ff 	mov.w	r2, #4294967295
 8006316:	d81a      	bhi.n	800634e <_strtod_l+0x8c6>
 8006318:	0d1b      	lsrs	r3, r3, #20
 800631a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	4299      	cmp	r1, r3
 8006324:	d118      	bne.n	8006358 <_strtod_l+0x8d0>
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <_strtod_l+0x948>)
 8006328:	459a      	cmp	sl, r3
 800632a:	d102      	bne.n	8006332 <_strtod_l+0x8aa>
 800632c:	3101      	adds	r1, #1
 800632e:	f43f adef 	beq.w	8005f10 <_strtod_l+0x488>
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <_strtod_l+0x93c>)
 8006334:	ea0a 0303 	and.w	r3, sl, r3
 8006338:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800633c:	f04f 0800 	mov.w	r8, #0
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1a2      	bne.n	800628c <_strtod_l+0x804>
 8006346:	e5ed      	b.n	8005f24 <_strtod_l+0x49c>
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	e7e9      	b.n	8006322 <_strtod_l+0x89a>
 800634e:	4613      	mov	r3, r2
 8006350:	e7e7      	b.n	8006322 <_strtod_l+0x89a>
 8006352:	ea53 0308 	orrs.w	r3, r3, r8
 8006356:	d08a      	beq.n	800626e <_strtod_l+0x7e6>
 8006358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635a:	b1e3      	cbz	r3, 8006396 <_strtod_l+0x90e>
 800635c:	ea13 0f0a 	tst.w	r3, sl
 8006360:	d0ee      	beq.n	8006340 <_strtod_l+0x8b8>
 8006362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006364:	9a04      	ldr	r2, [sp, #16]
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	b1c3      	cbz	r3, 800639e <_strtod_l+0x916>
 800636c:	f7ff fb70 	bl	8005a50 <sulp>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	ec51 0b18 	vmov	r0, r1, d8
 8006378:	f7f9 ff88 	bl	800028c <__adddf3>
 800637c:	4680      	mov	r8, r0
 800637e:	4689      	mov	r9, r1
 8006380:	e7de      	b.n	8006340 <_strtod_l+0x8b8>
 8006382:	4013      	ands	r3, r2
 8006384:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006388:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800638c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006390:	f04f 38ff 	mov.w	r8, #4294967295
 8006394:	e7d4      	b.n	8006340 <_strtod_l+0x8b8>
 8006396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006398:	ea13 0f08 	tst.w	r3, r8
 800639c:	e7e0      	b.n	8006360 <_strtod_l+0x8d8>
 800639e:	f7ff fb57 	bl	8005a50 <sulp>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	ec51 0b18 	vmov	r0, r1, d8
 80063aa:	f7f9 ff6d 	bl	8000288 <__aeabi_dsub>
 80063ae:	2200      	movs	r2, #0
 80063b0:	2300      	movs	r3, #0
 80063b2:	4680      	mov	r8, r0
 80063b4:	4689      	mov	r9, r1
 80063b6:	f7fa fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0c0      	beq.n	8006340 <_strtod_l+0x8b8>
 80063be:	e618      	b.n	8005ff2 <_strtod_l+0x56a>
 80063c0:	fffffc02 	.word	0xfffffc02
 80063c4:	7ff00000 	.word	0x7ff00000
 80063c8:	39500000 	.word	0x39500000
 80063cc:	000fffff 	.word	0x000fffff
 80063d0:	7fefffff 	.word	0x7fefffff
 80063d4:	0800ab88 	.word	0x0800ab88
 80063d8:	4659      	mov	r1, fp
 80063da:	4628      	mov	r0, r5
 80063dc:	f003 f8ca 	bl	8009574 <__ratio>
 80063e0:	ec57 6b10 	vmov	r6, r7, d0
 80063e4:	ee10 0a10 	vmov	r0, s0
 80063e8:	2200      	movs	r2, #0
 80063ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7fa fb7e 	bl	8000af0 <__aeabi_dcmple>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d071      	beq.n	80064dc <_strtod_l+0xa54>
 80063f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d17c      	bne.n	80064f8 <_strtod_l+0xa70>
 80063fe:	f1b8 0f00 	cmp.w	r8, #0
 8006402:	d15a      	bne.n	80064ba <_strtod_l+0xa32>
 8006404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006408:	2b00      	cmp	r3, #0
 800640a:	d15d      	bne.n	80064c8 <_strtod_l+0xa40>
 800640c:	4b90      	ldr	r3, [pc, #576]	; (8006650 <_strtod_l+0xbc8>)
 800640e:	2200      	movs	r2, #0
 8006410:	4630      	mov	r0, r6
 8006412:	4639      	mov	r1, r7
 8006414:	f7fa fb62 	bl	8000adc <__aeabi_dcmplt>
 8006418:	2800      	cmp	r0, #0
 800641a:	d15c      	bne.n	80064d6 <_strtod_l+0xa4e>
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	4b8c      	ldr	r3, [pc, #560]	; (8006654 <_strtod_l+0xbcc>)
 8006422:	2200      	movs	r2, #0
 8006424:	f7fa f8e8 	bl	80005f8 <__aeabi_dmul>
 8006428:	4606      	mov	r6, r0
 800642a:	460f      	mov	r7, r1
 800642c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006430:	9606      	str	r6, [sp, #24]
 8006432:	9307      	str	r3, [sp, #28]
 8006434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006438:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800643c:	4b86      	ldr	r3, [pc, #536]	; (8006658 <_strtod_l+0xbd0>)
 800643e:	ea0a 0303 	and.w	r3, sl, r3
 8006442:	930d      	str	r3, [sp, #52]	; 0x34
 8006444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006446:	4b85      	ldr	r3, [pc, #532]	; (800665c <_strtod_l+0xbd4>)
 8006448:	429a      	cmp	r2, r3
 800644a:	f040 8090 	bne.w	800656e <_strtod_l+0xae6>
 800644e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006452:	ec49 8b10 	vmov	d0, r8, r9
 8006456:	f002 ffc3 	bl	80093e0 <__ulp>
 800645a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800645e:	ec51 0b10 	vmov	r0, r1, d0
 8006462:	f7fa f8c9 	bl	80005f8 <__aeabi_dmul>
 8006466:	4642      	mov	r2, r8
 8006468:	464b      	mov	r3, r9
 800646a:	f7f9 ff0f 	bl	800028c <__adddf3>
 800646e:	460b      	mov	r3, r1
 8006470:	4979      	ldr	r1, [pc, #484]	; (8006658 <_strtod_l+0xbd0>)
 8006472:	4a7b      	ldr	r2, [pc, #492]	; (8006660 <_strtod_l+0xbd8>)
 8006474:	4019      	ands	r1, r3
 8006476:	4291      	cmp	r1, r2
 8006478:	4680      	mov	r8, r0
 800647a:	d944      	bls.n	8006506 <_strtod_l+0xa7e>
 800647c:	ee18 2a90 	vmov	r2, s17
 8006480:	4b78      	ldr	r3, [pc, #480]	; (8006664 <_strtod_l+0xbdc>)
 8006482:	429a      	cmp	r2, r3
 8006484:	d104      	bne.n	8006490 <_strtod_l+0xa08>
 8006486:	ee18 3a10 	vmov	r3, s16
 800648a:	3301      	adds	r3, #1
 800648c:	f43f ad40 	beq.w	8005f10 <_strtod_l+0x488>
 8006490:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8006664 <_strtod_l+0xbdc>
 8006494:	f04f 38ff 	mov.w	r8, #4294967295
 8006498:	9916      	ldr	r1, [sp, #88]	; 0x58
 800649a:	4620      	mov	r0, r4
 800649c:	f002 fc74 	bl	8008d88 <_Bfree>
 80064a0:	9905      	ldr	r1, [sp, #20]
 80064a2:	4620      	mov	r0, r4
 80064a4:	f002 fc70 	bl	8008d88 <_Bfree>
 80064a8:	4659      	mov	r1, fp
 80064aa:	4620      	mov	r0, r4
 80064ac:	f002 fc6c 	bl	8008d88 <_Bfree>
 80064b0:	4629      	mov	r1, r5
 80064b2:	4620      	mov	r0, r4
 80064b4:	f002 fc68 	bl	8008d88 <_Bfree>
 80064b8:	e609      	b.n	80060ce <_strtod_l+0x646>
 80064ba:	f1b8 0f01 	cmp.w	r8, #1
 80064be:	d103      	bne.n	80064c8 <_strtod_l+0xa40>
 80064c0:	f1b9 0f00 	cmp.w	r9, #0
 80064c4:	f43f ad95 	beq.w	8005ff2 <_strtod_l+0x56a>
 80064c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006620 <_strtod_l+0xb98>
 80064cc:	4f60      	ldr	r7, [pc, #384]	; (8006650 <_strtod_l+0xbc8>)
 80064ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80064d2:	2600      	movs	r6, #0
 80064d4:	e7ae      	b.n	8006434 <_strtod_l+0x9ac>
 80064d6:	4f5f      	ldr	r7, [pc, #380]	; (8006654 <_strtod_l+0xbcc>)
 80064d8:	2600      	movs	r6, #0
 80064da:	e7a7      	b.n	800642c <_strtod_l+0x9a4>
 80064dc:	4b5d      	ldr	r3, [pc, #372]	; (8006654 <_strtod_l+0xbcc>)
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	2200      	movs	r2, #0
 80064e4:	f7fa f888 	bl	80005f8 <__aeabi_dmul>
 80064e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ea:	4606      	mov	r6, r0
 80064ec:	460f      	mov	r7, r1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d09c      	beq.n	800642c <_strtod_l+0x9a4>
 80064f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80064f6:	e79d      	b.n	8006434 <_strtod_l+0x9ac>
 80064f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006628 <_strtod_l+0xba0>
 80064fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006500:	ec57 6b17 	vmov	r6, r7, d7
 8006504:	e796      	b.n	8006434 <_strtod_l+0x9ac>
 8006506:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800650a:	9b04      	ldr	r3, [sp, #16]
 800650c:	46ca      	mov	sl, r9
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1c2      	bne.n	8006498 <_strtod_l+0xa10>
 8006512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006518:	0d1b      	lsrs	r3, r3, #20
 800651a:	051b      	lsls	r3, r3, #20
 800651c:	429a      	cmp	r2, r3
 800651e:	d1bb      	bne.n	8006498 <_strtod_l+0xa10>
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa fbb0 	bl	8000c88 <__aeabi_d2lz>
 8006528:	f7fa f838 	bl	800059c <__aeabi_l2d>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7f9 fea8 	bl	8000288 <__aeabi_dsub>
 8006538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800653a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800653e:	ea43 0308 	orr.w	r3, r3, r8
 8006542:	4313      	orrs	r3, r2
 8006544:	4606      	mov	r6, r0
 8006546:	460f      	mov	r7, r1
 8006548:	d054      	beq.n	80065f4 <_strtod_l+0xb6c>
 800654a:	a339      	add	r3, pc, #228	; (adr r3, 8006630 <_strtod_l+0xba8>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7fa fac4 	bl	8000adc <__aeabi_dcmplt>
 8006554:	2800      	cmp	r0, #0
 8006556:	f47f ace5 	bne.w	8005f24 <_strtod_l+0x49c>
 800655a:	a337      	add	r3, pc, #220	; (adr r3, 8006638 <_strtod_l+0xbb0>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7fa fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8006568:	2800      	cmp	r0, #0
 800656a:	d095      	beq.n	8006498 <_strtod_l+0xa10>
 800656c:	e4da      	b.n	8005f24 <_strtod_l+0x49c>
 800656e:	9b04      	ldr	r3, [sp, #16]
 8006570:	b333      	cbz	r3, 80065c0 <_strtod_l+0xb38>
 8006572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006574:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006578:	d822      	bhi.n	80065c0 <_strtod_l+0xb38>
 800657a:	a331      	add	r3, pc, #196	; (adr r3, 8006640 <_strtod_l+0xbb8>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	4630      	mov	r0, r6
 8006582:	4639      	mov	r1, r7
 8006584:	f7fa fab4 	bl	8000af0 <__aeabi_dcmple>
 8006588:	b1a0      	cbz	r0, 80065b4 <_strtod_l+0xb2c>
 800658a:	4639      	mov	r1, r7
 800658c:	4630      	mov	r0, r6
 800658e:	f7fa fb0b 	bl	8000ba8 <__aeabi_d2uiz>
 8006592:	2801      	cmp	r0, #1
 8006594:	bf38      	it	cc
 8006596:	2001      	movcc	r0, #1
 8006598:	f7f9 ffb4 	bl	8000504 <__aeabi_ui2d>
 800659c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	bb23      	cbnz	r3, 80065ee <_strtod_l+0xb66>
 80065a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065a8:	9010      	str	r0, [sp, #64]	; 0x40
 80065aa:	9311      	str	r3, [sp, #68]	; 0x44
 80065ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80065b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	930f      	str	r3, [sp, #60]	; 0x3c
 80065c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80065c4:	eeb0 0a48 	vmov.f32	s0, s16
 80065c8:	eef0 0a68 	vmov.f32	s1, s17
 80065cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80065d0:	f002 ff06 	bl	80093e0 <__ulp>
 80065d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80065d8:	ec53 2b10 	vmov	r2, r3, d0
 80065dc:	f7fa f80c 	bl	80005f8 <__aeabi_dmul>
 80065e0:	ec53 2b18 	vmov	r2, r3, d8
 80065e4:	f7f9 fe52 	bl	800028c <__adddf3>
 80065e8:	4680      	mov	r8, r0
 80065ea:	4689      	mov	r9, r1
 80065ec:	e78d      	b.n	800650a <_strtod_l+0xa82>
 80065ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80065f2:	e7db      	b.n	80065ac <_strtod_l+0xb24>
 80065f4:	a314      	add	r3, pc, #80	; (adr r3, 8006648 <_strtod_l+0xbc0>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7fa fa6f 	bl	8000adc <__aeabi_dcmplt>
 80065fe:	e7b3      	b.n	8006568 <_strtod_l+0xae0>
 8006600:	2300      	movs	r3, #0
 8006602:	930a      	str	r3, [sp, #40]	; 0x28
 8006604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	f7ff ba7c 	b.w	8005b06 <_strtod_l+0x7e>
 800660e:	2a65      	cmp	r2, #101	; 0x65
 8006610:	f43f ab75 	beq.w	8005cfe <_strtod_l+0x276>
 8006614:	2a45      	cmp	r2, #69	; 0x45
 8006616:	f43f ab72 	beq.w	8005cfe <_strtod_l+0x276>
 800661a:	2301      	movs	r3, #1
 800661c:	f7ff bbaa 	b.w	8005d74 <_strtod_l+0x2ec>
 8006620:	00000000 	.word	0x00000000
 8006624:	bff00000 	.word	0xbff00000
 8006628:	00000000 	.word	0x00000000
 800662c:	3ff00000 	.word	0x3ff00000
 8006630:	94a03595 	.word	0x94a03595
 8006634:	3fdfffff 	.word	0x3fdfffff
 8006638:	35afe535 	.word	0x35afe535
 800663c:	3fe00000 	.word	0x3fe00000
 8006640:	ffc00000 	.word	0xffc00000
 8006644:	41dfffff 	.word	0x41dfffff
 8006648:	94a03595 	.word	0x94a03595
 800664c:	3fcfffff 	.word	0x3fcfffff
 8006650:	3ff00000 	.word	0x3ff00000
 8006654:	3fe00000 	.word	0x3fe00000
 8006658:	7ff00000 	.word	0x7ff00000
 800665c:	7fe00000 	.word	0x7fe00000
 8006660:	7c9fffff 	.word	0x7c9fffff
 8006664:	7fefffff 	.word	0x7fefffff

08006668 <_strtod_r>:
 8006668:	4b01      	ldr	r3, [pc, #4]	; (8006670 <_strtod_r+0x8>)
 800666a:	f7ff ba0d 	b.w	8005a88 <_strtod_l>
 800666e:	bf00      	nop
 8006670:	20000068 	.word	0x20000068

08006674 <strtof>:
 8006674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006678:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800673c <strtof+0xc8>
 800667c:	4b2a      	ldr	r3, [pc, #168]	; (8006728 <strtof+0xb4>)
 800667e:	460a      	mov	r2, r1
 8006680:	ed2d 8b02 	vpush	{d8}
 8006684:	4601      	mov	r1, r0
 8006686:	f8d8 0000 	ldr.w	r0, [r8]
 800668a:	f7ff f9fd 	bl	8005a88 <_strtod_l>
 800668e:	ec55 4b10 	vmov	r4, r5, d0
 8006692:	ee10 2a10 	vmov	r2, s0
 8006696:	ee10 0a10 	vmov	r0, s0
 800669a:	462b      	mov	r3, r5
 800669c:	4629      	mov	r1, r5
 800669e:	f7fa fa45 	bl	8000b2c <__aeabi_dcmpun>
 80066a2:	b190      	cbz	r0, 80066ca <strtof+0x56>
 80066a4:	2d00      	cmp	r5, #0
 80066a6:	4821      	ldr	r0, [pc, #132]	; (800672c <strtof+0xb8>)
 80066a8:	da09      	bge.n	80066be <strtof+0x4a>
 80066aa:	f001 f8f5 	bl	8007898 <nanf>
 80066ae:	eeb1 8a40 	vneg.f32	s16, s0
 80066b2:	eeb0 0a48 	vmov.f32	s0, s16
 80066b6:	ecbd 8b02 	vpop	{d8}
 80066ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066be:	ecbd 8b02 	vpop	{d8}
 80066c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c6:	f001 b8e7 	b.w	8007898 <nanf>
 80066ca:	4620      	mov	r0, r4
 80066cc:	4629      	mov	r1, r5
 80066ce:	f7fa fa8b 	bl	8000be8 <__aeabi_d2f>
 80066d2:	ee08 0a10 	vmov	s16, r0
 80066d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006730 <strtof+0xbc>
 80066da:	eeb0 7ac8 	vabs.f32	s14, s16
 80066de:	eeb4 7a67 	vcmp.f32	s14, s15
 80066e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e6:	dd11      	ble.n	800670c <strtof+0x98>
 80066e8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80066ec:	4b11      	ldr	r3, [pc, #68]	; (8006734 <strtof+0xc0>)
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295
 80066f2:	4620      	mov	r0, r4
 80066f4:	4639      	mov	r1, r7
 80066f6:	f7fa fa19 	bl	8000b2c <__aeabi_dcmpun>
 80066fa:	b980      	cbnz	r0, 800671e <strtof+0xaa>
 80066fc:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <strtof+0xc0>)
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	4620      	mov	r0, r4
 8006704:	4639      	mov	r1, r7
 8006706:	f7fa f9f3 	bl	8000af0 <__aeabi_dcmple>
 800670a:	b940      	cbnz	r0, 800671e <strtof+0xaa>
 800670c:	ee18 3a10 	vmov	r3, s16
 8006710:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006714:	d1cd      	bne.n	80066b2 <strtof+0x3e>
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <strtof+0xc4>)
 8006718:	402b      	ands	r3, r5
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0c9      	beq.n	80066b2 <strtof+0x3e>
 800671e:	f8d8 3000 	ldr.w	r3, [r8]
 8006722:	2222      	movs	r2, #34	; 0x22
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e7c4      	b.n	80066b2 <strtof+0x3e>
 8006728:	20000068 	.word	0x20000068
 800672c:	0800af9c 	.word	0x0800af9c
 8006730:	7f7fffff 	.word	0x7f7fffff
 8006734:	7fefffff 	.word	0x7fefffff
 8006738:	7ff00000 	.word	0x7ff00000
 800673c:	20000220 	.word	0x20000220

08006740 <tolower>:
 8006740:	4b03      	ldr	r3, [pc, #12]	; (8006750 <tolower+0x10>)
 8006742:	5c1b      	ldrb	r3, [r3, r0]
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	2b01      	cmp	r3, #1
 800674a:	bf08      	it	eq
 800674c:	3020      	addeq	r0, #32
 800674e:	4770      	bx	lr
 8006750:	0800ae35 	.word	0x0800ae35

08006754 <__cvt>:
 8006754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	ec55 4b10 	vmov	r4, r5, d0
 800675c:	2d00      	cmp	r5, #0
 800675e:	460e      	mov	r6, r1
 8006760:	4619      	mov	r1, r3
 8006762:	462b      	mov	r3, r5
 8006764:	bfbb      	ittet	lt
 8006766:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800676a:	461d      	movlt	r5, r3
 800676c:	2300      	movge	r3, #0
 800676e:	232d      	movlt	r3, #45	; 0x2d
 8006770:	700b      	strb	r3, [r1, #0]
 8006772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006774:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006778:	4691      	mov	r9, r2
 800677a:	f023 0820 	bic.w	r8, r3, #32
 800677e:	bfbc      	itt	lt
 8006780:	4622      	movlt	r2, r4
 8006782:	4614      	movlt	r4, r2
 8006784:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006788:	d005      	beq.n	8006796 <__cvt+0x42>
 800678a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800678e:	d100      	bne.n	8006792 <__cvt+0x3e>
 8006790:	3601      	adds	r6, #1
 8006792:	2102      	movs	r1, #2
 8006794:	e000      	b.n	8006798 <__cvt+0x44>
 8006796:	2103      	movs	r1, #3
 8006798:	ab03      	add	r3, sp, #12
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	ab02      	add	r3, sp, #8
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	ec45 4b10 	vmov	d0, r4, r5
 80067a4:	4653      	mov	r3, sl
 80067a6:	4632      	mov	r2, r6
 80067a8:	f001 f906 	bl	80079b8 <_dtoa_r>
 80067ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067b0:	4607      	mov	r7, r0
 80067b2:	d102      	bne.n	80067ba <__cvt+0x66>
 80067b4:	f019 0f01 	tst.w	r9, #1
 80067b8:	d022      	beq.n	8006800 <__cvt+0xac>
 80067ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067be:	eb07 0906 	add.w	r9, r7, r6
 80067c2:	d110      	bne.n	80067e6 <__cvt+0x92>
 80067c4:	783b      	ldrb	r3, [r7, #0]
 80067c6:	2b30      	cmp	r3, #48	; 0x30
 80067c8:	d10a      	bne.n	80067e0 <__cvt+0x8c>
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7fa f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80067d6:	b918      	cbnz	r0, 80067e0 <__cvt+0x8c>
 80067d8:	f1c6 0601 	rsb	r6, r6, #1
 80067dc:	f8ca 6000 	str.w	r6, [sl]
 80067e0:	f8da 3000 	ldr.w	r3, [sl]
 80067e4:	4499      	add	r9, r3
 80067e6:	2200      	movs	r2, #0
 80067e8:	2300      	movs	r3, #0
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7fa f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f2:	b108      	cbz	r0, 80067f8 <__cvt+0xa4>
 80067f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067f8:	2230      	movs	r2, #48	; 0x30
 80067fa:	9b03      	ldr	r3, [sp, #12]
 80067fc:	454b      	cmp	r3, r9
 80067fe:	d307      	bcc.n	8006810 <__cvt+0xbc>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006804:	1bdb      	subs	r3, r3, r7
 8006806:	4638      	mov	r0, r7
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	b004      	add	sp, #16
 800680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	9103      	str	r1, [sp, #12]
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e7f0      	b.n	80067fa <__cvt+0xa6>

08006818 <__exponent>:
 8006818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800681a:	4603      	mov	r3, r0
 800681c:	2900      	cmp	r1, #0
 800681e:	bfb8      	it	lt
 8006820:	4249      	neglt	r1, r1
 8006822:	f803 2b02 	strb.w	r2, [r3], #2
 8006826:	bfb4      	ite	lt
 8006828:	222d      	movlt	r2, #45	; 0x2d
 800682a:	222b      	movge	r2, #43	; 0x2b
 800682c:	2909      	cmp	r1, #9
 800682e:	7042      	strb	r2, [r0, #1]
 8006830:	dd2a      	ble.n	8006888 <__exponent+0x70>
 8006832:	f10d 0207 	add.w	r2, sp, #7
 8006836:	4617      	mov	r7, r2
 8006838:	260a      	movs	r6, #10
 800683a:	4694      	mov	ip, r2
 800683c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006840:	fb06 1415 	mls	r4, r6, r5, r1
 8006844:	3430      	adds	r4, #48	; 0x30
 8006846:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800684a:	460c      	mov	r4, r1
 800684c:	2c63      	cmp	r4, #99	; 0x63
 800684e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006852:	4629      	mov	r1, r5
 8006854:	dcf1      	bgt.n	800683a <__exponent+0x22>
 8006856:	3130      	adds	r1, #48	; 0x30
 8006858:	f1ac 0402 	sub.w	r4, ip, #2
 800685c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006860:	1c41      	adds	r1, r0, #1
 8006862:	4622      	mov	r2, r4
 8006864:	42ba      	cmp	r2, r7
 8006866:	d30a      	bcc.n	800687e <__exponent+0x66>
 8006868:	f10d 0209 	add.w	r2, sp, #9
 800686c:	eba2 020c 	sub.w	r2, r2, ip
 8006870:	42bc      	cmp	r4, r7
 8006872:	bf88      	it	hi
 8006874:	2200      	movhi	r2, #0
 8006876:	4413      	add	r3, r2
 8006878:	1a18      	subs	r0, r3, r0
 800687a:	b003      	add	sp, #12
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006882:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006886:	e7ed      	b.n	8006864 <__exponent+0x4c>
 8006888:	2330      	movs	r3, #48	; 0x30
 800688a:	3130      	adds	r1, #48	; 0x30
 800688c:	7083      	strb	r3, [r0, #2]
 800688e:	70c1      	strb	r1, [r0, #3]
 8006890:	1d03      	adds	r3, r0, #4
 8006892:	e7f1      	b.n	8006878 <__exponent+0x60>

08006894 <_printf_float>:
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	ed2d 8b02 	vpush	{d8}
 800689c:	b08d      	sub	sp, #52	; 0x34
 800689e:	460c      	mov	r4, r1
 80068a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068a4:	4616      	mov	r6, r2
 80068a6:	461f      	mov	r7, r3
 80068a8:	4605      	mov	r5, r0
 80068aa:	f000 ff57 	bl	800775c <_localeconv_r>
 80068ae:	f8d0 a000 	ldr.w	sl, [r0]
 80068b2:	4650      	mov	r0, sl
 80068b4:	f7f9 fcdc 	bl	8000270 <strlen>
 80068b8:	2300      	movs	r3, #0
 80068ba:	930a      	str	r3, [sp, #40]	; 0x28
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	9305      	str	r3, [sp, #20]
 80068c0:	f8d8 3000 	ldr.w	r3, [r8]
 80068c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068c8:	3307      	adds	r3, #7
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	f103 0208 	add.w	r2, r3, #8
 80068d2:	f8c8 2000 	str.w	r2, [r8]
 80068d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068e4:	ee08 0a10 	vmov	s16, r0
 80068e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80068ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f0:	4b9e      	ldr	r3, [pc, #632]	; (8006b6c <_printf_float+0x2d8>)
 80068f2:	f04f 32ff 	mov.w	r2, #4294967295
 80068f6:	f7fa f919 	bl	8000b2c <__aeabi_dcmpun>
 80068fa:	bb88      	cbnz	r0, 8006960 <_printf_float+0xcc>
 80068fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006900:	4b9a      	ldr	r3, [pc, #616]	; (8006b6c <_printf_float+0x2d8>)
 8006902:	f04f 32ff 	mov.w	r2, #4294967295
 8006906:	f7fa f8f3 	bl	8000af0 <__aeabi_dcmple>
 800690a:	bb48      	cbnz	r0, 8006960 <_printf_float+0xcc>
 800690c:	2200      	movs	r2, #0
 800690e:	2300      	movs	r3, #0
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7fa f8e2 	bl	8000adc <__aeabi_dcmplt>
 8006918:	b110      	cbz	r0, 8006920 <_printf_float+0x8c>
 800691a:	232d      	movs	r3, #45	; 0x2d
 800691c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006920:	4a93      	ldr	r2, [pc, #588]	; (8006b70 <_printf_float+0x2dc>)
 8006922:	4b94      	ldr	r3, [pc, #592]	; (8006b74 <_printf_float+0x2e0>)
 8006924:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006928:	bf94      	ite	ls
 800692a:	4690      	movls	r8, r2
 800692c:	4698      	movhi	r8, r3
 800692e:	2303      	movs	r3, #3
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	f023 0304 	bic.w	r3, r3, #4
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	f04f 0900 	mov.w	r9, #0
 800693e:	9700      	str	r7, [sp, #0]
 8006940:	4633      	mov	r3, r6
 8006942:	aa0b      	add	r2, sp, #44	; 0x2c
 8006944:	4621      	mov	r1, r4
 8006946:	4628      	mov	r0, r5
 8006948:	f000 f9da 	bl	8006d00 <_printf_common>
 800694c:	3001      	adds	r0, #1
 800694e:	f040 8090 	bne.w	8006a72 <_printf_float+0x1de>
 8006952:	f04f 30ff 	mov.w	r0, #4294967295
 8006956:	b00d      	add	sp, #52	; 0x34
 8006958:	ecbd 8b02 	vpop	{d8}
 800695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006960:	4642      	mov	r2, r8
 8006962:	464b      	mov	r3, r9
 8006964:	4640      	mov	r0, r8
 8006966:	4649      	mov	r1, r9
 8006968:	f7fa f8e0 	bl	8000b2c <__aeabi_dcmpun>
 800696c:	b140      	cbz	r0, 8006980 <_printf_float+0xec>
 800696e:	464b      	mov	r3, r9
 8006970:	2b00      	cmp	r3, #0
 8006972:	bfbc      	itt	lt
 8006974:	232d      	movlt	r3, #45	; 0x2d
 8006976:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800697a:	4a7f      	ldr	r2, [pc, #508]	; (8006b78 <_printf_float+0x2e4>)
 800697c:	4b7f      	ldr	r3, [pc, #508]	; (8006b7c <_printf_float+0x2e8>)
 800697e:	e7d1      	b.n	8006924 <_printf_float+0x90>
 8006980:	6863      	ldr	r3, [r4, #4]
 8006982:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006986:	9206      	str	r2, [sp, #24]
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	d13f      	bne.n	8006a0c <_printf_float+0x178>
 800698c:	2306      	movs	r3, #6
 800698e:	6063      	str	r3, [r4, #4]
 8006990:	9b05      	ldr	r3, [sp, #20]
 8006992:	6861      	ldr	r1, [r4, #4]
 8006994:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006998:	2300      	movs	r3, #0
 800699a:	9303      	str	r3, [sp, #12]
 800699c:	ab0a      	add	r3, sp, #40	; 0x28
 800699e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069a2:	ab09      	add	r3, sp, #36	; 0x24
 80069a4:	ec49 8b10 	vmov	d0, r8, r9
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	6022      	str	r2, [r4, #0]
 80069ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069b0:	4628      	mov	r0, r5
 80069b2:	f7ff fecf 	bl	8006754 <__cvt>
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ba:	2b47      	cmp	r3, #71	; 0x47
 80069bc:	4680      	mov	r8, r0
 80069be:	d108      	bne.n	80069d2 <_printf_float+0x13e>
 80069c0:	1cc8      	adds	r0, r1, #3
 80069c2:	db02      	blt.n	80069ca <_printf_float+0x136>
 80069c4:	6863      	ldr	r3, [r4, #4]
 80069c6:	4299      	cmp	r1, r3
 80069c8:	dd41      	ble.n	8006a4e <_printf_float+0x1ba>
 80069ca:	f1ab 0302 	sub.w	r3, fp, #2
 80069ce:	fa5f fb83 	uxtb.w	fp, r3
 80069d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069d6:	d820      	bhi.n	8006a1a <_printf_float+0x186>
 80069d8:	3901      	subs	r1, #1
 80069da:	465a      	mov	r2, fp
 80069dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069e0:	9109      	str	r1, [sp, #36]	; 0x24
 80069e2:	f7ff ff19 	bl	8006818 <__exponent>
 80069e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069e8:	1813      	adds	r3, r2, r0
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	4681      	mov	r9, r0
 80069ee:	6123      	str	r3, [r4, #16]
 80069f0:	dc02      	bgt.n	80069f8 <_printf_float+0x164>
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	07d2      	lsls	r2, r2, #31
 80069f6:	d501      	bpl.n	80069fc <_printf_float+0x168>
 80069f8:	3301      	adds	r3, #1
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d09c      	beq.n	800693e <_printf_float+0xaa>
 8006a04:	232d      	movs	r3, #45	; 0x2d
 8006a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0a:	e798      	b.n	800693e <_printf_float+0xaa>
 8006a0c:	9a06      	ldr	r2, [sp, #24]
 8006a0e:	2a47      	cmp	r2, #71	; 0x47
 8006a10:	d1be      	bne.n	8006990 <_printf_float+0xfc>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1bc      	bne.n	8006990 <_printf_float+0xfc>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e7b9      	b.n	800698e <_printf_float+0xfa>
 8006a1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a1e:	d118      	bne.n	8006a52 <_printf_float+0x1be>
 8006a20:	2900      	cmp	r1, #0
 8006a22:	6863      	ldr	r3, [r4, #4]
 8006a24:	dd0b      	ble.n	8006a3e <_printf_float+0x1aa>
 8006a26:	6121      	str	r1, [r4, #16]
 8006a28:	b913      	cbnz	r3, 8006a30 <_printf_float+0x19c>
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	07d0      	lsls	r0, r2, #31
 8006a2e:	d502      	bpl.n	8006a36 <_printf_float+0x1a2>
 8006a30:	3301      	adds	r3, #1
 8006a32:	440b      	add	r3, r1
 8006a34:	6123      	str	r3, [r4, #16]
 8006a36:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a38:	f04f 0900 	mov.w	r9, #0
 8006a3c:	e7de      	b.n	80069fc <_printf_float+0x168>
 8006a3e:	b913      	cbnz	r3, 8006a46 <_printf_float+0x1b2>
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	07d2      	lsls	r2, r2, #31
 8006a44:	d501      	bpl.n	8006a4a <_printf_float+0x1b6>
 8006a46:	3302      	adds	r3, #2
 8006a48:	e7f4      	b.n	8006a34 <_printf_float+0x1a0>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7f2      	b.n	8006a34 <_printf_float+0x1a0>
 8006a4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a54:	4299      	cmp	r1, r3
 8006a56:	db05      	blt.n	8006a64 <_printf_float+0x1d0>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	6121      	str	r1, [r4, #16]
 8006a5c:	07d8      	lsls	r0, r3, #31
 8006a5e:	d5ea      	bpl.n	8006a36 <_printf_float+0x1a2>
 8006a60:	1c4b      	adds	r3, r1, #1
 8006a62:	e7e7      	b.n	8006a34 <_printf_float+0x1a0>
 8006a64:	2900      	cmp	r1, #0
 8006a66:	bfd4      	ite	le
 8006a68:	f1c1 0202 	rsble	r2, r1, #2
 8006a6c:	2201      	movgt	r2, #1
 8006a6e:	4413      	add	r3, r2
 8006a70:	e7e0      	b.n	8006a34 <_printf_float+0x1a0>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	055a      	lsls	r2, r3, #21
 8006a76:	d407      	bmi.n	8006a88 <_printf_float+0x1f4>
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	4642      	mov	r2, r8
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	d12c      	bne.n	8006ae0 <_printf_float+0x24c>
 8006a86:	e764      	b.n	8006952 <_printf_float+0xbe>
 8006a88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a8c:	f240 80e0 	bls.w	8006c50 <_printf_float+0x3bc>
 8006a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a94:	2200      	movs	r2, #0
 8006a96:	2300      	movs	r3, #0
 8006a98:	f7fa f816 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d034      	beq.n	8006b0a <_printf_float+0x276>
 8006aa0:	4a37      	ldr	r2, [pc, #220]	; (8006b80 <_printf_float+0x2ec>)
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	47b8      	blx	r7
 8006aaa:	3001      	adds	r0, #1
 8006aac:	f43f af51 	beq.w	8006952 <_printf_float+0xbe>
 8006ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	db02      	blt.n	8006abe <_printf_float+0x22a>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	07d8      	lsls	r0, r3, #31
 8006abc:	d510      	bpl.n	8006ae0 <_printf_float+0x24c>
 8006abe:	ee18 3a10 	vmov	r3, s16
 8006ac2:	4652      	mov	r2, sl
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f af41 	beq.w	8006952 <_printf_float+0xbe>
 8006ad0:	f04f 0800 	mov.w	r8, #0
 8006ad4:	f104 091a 	add.w	r9, r4, #26
 8006ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ada:	3b01      	subs	r3, #1
 8006adc:	4543      	cmp	r3, r8
 8006ade:	dc09      	bgt.n	8006af4 <_printf_float+0x260>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	079b      	lsls	r3, r3, #30
 8006ae4:	f100 8107 	bmi.w	8006cf6 <_printf_float+0x462>
 8006ae8:	68e0      	ldr	r0, [r4, #12]
 8006aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aec:	4298      	cmp	r0, r3
 8006aee:	bfb8      	it	lt
 8006af0:	4618      	movlt	r0, r3
 8006af2:	e730      	b.n	8006956 <_printf_float+0xc2>
 8006af4:	2301      	movs	r3, #1
 8006af6:	464a      	mov	r2, r9
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af27 	beq.w	8006952 <_printf_float+0xbe>
 8006b04:	f108 0801 	add.w	r8, r8, #1
 8006b08:	e7e6      	b.n	8006ad8 <_printf_float+0x244>
 8006b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dc39      	bgt.n	8006b84 <_printf_float+0x2f0>
 8006b10:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <_printf_float+0x2ec>)
 8006b12:	2301      	movs	r3, #1
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af19 	beq.w	8006952 <_printf_float+0xbe>
 8006b20:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b24:	4313      	orrs	r3, r2
 8006b26:	d102      	bne.n	8006b2e <_printf_float+0x29a>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	07d9      	lsls	r1, r3, #31
 8006b2c:	d5d8      	bpl.n	8006ae0 <_printf_float+0x24c>
 8006b2e:	ee18 3a10 	vmov	r3, s16
 8006b32:	4652      	mov	r2, sl
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af09 	beq.w	8006952 <_printf_float+0xbe>
 8006b40:	f04f 0900 	mov.w	r9, #0
 8006b44:	f104 0a1a 	add.w	sl, r4, #26
 8006b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4a:	425b      	negs	r3, r3
 8006b4c:	454b      	cmp	r3, r9
 8006b4e:	dc01      	bgt.n	8006b54 <_printf_float+0x2c0>
 8006b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b52:	e792      	b.n	8006a7a <_printf_float+0x1e6>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4652      	mov	r2, sl
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f43f aef7 	beq.w	8006952 <_printf_float+0xbe>
 8006b64:	f109 0901 	add.w	r9, r9, #1
 8006b68:	e7ee      	b.n	8006b48 <_printf_float+0x2b4>
 8006b6a:	bf00      	nop
 8006b6c:	7fefffff 	.word	0x7fefffff
 8006b70:	0800abb0 	.word	0x0800abb0
 8006b74:	0800abb4 	.word	0x0800abb4
 8006b78:	0800abb8 	.word	0x0800abb8
 8006b7c:	0800abbc 	.word	0x0800abbc
 8006b80:	0800af5c 	.word	0x0800af5c
 8006b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	bfa8      	it	ge
 8006b8c:	461a      	movge	r2, r3
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	4691      	mov	r9, r2
 8006b92:	dc37      	bgt.n	8006c04 <_printf_float+0x370>
 8006b94:	f04f 0b00 	mov.w	fp, #0
 8006b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b9c:	f104 021a 	add.w	r2, r4, #26
 8006ba0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	eba3 0309 	sub.w	r3, r3, r9
 8006ba8:	455b      	cmp	r3, fp
 8006baa:	dc33      	bgt.n	8006c14 <_printf_float+0x380>
 8006bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	db3b      	blt.n	8006c2c <_printf_float+0x398>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	07da      	lsls	r2, r3, #31
 8006bb8:	d438      	bmi.n	8006c2c <_printf_float+0x398>
 8006bba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bbe:	eba2 0903 	sub.w	r9, r2, r3
 8006bc2:	9b05      	ldr	r3, [sp, #20]
 8006bc4:	1ad2      	subs	r2, r2, r3
 8006bc6:	4591      	cmp	r9, r2
 8006bc8:	bfa8      	it	ge
 8006bca:	4691      	movge	r9, r2
 8006bcc:	f1b9 0f00 	cmp.w	r9, #0
 8006bd0:	dc35      	bgt.n	8006c3e <_printf_float+0x3aa>
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bda:	f104 0a1a 	add.w	sl, r4, #26
 8006bde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	eba3 0309 	sub.w	r3, r3, r9
 8006be8:	4543      	cmp	r3, r8
 8006bea:	f77f af79 	ble.w	8006ae0 <_printf_float+0x24c>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4652      	mov	r2, sl
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f aeaa 	beq.w	8006952 <_printf_float+0xbe>
 8006bfe:	f108 0801 	add.w	r8, r8, #1
 8006c02:	e7ec      	b.n	8006bde <_printf_float+0x34a>
 8006c04:	4613      	mov	r3, r2
 8006c06:	4631      	mov	r1, r6
 8006c08:	4642      	mov	r2, r8
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d1c0      	bne.n	8006b94 <_printf_float+0x300>
 8006c12:	e69e      	b.n	8006952 <_printf_float+0xbe>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	9205      	str	r2, [sp, #20]
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f ae97 	beq.w	8006952 <_printf_float+0xbe>
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	f10b 0b01 	add.w	fp, fp, #1
 8006c2a:	e7b9      	b.n	8006ba0 <_printf_float+0x30c>
 8006c2c:	ee18 3a10 	vmov	r3, s16
 8006c30:	4652      	mov	r2, sl
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d1be      	bne.n	8006bba <_printf_float+0x326>
 8006c3c:	e689      	b.n	8006952 <_printf_float+0xbe>
 8006c3e:	9a05      	ldr	r2, [sp, #20]
 8006c40:	464b      	mov	r3, r9
 8006c42:	4442      	add	r2, r8
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d1c1      	bne.n	8006bd2 <_printf_float+0x33e>
 8006c4e:	e680      	b.n	8006952 <_printf_float+0xbe>
 8006c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c52:	2a01      	cmp	r2, #1
 8006c54:	dc01      	bgt.n	8006c5a <_printf_float+0x3c6>
 8006c56:	07db      	lsls	r3, r3, #31
 8006c58:	d53a      	bpl.n	8006cd0 <_printf_float+0x43c>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f ae74 	beq.w	8006952 <_printf_float+0xbe>
 8006c6a:	ee18 3a10 	vmov	r3, s16
 8006c6e:	4652      	mov	r2, sl
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f ae6b 	beq.w	8006952 <_printf_float+0xbe>
 8006c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006c88:	f7f9 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c8c:	b9d8      	cbnz	r0, 8006cc6 <_printf_float+0x432>
 8006c8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c92:	f108 0201 	add.w	r2, r8, #1
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d10e      	bne.n	8006cbe <_printf_float+0x42a>
 8006ca0:	e657      	b.n	8006952 <_printf_float+0xbe>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f ae50 	beq.w	8006952 <_printf_float+0xbe>
 8006cb2:	f108 0801 	add.w	r8, r8, #1
 8006cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	4543      	cmp	r3, r8
 8006cbc:	dcf1      	bgt.n	8006ca2 <_printf_float+0x40e>
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cc4:	e6da      	b.n	8006a7c <_printf_float+0x1e8>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	f104 0a1a 	add.w	sl, r4, #26
 8006cce:	e7f2      	b.n	8006cb6 <_printf_float+0x422>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	e7df      	b.n	8006c96 <_printf_float+0x402>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	464a      	mov	r2, r9
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f ae36 	beq.w	8006952 <_printf_float+0xbe>
 8006ce6:	f108 0801 	add.w	r8, r8, #1
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cee:	1a5b      	subs	r3, r3, r1
 8006cf0:	4543      	cmp	r3, r8
 8006cf2:	dcf0      	bgt.n	8006cd6 <_printf_float+0x442>
 8006cf4:	e6f8      	b.n	8006ae8 <_printf_float+0x254>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	f104 0919 	add.w	r9, r4, #25
 8006cfe:	e7f4      	b.n	8006cea <_printf_float+0x456>

08006d00 <_printf_common>:
 8006d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	4616      	mov	r6, r2
 8006d06:	4699      	mov	r9, r3
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	690b      	ldr	r3, [r1, #16]
 8006d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfb8      	it	lt
 8006d14:	4613      	movlt	r3, r2
 8006d16:	6033      	str	r3, [r6, #0]
 8006d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b10a      	cbz	r2, 8006d26 <_printf_common+0x26>
 8006d22:	3301      	adds	r3, #1
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	0699      	lsls	r1, r3, #26
 8006d2a:	bf42      	ittt	mi
 8006d2c:	6833      	ldrmi	r3, [r6, #0]
 8006d2e:	3302      	addmi	r3, #2
 8006d30:	6033      	strmi	r3, [r6, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	f015 0506 	ands.w	r5, r5, #6
 8006d38:	d106      	bne.n	8006d48 <_printf_common+0x48>
 8006d3a:	f104 0a19 	add.w	sl, r4, #25
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	6832      	ldr	r2, [r6, #0]
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc26      	bgt.n	8006d96 <_printf_common+0x96>
 8006d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d4c:	1e13      	subs	r3, r2, #0
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	bf18      	it	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	0692      	lsls	r2, r2, #26
 8006d56:	d42b      	bmi.n	8006db0 <_printf_common+0xb0>
 8006d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c0      	blx	r8
 8006d62:	3001      	adds	r0, #1
 8006d64:	d01e      	beq.n	8006da4 <_printf_common+0xa4>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	f003 0306 	and.w	r3, r3, #6
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	bf02      	ittt	eq
 8006d72:	68e5      	ldreq	r5, [r4, #12]
 8006d74:	6833      	ldreq	r3, [r6, #0]
 8006d76:	1aed      	subeq	r5, r5, r3
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	bf0c      	ite	eq
 8006d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d80:	2500      	movne	r5, #0
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bfc4      	itt	gt
 8006d86:	1a9b      	subgt	r3, r3, r2
 8006d88:	18ed      	addgt	r5, r5, r3
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	341a      	adds	r4, #26
 8006d8e:	42b5      	cmp	r5, r6
 8006d90:	d11a      	bne.n	8006dc8 <_printf_common+0xc8>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e008      	b.n	8006da8 <_printf_common+0xa8>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	47c0      	blx	r8
 8006da0:	3001      	adds	r0, #1
 8006da2:	d103      	bne.n	8006dac <_printf_common+0xac>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dac:	3501      	adds	r5, #1
 8006dae:	e7c6      	b.n	8006d3e <_printf_common+0x3e>
 8006db0:	18e1      	adds	r1, r4, r3
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	2030      	movs	r0, #48	; 0x30
 8006db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dba:	4422      	add	r2, r4
 8006dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	e7c7      	b.n	8006d58 <_printf_common+0x58>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4622      	mov	r2, r4
 8006dcc:	4649      	mov	r1, r9
 8006dce:	4638      	mov	r0, r7
 8006dd0:	47c0      	blx	r8
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d0e6      	beq.n	8006da4 <_printf_common+0xa4>
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7d9      	b.n	8006d8e <_printf_common+0x8e>
	...

08006ddc <_printf_i>:
 8006ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	7e0f      	ldrb	r7, [r1, #24]
 8006de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006de4:	2f78      	cmp	r7, #120	; 0x78
 8006de6:	4691      	mov	r9, r2
 8006de8:	4680      	mov	r8, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	469a      	mov	sl, r3
 8006dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006df2:	d807      	bhi.n	8006e04 <_printf_i+0x28>
 8006df4:	2f62      	cmp	r7, #98	; 0x62
 8006df6:	d80a      	bhi.n	8006e0e <_printf_i+0x32>
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	f000 80d4 	beq.w	8006fa6 <_printf_i+0x1ca>
 8006dfe:	2f58      	cmp	r7, #88	; 0x58
 8006e00:	f000 80c0 	beq.w	8006f84 <_printf_i+0x1a8>
 8006e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e0c:	e03a      	b.n	8006e84 <_printf_i+0xa8>
 8006e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e12:	2b15      	cmp	r3, #21
 8006e14:	d8f6      	bhi.n	8006e04 <_printf_i+0x28>
 8006e16:	a101      	add	r1, pc, #4	; (adr r1, 8006e1c <_printf_i+0x40>)
 8006e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e89 	.word	0x08006e89
 8006e24:	08006e05 	.word	0x08006e05
 8006e28:	08006e05 	.word	0x08006e05
 8006e2c:	08006e05 	.word	0x08006e05
 8006e30:	08006e05 	.word	0x08006e05
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006e05 	.word	0x08006e05
 8006e3c:	08006e05 	.word	0x08006e05
 8006e40:	08006e05 	.word	0x08006e05
 8006e44:	08006e05 	.word	0x08006e05
 8006e48:	08006f8d 	.word	0x08006f8d
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006f47 	.word	0x08006f47
 8006e54:	08006e05 	.word	0x08006e05
 8006e58:	08006e05 	.word	0x08006e05
 8006e5c:	08006faf 	.word	0x08006faf
 8006e60:	08006e05 	.word	0x08006e05
 8006e64:	08006eb5 	.word	0x08006eb5
 8006e68:	08006e05 	.word	0x08006e05
 8006e6c:	08006e05 	.word	0x08006e05
 8006e70:	08006f4f 	.word	0x08006f4f
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e84:	2301      	movs	r3, #1
 8006e86:	e09f      	b.n	8006fc8 <_printf_i+0x1ec>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	0607      	lsls	r7, r0, #24
 8006e8e:	f103 0104 	add.w	r1, r3, #4
 8006e92:	6029      	str	r1, [r5, #0]
 8006e94:	d501      	bpl.n	8006e9a <_printf_i+0xbe>
 8006e96:	681e      	ldr	r6, [r3, #0]
 8006e98:	e003      	b.n	8006ea2 <_printf_i+0xc6>
 8006e9a:	0646      	lsls	r6, r0, #25
 8006e9c:	d5fb      	bpl.n	8006e96 <_printf_i+0xba>
 8006e9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ea2:	2e00      	cmp	r6, #0
 8006ea4:	da03      	bge.n	8006eae <_printf_i+0xd2>
 8006ea6:	232d      	movs	r3, #45	; 0x2d
 8006ea8:	4276      	negs	r6, r6
 8006eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eae:	485a      	ldr	r0, [pc, #360]	; (8007018 <_printf_i+0x23c>)
 8006eb0:	230a      	movs	r3, #10
 8006eb2:	e012      	b.n	8006eda <_printf_i+0xfe>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	1d19      	adds	r1, r3, #4
 8006eba:	6029      	str	r1, [r5, #0]
 8006ebc:	0605      	lsls	r5, r0, #24
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0xe8>
 8006ec0:	681e      	ldr	r6, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <_printf_i+0xee>
 8006ec4:	0641      	lsls	r1, r0, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0xe4>
 8006ec8:	881e      	ldrh	r6, [r3, #0]
 8006eca:	4853      	ldr	r0, [pc, #332]	; (8007018 <_printf_i+0x23c>)
 8006ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8006ece:	bf0c      	ite	eq
 8006ed0:	2308      	moveq	r3, #8
 8006ed2:	230a      	movne	r3, #10
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eda:	6865      	ldr	r5, [r4, #4]
 8006edc:	60a5      	str	r5, [r4, #8]
 8006ede:	2d00      	cmp	r5, #0
 8006ee0:	bfa2      	ittt	ge
 8006ee2:	6821      	ldrge	r1, [r4, #0]
 8006ee4:	f021 0104 	bicge.w	r1, r1, #4
 8006ee8:	6021      	strge	r1, [r4, #0]
 8006eea:	b90e      	cbnz	r6, 8006ef0 <_printf_i+0x114>
 8006eec:	2d00      	cmp	r5, #0
 8006eee:	d04b      	beq.n	8006f88 <_printf_i+0x1ac>
 8006ef0:	4615      	mov	r5, r2
 8006ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8006efa:	5dc7      	ldrb	r7, [r0, r7]
 8006efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f00:	4637      	mov	r7, r6
 8006f02:	42bb      	cmp	r3, r7
 8006f04:	460e      	mov	r6, r1
 8006f06:	d9f4      	bls.n	8006ef2 <_printf_i+0x116>
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d10b      	bne.n	8006f24 <_printf_i+0x148>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	07de      	lsls	r6, r3, #31
 8006f10:	d508      	bpl.n	8006f24 <_printf_i+0x148>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	6861      	ldr	r1, [r4, #4]
 8006f16:	4299      	cmp	r1, r3
 8006f18:	bfde      	ittt	le
 8006f1a:	2330      	movle	r3, #48	; 0x30
 8006f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f24:	1b52      	subs	r2, r2, r5
 8006f26:	6122      	str	r2, [r4, #16]
 8006f28:	f8cd a000 	str.w	sl, [sp]
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	aa03      	add	r2, sp, #12
 8006f30:	4621      	mov	r1, r4
 8006f32:	4640      	mov	r0, r8
 8006f34:	f7ff fee4 	bl	8006d00 <_printf_common>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d14a      	bne.n	8006fd2 <_printf_i+0x1f6>
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	b004      	add	sp, #16
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f043 0320 	orr.w	r3, r3, #32
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	4833      	ldr	r0, [pc, #204]	; (800701c <_printf_i+0x240>)
 8006f50:	2778      	movs	r7, #120	; 0x78
 8006f52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	6829      	ldr	r1, [r5, #0]
 8006f5a:	061f      	lsls	r7, r3, #24
 8006f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f60:	d402      	bmi.n	8006f68 <_printf_i+0x18c>
 8006f62:	065f      	lsls	r7, r3, #25
 8006f64:	bf48      	it	mi
 8006f66:	b2b6      	uxthmi	r6, r6
 8006f68:	07df      	lsls	r7, r3, #31
 8006f6a:	bf48      	it	mi
 8006f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f70:	6029      	str	r1, [r5, #0]
 8006f72:	bf48      	it	mi
 8006f74:	6023      	strmi	r3, [r4, #0]
 8006f76:	b91e      	cbnz	r6, 8006f80 <_printf_i+0x1a4>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	f023 0320 	bic.w	r3, r3, #32
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	2310      	movs	r3, #16
 8006f82:	e7a7      	b.n	8006ed4 <_printf_i+0xf8>
 8006f84:	4824      	ldr	r0, [pc, #144]	; (8007018 <_printf_i+0x23c>)
 8006f86:	e7e4      	b.n	8006f52 <_printf_i+0x176>
 8006f88:	4615      	mov	r5, r2
 8006f8a:	e7bd      	b.n	8006f08 <_printf_i+0x12c>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	6826      	ldr	r6, [r4, #0]
 8006f90:	6961      	ldr	r1, [r4, #20]
 8006f92:	1d18      	adds	r0, r3, #4
 8006f94:	6028      	str	r0, [r5, #0]
 8006f96:	0635      	lsls	r5, r6, #24
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	d501      	bpl.n	8006fa0 <_printf_i+0x1c4>
 8006f9c:	6019      	str	r1, [r3, #0]
 8006f9e:	e002      	b.n	8006fa6 <_printf_i+0x1ca>
 8006fa0:	0670      	lsls	r0, r6, #25
 8006fa2:	d5fb      	bpl.n	8006f9c <_printf_i+0x1c0>
 8006fa4:	8019      	strh	r1, [r3, #0]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6123      	str	r3, [r4, #16]
 8006faa:	4615      	mov	r5, r2
 8006fac:	e7bc      	b.n	8006f28 <_printf_i+0x14c>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	1d1a      	adds	r2, r3, #4
 8006fb2:	602a      	str	r2, [r5, #0]
 8006fb4:	681d      	ldr	r5, [r3, #0]
 8006fb6:	6862      	ldr	r2, [r4, #4]
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7f9 f908 	bl	80001d0 <memchr>
 8006fc0:	b108      	cbz	r0, 8006fc6 <_printf_i+0x1ea>
 8006fc2:	1b40      	subs	r0, r0, r5
 8006fc4:	6060      	str	r0, [r4, #4]
 8006fc6:	6863      	ldr	r3, [r4, #4]
 8006fc8:	6123      	str	r3, [r4, #16]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd0:	e7aa      	b.n	8006f28 <_printf_i+0x14c>
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	47d0      	blx	sl
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d0ad      	beq.n	8006f3c <_printf_i+0x160>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	079b      	lsls	r3, r3, #30
 8006fe4:	d413      	bmi.n	800700e <_printf_i+0x232>
 8006fe6:	68e0      	ldr	r0, [r4, #12]
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	4298      	cmp	r0, r3
 8006fec:	bfb8      	it	lt
 8006fee:	4618      	movlt	r0, r3
 8006ff0:	e7a6      	b.n	8006f40 <_printf_i+0x164>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	47d0      	blx	sl
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d09d      	beq.n	8006f3c <_printf_i+0x160>
 8007000:	3501      	adds	r5, #1
 8007002:	68e3      	ldr	r3, [r4, #12]
 8007004:	9903      	ldr	r1, [sp, #12]
 8007006:	1a5b      	subs	r3, r3, r1
 8007008:	42ab      	cmp	r3, r5
 800700a:	dcf2      	bgt.n	8006ff2 <_printf_i+0x216>
 800700c:	e7eb      	b.n	8006fe6 <_printf_i+0x20a>
 800700e:	2500      	movs	r5, #0
 8007010:	f104 0619 	add.w	r6, r4, #25
 8007014:	e7f5      	b.n	8007002 <_printf_i+0x226>
 8007016:	bf00      	nop
 8007018:	0800abc0 	.word	0x0800abc0
 800701c:	0800abd1 	.word	0x0800abd1

08007020 <_scanf_float>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	b087      	sub	sp, #28
 8007026:	4617      	mov	r7, r2
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	688b      	ldr	r3, [r1, #8]
 800702c:	1e5a      	subs	r2, r3, #1
 800702e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007032:	bf83      	ittte	hi
 8007034:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007038:	195b      	addhi	r3, r3, r5
 800703a:	9302      	strhi	r3, [sp, #8]
 800703c:	2300      	movls	r3, #0
 800703e:	bf86      	itte	hi
 8007040:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007044:	608b      	strhi	r3, [r1, #8]
 8007046:	9302      	strls	r3, [sp, #8]
 8007048:	680b      	ldr	r3, [r1, #0]
 800704a:	468b      	mov	fp, r1
 800704c:	2500      	movs	r5, #0
 800704e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007052:	f84b 3b1c 	str.w	r3, [fp], #28
 8007056:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800705a:	4680      	mov	r8, r0
 800705c:	460c      	mov	r4, r1
 800705e:	465e      	mov	r6, fp
 8007060:	46aa      	mov	sl, r5
 8007062:	46a9      	mov	r9, r5
 8007064:	9501      	str	r5, [sp, #4]
 8007066:	68a2      	ldr	r2, [r4, #8]
 8007068:	b152      	cbz	r2, 8007080 <_scanf_float+0x60>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b4e      	cmp	r3, #78	; 0x4e
 8007070:	d864      	bhi.n	800713c <_scanf_float+0x11c>
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d83c      	bhi.n	80070f0 <_scanf_float+0xd0>
 8007076:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800707a:	b2c8      	uxtb	r0, r1
 800707c:	280e      	cmp	r0, #14
 800707e:	d93a      	bls.n	80070f6 <_scanf_float+0xd6>
 8007080:	f1b9 0f00 	cmp.w	r9, #0
 8007084:	d003      	beq.n	800708e <_scanf_float+0x6e>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007092:	f1ba 0f01 	cmp.w	sl, #1
 8007096:	f200 8113 	bhi.w	80072c0 <_scanf_float+0x2a0>
 800709a:	455e      	cmp	r6, fp
 800709c:	f200 8105 	bhi.w	80072aa <_scanf_float+0x28a>
 80070a0:	2501      	movs	r5, #1
 80070a2:	4628      	mov	r0, r5
 80070a4:	b007      	add	sp, #28
 80070a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80070ae:	2a0d      	cmp	r2, #13
 80070b0:	d8e6      	bhi.n	8007080 <_scanf_float+0x60>
 80070b2:	a101      	add	r1, pc, #4	; (adr r1, 80070b8 <_scanf_float+0x98>)
 80070b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070b8:	080071f7 	.word	0x080071f7
 80070bc:	08007081 	.word	0x08007081
 80070c0:	08007081 	.word	0x08007081
 80070c4:	08007081 	.word	0x08007081
 80070c8:	08007257 	.word	0x08007257
 80070cc:	0800722f 	.word	0x0800722f
 80070d0:	08007081 	.word	0x08007081
 80070d4:	08007081 	.word	0x08007081
 80070d8:	08007205 	.word	0x08007205
 80070dc:	08007081 	.word	0x08007081
 80070e0:	08007081 	.word	0x08007081
 80070e4:	08007081 	.word	0x08007081
 80070e8:	08007081 	.word	0x08007081
 80070ec:	080071bd 	.word	0x080071bd
 80070f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070f4:	e7db      	b.n	80070ae <_scanf_float+0x8e>
 80070f6:	290e      	cmp	r1, #14
 80070f8:	d8c2      	bhi.n	8007080 <_scanf_float+0x60>
 80070fa:	a001      	add	r0, pc, #4	; (adr r0, 8007100 <_scanf_float+0xe0>)
 80070fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007100:	080071af 	.word	0x080071af
 8007104:	08007081 	.word	0x08007081
 8007108:	080071af 	.word	0x080071af
 800710c:	08007243 	.word	0x08007243
 8007110:	08007081 	.word	0x08007081
 8007114:	0800715d 	.word	0x0800715d
 8007118:	08007199 	.word	0x08007199
 800711c:	08007199 	.word	0x08007199
 8007120:	08007199 	.word	0x08007199
 8007124:	08007199 	.word	0x08007199
 8007128:	08007199 	.word	0x08007199
 800712c:	08007199 	.word	0x08007199
 8007130:	08007199 	.word	0x08007199
 8007134:	08007199 	.word	0x08007199
 8007138:	08007199 	.word	0x08007199
 800713c:	2b6e      	cmp	r3, #110	; 0x6e
 800713e:	d809      	bhi.n	8007154 <_scanf_float+0x134>
 8007140:	2b60      	cmp	r3, #96	; 0x60
 8007142:	d8b2      	bhi.n	80070aa <_scanf_float+0x8a>
 8007144:	2b54      	cmp	r3, #84	; 0x54
 8007146:	d077      	beq.n	8007238 <_scanf_float+0x218>
 8007148:	2b59      	cmp	r3, #89	; 0x59
 800714a:	d199      	bne.n	8007080 <_scanf_float+0x60>
 800714c:	2d07      	cmp	r5, #7
 800714e:	d197      	bne.n	8007080 <_scanf_float+0x60>
 8007150:	2508      	movs	r5, #8
 8007152:	e029      	b.n	80071a8 <_scanf_float+0x188>
 8007154:	2b74      	cmp	r3, #116	; 0x74
 8007156:	d06f      	beq.n	8007238 <_scanf_float+0x218>
 8007158:	2b79      	cmp	r3, #121	; 0x79
 800715a:	e7f6      	b.n	800714a <_scanf_float+0x12a>
 800715c:	6821      	ldr	r1, [r4, #0]
 800715e:	05c8      	lsls	r0, r1, #23
 8007160:	d51a      	bpl.n	8007198 <_scanf_float+0x178>
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007168:	6021      	str	r1, [r4, #0]
 800716a:	f109 0901 	add.w	r9, r9, #1
 800716e:	b11b      	cbz	r3, 8007178 <_scanf_float+0x158>
 8007170:	3b01      	subs	r3, #1
 8007172:	3201      	adds	r2, #1
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	60a2      	str	r2, [r4, #8]
 8007178:	68a3      	ldr	r3, [r4, #8]
 800717a:	3b01      	subs	r3, #1
 800717c:	60a3      	str	r3, [r4, #8]
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	3301      	adds	r3, #1
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3b01      	subs	r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	607b      	str	r3, [r7, #4]
 800718c:	f340 8084 	ble.w	8007298 <_scanf_float+0x278>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	603b      	str	r3, [r7, #0]
 8007196:	e766      	b.n	8007066 <_scanf_float+0x46>
 8007198:	eb1a 0f05 	cmn.w	sl, r5
 800719c:	f47f af70 	bne.w	8007080 <_scanf_float+0x60>
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80071a6:	6022      	str	r2, [r4, #0]
 80071a8:	f806 3b01 	strb.w	r3, [r6], #1
 80071ac:	e7e4      	b.n	8007178 <_scanf_float+0x158>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	0610      	lsls	r0, r2, #24
 80071b2:	f57f af65 	bpl.w	8007080 <_scanf_float+0x60>
 80071b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071ba:	e7f4      	b.n	80071a6 <_scanf_float+0x186>
 80071bc:	f1ba 0f00 	cmp.w	sl, #0
 80071c0:	d10e      	bne.n	80071e0 <_scanf_float+0x1c0>
 80071c2:	f1b9 0f00 	cmp.w	r9, #0
 80071c6:	d10e      	bne.n	80071e6 <_scanf_float+0x1c6>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071d2:	d108      	bne.n	80071e6 <_scanf_float+0x1c6>
 80071d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071d8:	6022      	str	r2, [r4, #0]
 80071da:	f04f 0a01 	mov.w	sl, #1
 80071de:	e7e3      	b.n	80071a8 <_scanf_float+0x188>
 80071e0:	f1ba 0f02 	cmp.w	sl, #2
 80071e4:	d055      	beq.n	8007292 <_scanf_float+0x272>
 80071e6:	2d01      	cmp	r5, #1
 80071e8:	d002      	beq.n	80071f0 <_scanf_float+0x1d0>
 80071ea:	2d04      	cmp	r5, #4
 80071ec:	f47f af48 	bne.w	8007080 <_scanf_float+0x60>
 80071f0:	3501      	adds	r5, #1
 80071f2:	b2ed      	uxtb	r5, r5
 80071f4:	e7d8      	b.n	80071a8 <_scanf_float+0x188>
 80071f6:	f1ba 0f01 	cmp.w	sl, #1
 80071fa:	f47f af41 	bne.w	8007080 <_scanf_float+0x60>
 80071fe:	f04f 0a02 	mov.w	sl, #2
 8007202:	e7d1      	b.n	80071a8 <_scanf_float+0x188>
 8007204:	b97d      	cbnz	r5, 8007226 <_scanf_float+0x206>
 8007206:	f1b9 0f00 	cmp.w	r9, #0
 800720a:	f47f af3c 	bne.w	8007086 <_scanf_float+0x66>
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007214:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007218:	f47f af39 	bne.w	800708e <_scanf_float+0x6e>
 800721c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007220:	6022      	str	r2, [r4, #0]
 8007222:	2501      	movs	r5, #1
 8007224:	e7c0      	b.n	80071a8 <_scanf_float+0x188>
 8007226:	2d03      	cmp	r5, #3
 8007228:	d0e2      	beq.n	80071f0 <_scanf_float+0x1d0>
 800722a:	2d05      	cmp	r5, #5
 800722c:	e7de      	b.n	80071ec <_scanf_float+0x1cc>
 800722e:	2d02      	cmp	r5, #2
 8007230:	f47f af26 	bne.w	8007080 <_scanf_float+0x60>
 8007234:	2503      	movs	r5, #3
 8007236:	e7b7      	b.n	80071a8 <_scanf_float+0x188>
 8007238:	2d06      	cmp	r5, #6
 800723a:	f47f af21 	bne.w	8007080 <_scanf_float+0x60>
 800723e:	2507      	movs	r5, #7
 8007240:	e7b2      	b.n	80071a8 <_scanf_float+0x188>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	0591      	lsls	r1, r2, #22
 8007246:	f57f af1b 	bpl.w	8007080 <_scanf_float+0x60>
 800724a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800724e:	6022      	str	r2, [r4, #0]
 8007250:	f8cd 9004 	str.w	r9, [sp, #4]
 8007254:	e7a8      	b.n	80071a8 <_scanf_float+0x188>
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800725c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007260:	d006      	beq.n	8007270 <_scanf_float+0x250>
 8007262:	0550      	lsls	r0, r2, #21
 8007264:	f57f af0c 	bpl.w	8007080 <_scanf_float+0x60>
 8007268:	f1b9 0f00 	cmp.w	r9, #0
 800726c:	f43f af0f 	beq.w	800708e <_scanf_float+0x6e>
 8007270:	0591      	lsls	r1, r2, #22
 8007272:	bf58      	it	pl
 8007274:	9901      	ldrpl	r1, [sp, #4]
 8007276:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800727a:	bf58      	it	pl
 800727c:	eba9 0101 	subpl.w	r1, r9, r1
 8007280:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007284:	bf58      	it	pl
 8007286:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800728a:	6022      	str	r2, [r4, #0]
 800728c:	f04f 0900 	mov.w	r9, #0
 8007290:	e78a      	b.n	80071a8 <_scanf_float+0x188>
 8007292:	f04f 0a03 	mov.w	sl, #3
 8007296:	e787      	b.n	80071a8 <_scanf_float+0x188>
 8007298:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800729c:	4639      	mov	r1, r7
 800729e:	4640      	mov	r0, r8
 80072a0:	4798      	blx	r3
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f43f aedf 	beq.w	8007066 <_scanf_float+0x46>
 80072a8:	e6ea      	b.n	8007080 <_scanf_float+0x60>
 80072aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072b2:	463a      	mov	r2, r7
 80072b4:	4640      	mov	r0, r8
 80072b6:	4798      	blx	r3
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	e6ec      	b.n	800709a <_scanf_float+0x7a>
 80072c0:	1e6b      	subs	r3, r5, #1
 80072c2:	2b06      	cmp	r3, #6
 80072c4:	d825      	bhi.n	8007312 <_scanf_float+0x2f2>
 80072c6:	2d02      	cmp	r5, #2
 80072c8:	d836      	bhi.n	8007338 <_scanf_float+0x318>
 80072ca:	455e      	cmp	r6, fp
 80072cc:	f67f aee8 	bls.w	80070a0 <_scanf_float+0x80>
 80072d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072d8:	463a      	mov	r2, r7
 80072da:	4640      	mov	r0, r8
 80072dc:	4798      	blx	r3
 80072de:	6923      	ldr	r3, [r4, #16]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	6123      	str	r3, [r4, #16]
 80072e4:	e7f1      	b.n	80072ca <_scanf_float+0x2aa>
 80072e6:	9802      	ldr	r0, [sp, #8]
 80072e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072f0:	9002      	str	r0, [sp, #8]
 80072f2:	463a      	mov	r2, r7
 80072f4:	4640      	mov	r0, r8
 80072f6:	4798      	blx	r3
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	6123      	str	r3, [r4, #16]
 80072fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007302:	fa5f fa8a 	uxtb.w	sl, sl
 8007306:	f1ba 0f02 	cmp.w	sl, #2
 800730a:	d1ec      	bne.n	80072e6 <_scanf_float+0x2c6>
 800730c:	3d03      	subs	r5, #3
 800730e:	b2ed      	uxtb	r5, r5
 8007310:	1b76      	subs	r6, r6, r5
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	05da      	lsls	r2, r3, #23
 8007316:	d52f      	bpl.n	8007378 <_scanf_float+0x358>
 8007318:	055b      	lsls	r3, r3, #21
 800731a:	d510      	bpl.n	800733e <_scanf_float+0x31e>
 800731c:	455e      	cmp	r6, fp
 800731e:	f67f aebf 	bls.w	80070a0 <_scanf_float+0x80>
 8007322:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800732a:	463a      	mov	r2, r7
 800732c:	4640      	mov	r0, r8
 800732e:	4798      	blx	r3
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	3b01      	subs	r3, #1
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	e7f1      	b.n	800731c <_scanf_float+0x2fc>
 8007338:	46aa      	mov	sl, r5
 800733a:	9602      	str	r6, [sp, #8]
 800733c:	e7df      	b.n	80072fe <_scanf_float+0x2de>
 800733e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	2965      	cmp	r1, #101	; 0x65
 8007346:	f103 33ff 	add.w	r3, r3, #4294967295
 800734a:	f106 35ff 	add.w	r5, r6, #4294967295
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	d00c      	beq.n	800736c <_scanf_float+0x34c>
 8007352:	2945      	cmp	r1, #69	; 0x45
 8007354:	d00a      	beq.n	800736c <_scanf_float+0x34c>
 8007356:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800735a:	463a      	mov	r2, r7
 800735c:	4640      	mov	r0, r8
 800735e:	4798      	blx	r3
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007366:	3b01      	subs	r3, #1
 8007368:	1eb5      	subs	r5, r6, #2
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007370:	463a      	mov	r2, r7
 8007372:	4640      	mov	r0, r8
 8007374:	4798      	blx	r3
 8007376:	462e      	mov	r6, r5
 8007378:	6825      	ldr	r5, [r4, #0]
 800737a:	f015 0510 	ands.w	r5, r5, #16
 800737e:	d158      	bne.n	8007432 <_scanf_float+0x412>
 8007380:	7035      	strb	r5, [r6, #0]
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738c:	d11c      	bne.n	80073c8 <_scanf_float+0x3a8>
 800738e:	9b01      	ldr	r3, [sp, #4]
 8007390:	454b      	cmp	r3, r9
 8007392:	eba3 0209 	sub.w	r2, r3, r9
 8007396:	d124      	bne.n	80073e2 <_scanf_float+0x3c2>
 8007398:	2200      	movs	r2, #0
 800739a:	4659      	mov	r1, fp
 800739c:	4640      	mov	r0, r8
 800739e:	f7ff f963 	bl	8006668 <_strtod_r>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	6821      	ldr	r1, [r4, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f011 0f02 	tst.w	r1, #2
 80073ac:	ec57 6b10 	vmov	r6, r7, d0
 80073b0:	f103 0204 	add.w	r2, r3, #4
 80073b4:	d020      	beq.n	80073f8 <_scanf_float+0x3d8>
 80073b6:	9903      	ldr	r1, [sp, #12]
 80073b8:	600a      	str	r2, [r1, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	e9c3 6700 	strd	r6, r7, [r3]
 80073c0:	68e3      	ldr	r3, [r4, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60e3      	str	r3, [r4, #12]
 80073c6:	e66c      	b.n	80070a2 <_scanf_float+0x82>
 80073c8:	9b04      	ldr	r3, [sp, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0e4      	beq.n	8007398 <_scanf_float+0x378>
 80073ce:	9905      	ldr	r1, [sp, #20]
 80073d0:	230a      	movs	r3, #10
 80073d2:	462a      	mov	r2, r5
 80073d4:	3101      	adds	r1, #1
 80073d6:	4640      	mov	r0, r8
 80073d8:	f002 f9c6 	bl	8009768 <_strtol_r>
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	9e05      	ldr	r6, [sp, #20]
 80073e0:	1ac2      	subs	r2, r0, r3
 80073e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073e6:	429e      	cmp	r6, r3
 80073e8:	bf28      	it	cs
 80073ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073ee:	4912      	ldr	r1, [pc, #72]	; (8007438 <_scanf_float+0x418>)
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 f8e7 	bl	80075c4 <siprintf>
 80073f6:	e7cf      	b.n	8007398 <_scanf_float+0x378>
 80073f8:	f011 0f04 	tst.w	r1, #4
 80073fc:	9903      	ldr	r1, [sp, #12]
 80073fe:	600a      	str	r2, [r1, #0]
 8007400:	d1db      	bne.n	80073ba <_scanf_float+0x39a>
 8007402:	f8d3 8000 	ldr.w	r8, [r3]
 8007406:	ee10 2a10 	vmov	r2, s0
 800740a:	ee10 0a10 	vmov	r0, s0
 800740e:	463b      	mov	r3, r7
 8007410:	4639      	mov	r1, r7
 8007412:	f7f9 fb8b 	bl	8000b2c <__aeabi_dcmpun>
 8007416:	b128      	cbz	r0, 8007424 <_scanf_float+0x404>
 8007418:	4808      	ldr	r0, [pc, #32]	; (800743c <_scanf_float+0x41c>)
 800741a:	f000 fa3d 	bl	8007898 <nanf>
 800741e:	ed88 0a00 	vstr	s0, [r8]
 8007422:	e7cd      	b.n	80073c0 <_scanf_float+0x3a0>
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f9 fbde 	bl	8000be8 <__aeabi_d2f>
 800742c:	f8c8 0000 	str.w	r0, [r8]
 8007430:	e7c6      	b.n	80073c0 <_scanf_float+0x3a0>
 8007432:	2500      	movs	r5, #0
 8007434:	e635      	b.n	80070a2 <_scanf_float+0x82>
 8007436:	bf00      	nop
 8007438:	0800abe2 	.word	0x0800abe2
 800743c:	0800af9c 	.word	0x0800af9c

08007440 <std>:
 8007440:	2300      	movs	r3, #0
 8007442:	b510      	push	{r4, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	e9c0 3300 	strd	r3, r3, [r0]
 800744a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800744e:	6083      	str	r3, [r0, #8]
 8007450:	8181      	strh	r1, [r0, #12]
 8007452:	6643      	str	r3, [r0, #100]	; 0x64
 8007454:	81c2      	strh	r2, [r0, #14]
 8007456:	6183      	str	r3, [r0, #24]
 8007458:	4619      	mov	r1, r3
 800745a:	2208      	movs	r2, #8
 800745c:	305c      	adds	r0, #92	; 0x5c
 800745e:	f000 f942 	bl	80076e6 <memset>
 8007462:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <std+0x58>)
 8007464:	6263      	str	r3, [r4, #36]	; 0x24
 8007466:	4b0d      	ldr	r3, [pc, #52]	; (800749c <std+0x5c>)
 8007468:	62a3      	str	r3, [r4, #40]	; 0x28
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <std+0x60>)
 800746c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <std+0x64>)
 8007470:	6323      	str	r3, [r4, #48]	; 0x30
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <std+0x68>)
 8007474:	6224      	str	r4, [r4, #32]
 8007476:	429c      	cmp	r4, r3
 8007478:	d006      	beq.n	8007488 <std+0x48>
 800747a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800747e:	4294      	cmp	r4, r2
 8007480:	d002      	beq.n	8007488 <std+0x48>
 8007482:	33d0      	adds	r3, #208	; 0xd0
 8007484:	429c      	cmp	r4, r3
 8007486:	d105      	bne.n	8007494 <std+0x54>
 8007488:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800748c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007490:	f000 b9e8 	b.w	8007864 <__retarget_lock_init_recursive>
 8007494:	bd10      	pop	{r4, pc}
 8007496:	bf00      	nop
 8007498:	0800765d 	.word	0x0800765d
 800749c:	08007683 	.word	0x08007683
 80074a0:	080076bb 	.word	0x080076bb
 80074a4:	080076df 	.word	0x080076df
 80074a8:	20000418 	.word	0x20000418

080074ac <stdio_exit_handler>:
 80074ac:	4a02      	ldr	r2, [pc, #8]	; (80074b8 <stdio_exit_handler+0xc>)
 80074ae:	4903      	ldr	r1, [pc, #12]	; (80074bc <stdio_exit_handler+0x10>)
 80074b0:	4803      	ldr	r0, [pc, #12]	; (80074c0 <stdio_exit_handler+0x14>)
 80074b2:	f000 b869 	b.w	8007588 <_fwalk_sglue>
 80074b6:	bf00      	nop
 80074b8:	2000005c 	.word	0x2000005c
 80074bc:	0800a185 	.word	0x0800a185
 80074c0:	200001d4 	.word	0x200001d4

080074c4 <cleanup_stdio>:
 80074c4:	6841      	ldr	r1, [r0, #4]
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <cleanup_stdio+0x34>)
 80074c8:	4299      	cmp	r1, r3
 80074ca:	b510      	push	{r4, lr}
 80074cc:	4604      	mov	r4, r0
 80074ce:	d001      	beq.n	80074d4 <cleanup_stdio+0x10>
 80074d0:	f002 fe58 	bl	800a184 <_fflush_r>
 80074d4:	68a1      	ldr	r1, [r4, #8]
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <cleanup_stdio+0x38>)
 80074d8:	4299      	cmp	r1, r3
 80074da:	d002      	beq.n	80074e2 <cleanup_stdio+0x1e>
 80074dc:	4620      	mov	r0, r4
 80074de:	f002 fe51 	bl	800a184 <_fflush_r>
 80074e2:	68e1      	ldr	r1, [r4, #12]
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <cleanup_stdio+0x3c>)
 80074e6:	4299      	cmp	r1, r3
 80074e8:	d004      	beq.n	80074f4 <cleanup_stdio+0x30>
 80074ea:	4620      	mov	r0, r4
 80074ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f0:	f002 be48 	b.w	800a184 <_fflush_r>
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	bf00      	nop
 80074f8:	20000418 	.word	0x20000418
 80074fc:	20000480 	.word	0x20000480
 8007500:	200004e8 	.word	0x200004e8

08007504 <global_stdio_init.part.0>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <global_stdio_init.part.0+0x30>)
 8007508:	4c0b      	ldr	r4, [pc, #44]	; (8007538 <global_stdio_init.part.0+0x34>)
 800750a:	4a0c      	ldr	r2, [pc, #48]	; (800753c <global_stdio_init.part.0+0x38>)
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	4620      	mov	r0, r4
 8007510:	2200      	movs	r2, #0
 8007512:	2104      	movs	r1, #4
 8007514:	f7ff ff94 	bl	8007440 <std>
 8007518:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800751c:	2201      	movs	r2, #1
 800751e:	2109      	movs	r1, #9
 8007520:	f7ff ff8e 	bl	8007440 <std>
 8007524:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007528:	2202      	movs	r2, #2
 800752a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800752e:	2112      	movs	r1, #18
 8007530:	f7ff bf86 	b.w	8007440 <std>
 8007534:	20000550 	.word	0x20000550
 8007538:	20000418 	.word	0x20000418
 800753c:	080074ad 	.word	0x080074ad

08007540 <__sfp_lock_acquire>:
 8007540:	4801      	ldr	r0, [pc, #4]	; (8007548 <__sfp_lock_acquire+0x8>)
 8007542:	f000 b990 	b.w	8007866 <__retarget_lock_acquire_recursive>
 8007546:	bf00      	nop
 8007548:	20000559 	.word	0x20000559

0800754c <__sfp_lock_release>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__sfp_lock_release+0x8>)
 800754e:	f000 b98b 	b.w	8007868 <__retarget_lock_release_recursive>
 8007552:	bf00      	nop
 8007554:	20000559 	.word	0x20000559

08007558 <__sinit>:
 8007558:	b510      	push	{r4, lr}
 800755a:	4604      	mov	r4, r0
 800755c:	f7ff fff0 	bl	8007540 <__sfp_lock_acquire>
 8007560:	6a23      	ldr	r3, [r4, #32]
 8007562:	b11b      	cbz	r3, 800756c <__sinit+0x14>
 8007564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007568:	f7ff bff0 	b.w	800754c <__sfp_lock_release>
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <__sinit+0x28>)
 800756e:	6223      	str	r3, [r4, #32]
 8007570:	4b04      	ldr	r3, [pc, #16]	; (8007584 <__sinit+0x2c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f5      	bne.n	8007564 <__sinit+0xc>
 8007578:	f7ff ffc4 	bl	8007504 <global_stdio_init.part.0>
 800757c:	e7f2      	b.n	8007564 <__sinit+0xc>
 800757e:	bf00      	nop
 8007580:	080074c5 	.word	0x080074c5
 8007584:	20000550 	.word	0x20000550

08007588 <_fwalk_sglue>:
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	4607      	mov	r7, r0
 800758e:	4688      	mov	r8, r1
 8007590:	4614      	mov	r4, r2
 8007592:	2600      	movs	r6, #0
 8007594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007598:	f1b9 0901 	subs.w	r9, r9, #1
 800759c:	d505      	bpl.n	80075aa <_fwalk_sglue+0x22>
 800759e:	6824      	ldr	r4, [r4, #0]
 80075a0:	2c00      	cmp	r4, #0
 80075a2:	d1f7      	bne.n	8007594 <_fwalk_sglue+0xc>
 80075a4:	4630      	mov	r0, r6
 80075a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d907      	bls.n	80075c0 <_fwalk_sglue+0x38>
 80075b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075b4:	3301      	adds	r3, #1
 80075b6:	d003      	beq.n	80075c0 <_fwalk_sglue+0x38>
 80075b8:	4629      	mov	r1, r5
 80075ba:	4638      	mov	r0, r7
 80075bc:	47c0      	blx	r8
 80075be:	4306      	orrs	r6, r0
 80075c0:	3568      	adds	r5, #104	; 0x68
 80075c2:	e7e9      	b.n	8007598 <_fwalk_sglue+0x10>

080075c4 <siprintf>:
 80075c4:	b40e      	push	{r1, r2, r3}
 80075c6:	b500      	push	{lr}
 80075c8:	b09c      	sub	sp, #112	; 0x70
 80075ca:	ab1d      	add	r3, sp, #116	; 0x74
 80075cc:	9002      	str	r0, [sp, #8]
 80075ce:	9006      	str	r0, [sp, #24]
 80075d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075d4:	4809      	ldr	r0, [pc, #36]	; (80075fc <siprintf+0x38>)
 80075d6:	9107      	str	r1, [sp, #28]
 80075d8:	9104      	str	r1, [sp, #16]
 80075da:	4909      	ldr	r1, [pc, #36]	; (8007600 <siprintf+0x3c>)
 80075dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e0:	9105      	str	r1, [sp, #20]
 80075e2:	6800      	ldr	r0, [r0, #0]
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	a902      	add	r1, sp, #8
 80075e8:	f002 f928 	bl	800983c <_svfiprintf_r>
 80075ec:	9b02      	ldr	r3, [sp, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	b01c      	add	sp, #112	; 0x70
 80075f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075f8:	b003      	add	sp, #12
 80075fa:	4770      	bx	lr
 80075fc:	20000220 	.word	0x20000220
 8007600:	ffff0208 	.word	0xffff0208

08007604 <siscanf>:
 8007604:	b40e      	push	{r1, r2, r3}
 8007606:	b510      	push	{r4, lr}
 8007608:	b09f      	sub	sp, #124	; 0x7c
 800760a:	ac21      	add	r4, sp, #132	; 0x84
 800760c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007610:	f854 2b04 	ldr.w	r2, [r4], #4
 8007614:	9201      	str	r2, [sp, #4]
 8007616:	f8ad 101c 	strh.w	r1, [sp, #28]
 800761a:	9004      	str	r0, [sp, #16]
 800761c:	9008      	str	r0, [sp, #32]
 800761e:	f7f8 fe27 	bl	8000270 <strlen>
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <siscanf+0x50>)
 8007624:	9005      	str	r0, [sp, #20]
 8007626:	9009      	str	r0, [sp, #36]	; 0x24
 8007628:	930d      	str	r3, [sp, #52]	; 0x34
 800762a:	480b      	ldr	r0, [pc, #44]	; (8007658 <siscanf+0x54>)
 800762c:	9a01      	ldr	r2, [sp, #4]
 800762e:	6800      	ldr	r0, [r0, #0]
 8007630:	9403      	str	r4, [sp, #12]
 8007632:	2300      	movs	r3, #0
 8007634:	9311      	str	r3, [sp, #68]	; 0x44
 8007636:	9316      	str	r3, [sp, #88]	; 0x58
 8007638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800763c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007640:	a904      	add	r1, sp, #16
 8007642:	4623      	mov	r3, r4
 8007644:	f002 fa52 	bl	8009aec <__ssvfiscanf_r>
 8007648:	b01f      	add	sp, #124	; 0x7c
 800764a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764e:	b003      	add	sp, #12
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	0800767f 	.word	0x0800767f
 8007658:	20000220 	.word	0x20000220

0800765c <__sread>:
 800765c:	b510      	push	{r4, lr}
 800765e:	460c      	mov	r4, r1
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	f000 f8a0 	bl	80077a8 <_read_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	bfab      	itete	ge
 800766c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800766e:	89a3      	ldrhlt	r3, [r4, #12]
 8007670:	181b      	addge	r3, r3, r0
 8007672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007676:	bfac      	ite	ge
 8007678:	6563      	strge	r3, [r4, #84]	; 0x54
 800767a:	81a3      	strhlt	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__seofread>:
 800767e:	2000      	movs	r0, #0
 8007680:	4770      	bx	lr

08007682 <__swrite>:
 8007682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007686:	461f      	mov	r7, r3
 8007688:	898b      	ldrh	r3, [r1, #12]
 800768a:	05db      	lsls	r3, r3, #23
 800768c:	4605      	mov	r5, r0
 800768e:	460c      	mov	r4, r1
 8007690:	4616      	mov	r6, r2
 8007692:	d505      	bpl.n	80076a0 <__swrite+0x1e>
 8007694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007698:	2302      	movs	r3, #2
 800769a:	2200      	movs	r2, #0
 800769c:	f000 f872 	bl	8007784 <_lseek_r>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076aa:	81a3      	strh	r3, [r4, #12]
 80076ac:	4632      	mov	r2, r6
 80076ae:	463b      	mov	r3, r7
 80076b0:	4628      	mov	r0, r5
 80076b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b6:	f000 b899 	b.w	80077ec <_write_r>

080076ba <__sseek>:
 80076ba:	b510      	push	{r4, lr}
 80076bc:	460c      	mov	r4, r1
 80076be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c2:	f000 f85f 	bl	8007784 <_lseek_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	bf15      	itete	ne
 80076cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076d6:	81a3      	strheq	r3, [r4, #12]
 80076d8:	bf18      	it	ne
 80076da:	81a3      	strhne	r3, [r4, #12]
 80076dc:	bd10      	pop	{r4, pc}

080076de <__sclose>:
 80076de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e2:	f000 b83f 	b.w	8007764 <_close_r>

080076e6 <memset>:
 80076e6:	4402      	add	r2, r0
 80076e8:	4603      	mov	r3, r0
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d100      	bne.n	80076f0 <memset+0xa>
 80076ee:	4770      	bx	lr
 80076f0:	f803 1b01 	strb.w	r1, [r3], #1
 80076f4:	e7f9      	b.n	80076ea <memset+0x4>

080076f6 <strchr>:
 80076f6:	b2c9      	uxtb	r1, r1
 80076f8:	4603      	mov	r3, r0
 80076fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076fe:	b11a      	cbz	r2, 8007708 <strchr+0x12>
 8007700:	428a      	cmp	r2, r1
 8007702:	d1f9      	bne.n	80076f8 <strchr+0x2>
 8007704:	4618      	mov	r0, r3
 8007706:	4770      	bx	lr
 8007708:	2900      	cmp	r1, #0
 800770a:	bf18      	it	ne
 800770c:	2300      	movne	r3, #0
 800770e:	e7f9      	b.n	8007704 <strchr+0xe>

08007710 <strncmp>:
 8007710:	b510      	push	{r4, lr}
 8007712:	b16a      	cbz	r2, 8007730 <strncmp+0x20>
 8007714:	3901      	subs	r1, #1
 8007716:	1884      	adds	r4, r0, r2
 8007718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007720:	429a      	cmp	r2, r3
 8007722:	d103      	bne.n	800772c <strncmp+0x1c>
 8007724:	42a0      	cmp	r0, r4
 8007726:	d001      	beq.n	800772c <strncmp+0x1c>
 8007728:	2a00      	cmp	r2, #0
 800772a:	d1f5      	bne.n	8007718 <strncmp+0x8>
 800772c:	1ad0      	subs	r0, r2, r3
 800772e:	bd10      	pop	{r4, pc}
 8007730:	4610      	mov	r0, r2
 8007732:	e7fc      	b.n	800772e <strncmp+0x1e>

08007734 <strncpy>:
 8007734:	b510      	push	{r4, lr}
 8007736:	3901      	subs	r1, #1
 8007738:	4603      	mov	r3, r0
 800773a:	b132      	cbz	r2, 800774a <strncpy+0x16>
 800773c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007740:	f803 4b01 	strb.w	r4, [r3], #1
 8007744:	3a01      	subs	r2, #1
 8007746:	2c00      	cmp	r4, #0
 8007748:	d1f7      	bne.n	800773a <strncpy+0x6>
 800774a:	441a      	add	r2, r3
 800774c:	2100      	movs	r1, #0
 800774e:	4293      	cmp	r3, r2
 8007750:	d100      	bne.n	8007754 <strncpy+0x20>
 8007752:	bd10      	pop	{r4, pc}
 8007754:	f803 1b01 	strb.w	r1, [r3], #1
 8007758:	e7f9      	b.n	800774e <strncpy+0x1a>
	...

0800775c <_localeconv_r>:
 800775c:	4800      	ldr	r0, [pc, #0]	; (8007760 <_localeconv_r+0x4>)
 800775e:	4770      	bx	lr
 8007760:	20000158 	.word	0x20000158

08007764 <_close_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d06      	ldr	r5, [pc, #24]	; (8007780 <_close_r+0x1c>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f7fa fb75 	bl	8001e5e <_close>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_close_r+0x1a>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_close_r+0x1a>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20000554 	.word	0x20000554

08007784 <_lseek_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d07      	ldr	r5, [pc, #28]	; (80077a4 <_lseek_r+0x20>)
 8007788:	4604      	mov	r4, r0
 800778a:	4608      	mov	r0, r1
 800778c:	4611      	mov	r1, r2
 800778e:	2200      	movs	r2, #0
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7fa fb8a 	bl	8001eac <_lseek>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_lseek_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_lseek_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20000554 	.word	0x20000554

080077a8 <_read_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d07      	ldr	r5, [pc, #28]	; (80077c8 <_read_r+0x20>)
 80077ac:	4604      	mov	r4, r0
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7fa fb18 	bl	8001dec <_read>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_read_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_read_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	20000554 	.word	0x20000554

080077cc <_sbrk_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d06      	ldr	r5, [pc, #24]	; (80077e8 <_sbrk_r+0x1c>)
 80077d0:	2300      	movs	r3, #0
 80077d2:	4604      	mov	r4, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f7fa fb76 	bl	8001ec8 <_sbrk>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_sbrk_r+0x1a>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_sbrk_r+0x1a>
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20000554 	.word	0x20000554

080077ec <_write_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d07      	ldr	r5, [pc, #28]	; (800780c <_write_r+0x20>)
 80077f0:	4604      	mov	r4, r0
 80077f2:	4608      	mov	r0, r1
 80077f4:	4611      	mov	r1, r2
 80077f6:	2200      	movs	r2, #0
 80077f8:	602a      	str	r2, [r5, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	f7fa fb13 	bl	8001e26 <_write>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_write_r+0x1e>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_write_r+0x1e>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000554 	.word	0x20000554

08007810 <__errno>:
 8007810:	4b01      	ldr	r3, [pc, #4]	; (8007818 <__errno+0x8>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	20000220 	.word	0x20000220

0800781c <__libc_init_array>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4d0d      	ldr	r5, [pc, #52]	; (8007854 <__libc_init_array+0x38>)
 8007820:	4c0d      	ldr	r4, [pc, #52]	; (8007858 <__libc_init_array+0x3c>)
 8007822:	1b64      	subs	r4, r4, r5
 8007824:	10a4      	asrs	r4, r4, #2
 8007826:	2600      	movs	r6, #0
 8007828:	42a6      	cmp	r6, r4
 800782a:	d109      	bne.n	8007840 <__libc_init_array+0x24>
 800782c:	4d0b      	ldr	r5, [pc, #44]	; (800785c <__libc_init_array+0x40>)
 800782e:	4c0c      	ldr	r4, [pc, #48]	; (8007860 <__libc_init_array+0x44>)
 8007830:	f003 f8f8 	bl	800aa24 <_init>
 8007834:	1b64      	subs	r4, r4, r5
 8007836:	10a4      	asrs	r4, r4, #2
 8007838:	2600      	movs	r6, #0
 800783a:	42a6      	cmp	r6, r4
 800783c:	d105      	bne.n	800784a <__libc_init_array+0x2e>
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	f855 3b04 	ldr.w	r3, [r5], #4
 8007844:	4798      	blx	r3
 8007846:	3601      	adds	r6, #1
 8007848:	e7ee      	b.n	8007828 <__libc_init_array+0xc>
 800784a:	f855 3b04 	ldr.w	r3, [r5], #4
 800784e:	4798      	blx	r3
 8007850:	3601      	adds	r6, #1
 8007852:	e7f2      	b.n	800783a <__libc_init_array+0x1e>
 8007854:	0800afa0 	.word	0x0800afa0
 8007858:	0800afa0 	.word	0x0800afa0
 800785c:	0800afa0 	.word	0x0800afa0
 8007860:	0800afa4 	.word	0x0800afa4

08007864 <__retarget_lock_init_recursive>:
 8007864:	4770      	bx	lr

08007866 <__retarget_lock_acquire_recursive>:
 8007866:	4770      	bx	lr

08007868 <__retarget_lock_release_recursive>:
 8007868:	4770      	bx	lr

0800786a <memcpy>:
 800786a:	440a      	add	r2, r1
 800786c:	4291      	cmp	r1, r2
 800786e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007872:	d100      	bne.n	8007876 <memcpy+0xc>
 8007874:	4770      	bx	lr
 8007876:	b510      	push	{r4, lr}
 8007878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800787c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007880:	4291      	cmp	r1, r2
 8007882:	d1f9      	bne.n	8007878 <memcpy+0xe>
 8007884:	bd10      	pop	{r4, pc}
	...

08007888 <nan>:
 8007888:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007890 <nan+0x8>
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	00000000 	.word	0x00000000
 8007894:	7ff80000 	.word	0x7ff80000

08007898 <nanf>:
 8007898:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80078a0 <nanf+0x8>
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	7fc00000 	.word	0x7fc00000

080078a4 <quorem>:
 80078a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	6903      	ldr	r3, [r0, #16]
 80078aa:	690c      	ldr	r4, [r1, #16]
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	4607      	mov	r7, r0
 80078b0:	db7e      	blt.n	80079b0 <quorem+0x10c>
 80078b2:	3c01      	subs	r4, #1
 80078b4:	f101 0814 	add.w	r8, r1, #20
 80078b8:	f100 0514 	add.w	r5, r0, #20
 80078bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ca:	3301      	adds	r3, #1
 80078cc:	429a      	cmp	r2, r3
 80078ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80078da:	d331      	bcc.n	8007940 <quorem+0x9c>
 80078dc:	f04f 0e00 	mov.w	lr, #0
 80078e0:	4640      	mov	r0, r8
 80078e2:	46ac      	mov	ip, r5
 80078e4:	46f2      	mov	sl, lr
 80078e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80078ea:	b293      	uxth	r3, r2
 80078ec:	fb06 e303 	mla	r3, r6, r3, lr
 80078f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078f4:	0c1a      	lsrs	r2, r3, #16
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ebaa 0303 	sub.w	r3, sl, r3
 80078fc:	f8dc a000 	ldr.w	sl, [ip]
 8007900:	fa13 f38a 	uxtah	r3, r3, sl
 8007904:	fb06 220e 	mla	r2, r6, lr, r2
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007910:	b292      	uxth	r2, r2
 8007912:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007916:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800791a:	f8bd 3000 	ldrh.w	r3, [sp]
 800791e:	4581      	cmp	r9, r0
 8007920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007924:	f84c 3b04 	str.w	r3, [ip], #4
 8007928:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800792c:	d2db      	bcs.n	80078e6 <quorem+0x42>
 800792e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007932:	b92b      	cbnz	r3, 8007940 <quorem+0x9c>
 8007934:	9b01      	ldr	r3, [sp, #4]
 8007936:	3b04      	subs	r3, #4
 8007938:	429d      	cmp	r5, r3
 800793a:	461a      	mov	r2, r3
 800793c:	d32c      	bcc.n	8007998 <quorem+0xf4>
 800793e:	613c      	str	r4, [r7, #16]
 8007940:	4638      	mov	r0, r7
 8007942:	f001 fca7 	bl	8009294 <__mcmp>
 8007946:	2800      	cmp	r0, #0
 8007948:	db22      	blt.n	8007990 <quorem+0xec>
 800794a:	3601      	adds	r6, #1
 800794c:	4629      	mov	r1, r5
 800794e:	2000      	movs	r0, #0
 8007950:	f858 2b04 	ldr.w	r2, [r8], #4
 8007954:	f8d1 c000 	ldr.w	ip, [r1]
 8007958:	b293      	uxth	r3, r2
 800795a:	1ac3      	subs	r3, r0, r3
 800795c:	0c12      	lsrs	r2, r2, #16
 800795e:	fa13 f38c 	uxtah	r3, r3, ip
 8007962:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007966:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800796a:	b29b      	uxth	r3, r3
 800796c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007970:	45c1      	cmp	r9, r8
 8007972:	f841 3b04 	str.w	r3, [r1], #4
 8007976:	ea4f 4022 	mov.w	r0, r2, asr #16
 800797a:	d2e9      	bcs.n	8007950 <quorem+0xac>
 800797c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007980:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007984:	b922      	cbnz	r2, 8007990 <quorem+0xec>
 8007986:	3b04      	subs	r3, #4
 8007988:	429d      	cmp	r5, r3
 800798a:	461a      	mov	r2, r3
 800798c:	d30a      	bcc.n	80079a4 <quorem+0x100>
 800798e:	613c      	str	r4, [r7, #16]
 8007990:	4630      	mov	r0, r6
 8007992:	b003      	add	sp, #12
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	3b04      	subs	r3, #4
 800799c:	2a00      	cmp	r2, #0
 800799e:	d1ce      	bne.n	800793e <quorem+0x9a>
 80079a0:	3c01      	subs	r4, #1
 80079a2:	e7c9      	b.n	8007938 <quorem+0x94>
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	3b04      	subs	r3, #4
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d1f0      	bne.n	800798e <quorem+0xea>
 80079ac:	3c01      	subs	r4, #1
 80079ae:	e7eb      	b.n	8007988 <quorem+0xe4>
 80079b0:	2000      	movs	r0, #0
 80079b2:	e7ee      	b.n	8007992 <quorem+0xee>
 80079b4:	0000      	movs	r0, r0
	...

080079b8 <_dtoa_r>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	ed2d 8b04 	vpush	{d8-d9}
 80079c0:	69c5      	ldr	r5, [r0, #28]
 80079c2:	b093      	sub	sp, #76	; 0x4c
 80079c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079c8:	ec57 6b10 	vmov	r6, r7, d0
 80079cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80079d0:	9107      	str	r1, [sp, #28]
 80079d2:	4604      	mov	r4, r0
 80079d4:	920a      	str	r2, [sp, #40]	; 0x28
 80079d6:	930d      	str	r3, [sp, #52]	; 0x34
 80079d8:	b975      	cbnz	r5, 80079f8 <_dtoa_r+0x40>
 80079da:	2010      	movs	r0, #16
 80079dc:	f7fd ff84 	bl	80058e8 <malloc>
 80079e0:	4602      	mov	r2, r0
 80079e2:	61e0      	str	r0, [r4, #28]
 80079e4:	b920      	cbnz	r0, 80079f0 <_dtoa_r+0x38>
 80079e6:	4bae      	ldr	r3, [pc, #696]	; (8007ca0 <_dtoa_r+0x2e8>)
 80079e8:	21ef      	movs	r1, #239	; 0xef
 80079ea:	48ae      	ldr	r0, [pc, #696]	; (8007ca4 <_dtoa_r+0x2ec>)
 80079ec:	f002 fc80 	bl	800a2f0 <__assert_func>
 80079f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079f4:	6005      	str	r5, [r0, #0]
 80079f6:	60c5      	str	r5, [r0, #12]
 80079f8:	69e3      	ldr	r3, [r4, #28]
 80079fa:	6819      	ldr	r1, [r3, #0]
 80079fc:	b151      	cbz	r1, 8007a14 <_dtoa_r+0x5c>
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	604a      	str	r2, [r1, #4]
 8007a02:	2301      	movs	r3, #1
 8007a04:	4093      	lsls	r3, r2
 8007a06:	608b      	str	r3, [r1, #8]
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f001 f9bd 	bl	8008d88 <_Bfree>
 8007a0e:	69e3      	ldr	r3, [r4, #28]
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	1e3b      	subs	r3, r7, #0
 8007a16:	bfbb      	ittet	lt
 8007a18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a1c:	9303      	strlt	r3, [sp, #12]
 8007a1e:	2300      	movge	r3, #0
 8007a20:	2201      	movlt	r2, #1
 8007a22:	bfac      	ite	ge
 8007a24:	f8c8 3000 	strge.w	r3, [r8]
 8007a28:	f8c8 2000 	strlt.w	r2, [r8]
 8007a2c:	4b9e      	ldr	r3, [pc, #632]	; (8007ca8 <_dtoa_r+0x2f0>)
 8007a2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a32:	ea33 0308 	bics.w	r3, r3, r8
 8007a36:	d11b      	bne.n	8007a70 <_dtoa_r+0xb8>
 8007a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a44:	4333      	orrs	r3, r6
 8007a46:	f000 8593 	beq.w	8008570 <_dtoa_r+0xbb8>
 8007a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a4c:	b963      	cbnz	r3, 8007a68 <_dtoa_r+0xb0>
 8007a4e:	4b97      	ldr	r3, [pc, #604]	; (8007cac <_dtoa_r+0x2f4>)
 8007a50:	e027      	b.n	8007aa2 <_dtoa_r+0xea>
 8007a52:	4b97      	ldr	r3, [pc, #604]	; (8007cb0 <_dtoa_r+0x2f8>)
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	9800      	ldr	r0, [sp, #0]
 8007a5e:	b013      	add	sp, #76	; 0x4c
 8007a60:	ecbd 8b04 	vpop	{d8-d9}
 8007a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a68:	4b90      	ldr	r3, [pc, #576]	; (8007cac <_dtoa_r+0x2f4>)
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	3303      	adds	r3, #3
 8007a6e:	e7f3      	b.n	8007a58 <_dtoa_r+0xa0>
 8007a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	ec51 0b17 	vmov	r0, r1, d7
 8007a7a:	eeb0 8a47 	vmov.f32	s16, s14
 8007a7e:	eef0 8a67 	vmov.f32	s17, s15
 8007a82:	2300      	movs	r3, #0
 8007a84:	f7f9 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a88:	4681      	mov	r9, r0
 8007a8a:	b160      	cbz	r0, 8007aa6 <_dtoa_r+0xee>
 8007a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a8e:	2301      	movs	r3, #1
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 8568 	beq.w	800856a <_dtoa_r+0xbb2>
 8007a9a:	4b86      	ldr	r3, [pc, #536]	; (8007cb4 <_dtoa_r+0x2fc>)
 8007a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	e7da      	b.n	8007a5c <_dtoa_r+0xa4>
 8007aa6:	aa10      	add	r2, sp, #64	; 0x40
 8007aa8:	a911      	add	r1, sp, #68	; 0x44
 8007aaa:	4620      	mov	r0, r4
 8007aac:	eeb0 0a48 	vmov.f32	s0, s16
 8007ab0:	eef0 0a68 	vmov.f32	s1, s17
 8007ab4:	f001 fd04 	bl	80094c0 <__d2b>
 8007ab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007abc:	4682      	mov	sl, r0
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	d07f      	beq.n	8007bc2 <_dtoa_r+0x20a>
 8007ac2:	ee18 3a90 	vmov	r3, s17
 8007ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ace:	ec51 0b18 	vmov	r0, r1, d8
 8007ad2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ada:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007ade:	4619      	mov	r1, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4b75      	ldr	r3, [pc, #468]	; (8007cb8 <_dtoa_r+0x300>)
 8007ae4:	f7f8 fbd0 	bl	8000288 <__aeabi_dsub>
 8007ae8:	a367      	add	r3, pc, #412	; (adr r3, 8007c88 <_dtoa_r+0x2d0>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f7f8 fd83 	bl	80005f8 <__aeabi_dmul>
 8007af2:	a367      	add	r3, pc, #412	; (adr r3, 8007c90 <_dtoa_r+0x2d8>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fbc8 	bl	800028c <__adddf3>
 8007afc:	4606      	mov	r6, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	460f      	mov	r7, r1
 8007b02:	f7f8 fd0f 	bl	8000524 <__aeabi_i2d>
 8007b06:	a364      	add	r3, pc, #400	; (adr r3, 8007c98 <_dtoa_r+0x2e0>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fd74 	bl	80005f8 <__aeabi_dmul>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 fbb8 	bl	800028c <__adddf3>
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f7f9 f81a 	bl	8000b58 <__aeabi_d2iz>
 8007b24:	2200      	movs	r2, #0
 8007b26:	4683      	mov	fp, r0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f7f8 ffd5 	bl	8000adc <__aeabi_dcmplt>
 8007b32:	b148      	cbz	r0, 8007b48 <_dtoa_r+0x190>
 8007b34:	4658      	mov	r0, fp
 8007b36:	f7f8 fcf5 	bl	8000524 <__aeabi_i2d>
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	f7f8 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b42:	b908      	cbnz	r0, 8007b48 <_dtoa_r+0x190>
 8007b44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b48:	f1bb 0f16 	cmp.w	fp, #22
 8007b4c:	d857      	bhi.n	8007bfe <_dtoa_r+0x246>
 8007b4e:	4b5b      	ldr	r3, [pc, #364]	; (8007cbc <_dtoa_r+0x304>)
 8007b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	ec51 0b18 	vmov	r0, r1, d8
 8007b5c:	f7f8 ffbe 	bl	8000adc <__aeabi_dcmplt>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d04e      	beq.n	8007c02 <_dtoa_r+0x24a>
 8007b64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b68:	2300      	movs	r3, #0
 8007b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b6e:	1b5b      	subs	r3, r3, r5
 8007b70:	1e5a      	subs	r2, r3, #1
 8007b72:	bf45      	ittet	mi
 8007b74:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b78:	9305      	strmi	r3, [sp, #20]
 8007b7a:	2300      	movpl	r3, #0
 8007b7c:	2300      	movmi	r3, #0
 8007b7e:	9206      	str	r2, [sp, #24]
 8007b80:	bf54      	ite	pl
 8007b82:	9305      	strpl	r3, [sp, #20]
 8007b84:	9306      	strmi	r3, [sp, #24]
 8007b86:	f1bb 0f00 	cmp.w	fp, #0
 8007b8a:	db3c      	blt.n	8007c06 <_dtoa_r+0x24e>
 8007b8c:	9b06      	ldr	r3, [sp, #24]
 8007b8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007b92:	445b      	add	r3, fp
 8007b94:	9306      	str	r3, [sp, #24]
 8007b96:	2300      	movs	r3, #0
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	9b07      	ldr	r3, [sp, #28]
 8007b9c:	2b09      	cmp	r3, #9
 8007b9e:	d868      	bhi.n	8007c72 <_dtoa_r+0x2ba>
 8007ba0:	2b05      	cmp	r3, #5
 8007ba2:	bfc4      	itt	gt
 8007ba4:	3b04      	subgt	r3, #4
 8007ba6:	9307      	strgt	r3, [sp, #28]
 8007ba8:	9b07      	ldr	r3, [sp, #28]
 8007baa:	f1a3 0302 	sub.w	r3, r3, #2
 8007bae:	bfcc      	ite	gt
 8007bb0:	2500      	movgt	r5, #0
 8007bb2:	2501      	movle	r5, #1
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	f200 8085 	bhi.w	8007cc4 <_dtoa_r+0x30c>
 8007bba:	e8df f003 	tbb	[pc, r3]
 8007bbe:	3b2e      	.short	0x3b2e
 8007bc0:	5839      	.short	0x5839
 8007bc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007bc6:	441d      	add	r5, r3
 8007bc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	bfc1      	itttt	gt
 8007bd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007bd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007bdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007be0:	bfd6      	itet	le
 8007be2:	f1c3 0320 	rsble	r3, r3, #32
 8007be6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007bea:	fa06 f003 	lslle.w	r0, r6, r3
 8007bee:	f7f8 fc89 	bl	8000504 <__aeabi_ui2d>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007bf8:	3d01      	subs	r5, #1
 8007bfa:	920e      	str	r2, [sp, #56]	; 0x38
 8007bfc:	e76f      	b.n	8007ade <_dtoa_r+0x126>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e7b3      	b.n	8007b6a <_dtoa_r+0x1b2>
 8007c02:	900c      	str	r0, [sp, #48]	; 0x30
 8007c04:	e7b2      	b.n	8007b6c <_dtoa_r+0x1b4>
 8007c06:	9b05      	ldr	r3, [sp, #20]
 8007c08:	eba3 030b 	sub.w	r3, r3, fp
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	f1cb 0300 	rsb	r3, fp, #0
 8007c12:	9308      	str	r3, [sp, #32]
 8007c14:	2300      	movs	r3, #0
 8007c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c18:	e7bf      	b.n	8007b9a <_dtoa_r+0x1e2>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dc52      	bgt.n	8007cca <_dtoa_r+0x312>
 8007c24:	2301      	movs	r3, #1
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c2e:	e00b      	b.n	8007c48 <_dtoa_r+0x290>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e7f3      	b.n	8007c1c <_dtoa_r+0x264>
 8007c34:	2300      	movs	r3, #0
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3a:	445b      	add	r3, fp
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	bfb8      	it	lt
 8007c46:	2301      	movlt	r3, #1
 8007c48:	69e0      	ldr	r0, [r4, #28]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	f102 0614 	add.w	r6, r2, #20
 8007c52:	429e      	cmp	r6, r3
 8007c54:	d93d      	bls.n	8007cd2 <_dtoa_r+0x31a>
 8007c56:	6041      	str	r1, [r0, #4]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f001 f855 	bl	8008d08 <_Balloc>
 8007c5e:	9000      	str	r0, [sp, #0]
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d139      	bne.n	8007cd8 <_dtoa_r+0x320>
 8007c64:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <_dtoa_r+0x308>)
 8007c66:	4602      	mov	r2, r0
 8007c68:	f240 11af 	movw	r1, #431	; 0x1af
 8007c6c:	e6bd      	b.n	80079ea <_dtoa_r+0x32>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e7e1      	b.n	8007c36 <_dtoa_r+0x27e>
 8007c72:	2501      	movs	r5, #1
 8007c74:	2300      	movs	r3, #0
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	9509      	str	r5, [sp, #36]	; 0x24
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	2200      	movs	r2, #0
 8007c84:	2312      	movs	r3, #18
 8007c86:	e7d1      	b.n	8007c2c <_dtoa_r+0x274>
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	0800abfc 	.word	0x0800abfc
 8007ca4:	0800ac13 	.word	0x0800ac13
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	0800abf8 	.word	0x0800abf8
 8007cb0:	0800abef 	.word	0x0800abef
 8007cb4:	0800af5d 	.word	0x0800af5d
 8007cb8:	3ff80000 	.word	0x3ff80000
 8007cbc:	0800ad60 	.word	0x0800ad60
 8007cc0:	0800ac6b 	.word	0x0800ac6b
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	e7d7      	b.n	8007c7a <_dtoa_r+0x2c2>
 8007cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	e7ba      	b.n	8007c48 <_dtoa_r+0x290>
 8007cd2:	3101      	adds	r1, #1
 8007cd4:	0052      	lsls	r2, r2, #1
 8007cd6:	e7ba      	b.n	8007c4e <_dtoa_r+0x296>
 8007cd8:	69e3      	ldr	r3, [r4, #28]
 8007cda:	9a00      	ldr	r2, [sp, #0]
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	2b0e      	cmp	r3, #14
 8007ce2:	f200 80a8 	bhi.w	8007e36 <_dtoa_r+0x47e>
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	f000 80a5 	beq.w	8007e36 <_dtoa_r+0x47e>
 8007cec:	f1bb 0f00 	cmp.w	fp, #0
 8007cf0:	dd38      	ble.n	8007d64 <_dtoa_r+0x3ac>
 8007cf2:	4bc0      	ldr	r3, [pc, #768]	; (8007ff4 <_dtoa_r+0x63c>)
 8007cf4:	f00b 020f 	and.w	r2, fp, #15
 8007cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007d08:	d019      	beq.n	8007d3e <_dtoa_r+0x386>
 8007d0a:	4bbb      	ldr	r3, [pc, #748]	; (8007ff8 <_dtoa_r+0x640>)
 8007d0c:	ec51 0b18 	vmov	r0, r1, d8
 8007d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d14:	f7f8 fd9a 	bl	800084c <__aeabi_ddiv>
 8007d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d1c:	f008 080f 	and.w	r8, r8, #15
 8007d20:	2503      	movs	r5, #3
 8007d22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ff8 <_dtoa_r+0x640>
 8007d26:	f1b8 0f00 	cmp.w	r8, #0
 8007d2a:	d10a      	bne.n	8007d42 <_dtoa_r+0x38a>
 8007d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d30:	4632      	mov	r2, r6
 8007d32:	463b      	mov	r3, r7
 8007d34:	f7f8 fd8a 	bl	800084c <__aeabi_ddiv>
 8007d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d3c:	e02b      	b.n	8007d96 <_dtoa_r+0x3de>
 8007d3e:	2502      	movs	r5, #2
 8007d40:	e7ef      	b.n	8007d22 <_dtoa_r+0x36a>
 8007d42:	f018 0f01 	tst.w	r8, #1
 8007d46:	d008      	beq.n	8007d5a <_dtoa_r+0x3a2>
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d50:	f7f8 fc52 	bl	80005f8 <__aeabi_dmul>
 8007d54:	3501      	adds	r5, #1
 8007d56:	4606      	mov	r6, r0
 8007d58:	460f      	mov	r7, r1
 8007d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d5e:	f109 0908 	add.w	r9, r9, #8
 8007d62:	e7e0      	b.n	8007d26 <_dtoa_r+0x36e>
 8007d64:	f000 809f 	beq.w	8007ea6 <_dtoa_r+0x4ee>
 8007d68:	f1cb 0600 	rsb	r6, fp, #0
 8007d6c:	4ba1      	ldr	r3, [pc, #644]	; (8007ff4 <_dtoa_r+0x63c>)
 8007d6e:	4fa2      	ldr	r7, [pc, #648]	; (8007ff8 <_dtoa_r+0x640>)
 8007d70:	f006 020f 	and.w	r2, r6, #15
 8007d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	ec51 0b18 	vmov	r0, r1, d8
 8007d80:	f7f8 fc3a 	bl	80005f8 <__aeabi_dmul>
 8007d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d88:	1136      	asrs	r6, r6, #4
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2502      	movs	r5, #2
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d17e      	bne.n	8007e90 <_dtoa_r+0x4d8>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1d0      	bne.n	8007d38 <_dtoa_r+0x380>
 8007d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8084 	beq.w	8007eaa <_dtoa_r+0x4f2>
 8007da2:	4b96      	ldr	r3, [pc, #600]	; (8007ffc <_dtoa_r+0x644>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	4640      	mov	r0, r8
 8007da8:	4649      	mov	r1, r9
 8007daa:	f7f8 fe97 	bl	8000adc <__aeabi_dcmplt>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d07b      	beq.n	8007eaa <_dtoa_r+0x4f2>
 8007db2:	9b04      	ldr	r3, [sp, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d078      	beq.n	8007eaa <_dtoa_r+0x4f2>
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dd39      	ble.n	8007e32 <_dtoa_r+0x47a>
 8007dbe:	4b90      	ldr	r3, [pc, #576]	; (8008000 <_dtoa_r+0x648>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	f7f8 fc17 	bl	80005f8 <__aeabi_dmul>
 8007dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dce:	9e01      	ldr	r6, [sp, #4]
 8007dd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f7f8 fba2 	bl	8000524 <__aeabi_i2d>
 8007de0:	4642      	mov	r2, r8
 8007de2:	464b      	mov	r3, r9
 8007de4:	f7f8 fc08 	bl	80005f8 <__aeabi_dmul>
 8007de8:	4b86      	ldr	r3, [pc, #536]	; (8008004 <_dtoa_r+0x64c>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	f7f8 fa4e 	bl	800028c <__adddf3>
 8007df0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df8:	9303      	str	r3, [sp, #12]
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d158      	bne.n	8007eb0 <_dtoa_r+0x4f8>
 8007dfe:	4b82      	ldr	r3, [pc, #520]	; (8008008 <_dtoa_r+0x650>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	4640      	mov	r0, r8
 8007e04:	4649      	mov	r1, r9
 8007e06:	f7f8 fa3f 	bl	8000288 <__aeabi_dsub>
 8007e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e0e:	4680      	mov	r8, r0
 8007e10:	4689      	mov	r9, r1
 8007e12:	f7f8 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f040 8296 	bne.w	8008348 <_dtoa_r+0x990>
 8007e1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e20:	4640      	mov	r0, r8
 8007e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 fe58 	bl	8000adc <__aeabi_dcmplt>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f040 8289 	bne.w	8008344 <_dtoa_r+0x98c>
 8007e32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f2c0 814e 	blt.w	80080da <_dtoa_r+0x722>
 8007e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8007e42:	f300 814a 	bgt.w	80080da <_dtoa_r+0x722>
 8007e46:	4b6b      	ldr	r3, [pc, #428]	; (8007ff4 <_dtoa_r+0x63c>)
 8007e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f280 80dc 	bge.w	8008010 <_dtoa_r+0x658>
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f300 80d8 	bgt.w	8008010 <_dtoa_r+0x658>
 8007e60:	f040 826f 	bne.w	8008342 <_dtoa_r+0x98a>
 8007e64:	4b68      	ldr	r3, [pc, #416]	; (8008008 <_dtoa_r+0x650>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 fbc4 	bl	80005f8 <__aeabi_dmul>
 8007e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e74:	f7f8 fe46 	bl	8000b04 <__aeabi_dcmpge>
 8007e78:	9e04      	ldr	r6, [sp, #16]
 8007e7a:	4637      	mov	r7, r6
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	f040 8245 	bne.w	800830c <_dtoa_r+0x954>
 8007e82:	9d00      	ldr	r5, [sp, #0]
 8007e84:	2331      	movs	r3, #49	; 0x31
 8007e86:	f805 3b01 	strb.w	r3, [r5], #1
 8007e8a:	f10b 0b01 	add.w	fp, fp, #1
 8007e8e:	e241      	b.n	8008314 <_dtoa_r+0x95c>
 8007e90:	07f2      	lsls	r2, r6, #31
 8007e92:	d505      	bpl.n	8007ea0 <_dtoa_r+0x4e8>
 8007e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e98:	f7f8 fbae 	bl	80005f8 <__aeabi_dmul>
 8007e9c:	3501      	adds	r5, #1
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	1076      	asrs	r6, r6, #1
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	e773      	b.n	8007d8e <_dtoa_r+0x3d6>
 8007ea6:	2502      	movs	r5, #2
 8007ea8:	e775      	b.n	8007d96 <_dtoa_r+0x3de>
 8007eaa:	9e04      	ldr	r6, [sp, #16]
 8007eac:	465f      	mov	r7, fp
 8007eae:	e792      	b.n	8007dd6 <_dtoa_r+0x41e>
 8007eb0:	9900      	ldr	r1, [sp, #0]
 8007eb2:	4b50      	ldr	r3, [pc, #320]	; (8007ff4 <_dtoa_r+0x63c>)
 8007eb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eb8:	4431      	add	r1, r6
 8007eba:	9102      	str	r1, [sp, #8]
 8007ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ebe:	eeb0 9a47 	vmov.f32	s18, s14
 8007ec2:	eef0 9a67 	vmov.f32	s19, s15
 8007ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007eca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	d044      	beq.n	8007f5c <_dtoa_r+0x5a4>
 8007ed2:	494e      	ldr	r1, [pc, #312]	; (800800c <_dtoa_r+0x654>)
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f7f8 fcb9 	bl	800084c <__aeabi_ddiv>
 8007eda:	ec53 2b19 	vmov	r2, r3, d9
 8007ede:	f7f8 f9d3 	bl	8000288 <__aeabi_dsub>
 8007ee2:	9d00      	ldr	r5, [sp, #0]
 8007ee4:	ec41 0b19 	vmov	d9, r0, r1
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4640      	mov	r0, r8
 8007eec:	f7f8 fe34 	bl	8000b58 <__aeabi_d2iz>
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	f7f8 fb17 	bl	8000524 <__aeabi_i2d>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f7f8 f9c3 	bl	8000288 <__aeabi_dsub>
 8007f02:	3630      	adds	r6, #48	; 0x30
 8007f04:	f805 6b01 	strb.w	r6, [r5], #1
 8007f08:	ec53 2b19 	vmov	r2, r3, d9
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	f7f8 fde4 	bl	8000adc <__aeabi_dcmplt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d164      	bne.n	8007fe2 <_dtoa_r+0x62a>
 8007f18:	4642      	mov	r2, r8
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	4937      	ldr	r1, [pc, #220]	; (8007ffc <_dtoa_r+0x644>)
 8007f1e:	2000      	movs	r0, #0
 8007f20:	f7f8 f9b2 	bl	8000288 <__aeabi_dsub>
 8007f24:	ec53 2b19 	vmov	r2, r3, d9
 8007f28:	f7f8 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 80b6 	bne.w	800809e <_dtoa_r+0x6e6>
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	429d      	cmp	r5, r3
 8007f36:	f43f af7c 	beq.w	8007e32 <_dtoa_r+0x47a>
 8007f3a:	4b31      	ldr	r3, [pc, #196]	; (8008000 <_dtoa_r+0x648>)
 8007f3c:	ec51 0b19 	vmov	r0, r1, d9
 8007f40:	2200      	movs	r2, #0
 8007f42:	f7f8 fb59 	bl	80005f8 <__aeabi_dmul>
 8007f46:	4b2e      	ldr	r3, [pc, #184]	; (8008000 <_dtoa_r+0x648>)
 8007f48:	ec41 0b19 	vmov	d9, r0, r1
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4640      	mov	r0, r8
 8007f50:	4649      	mov	r1, r9
 8007f52:	f7f8 fb51 	bl	80005f8 <__aeabi_dmul>
 8007f56:	4680      	mov	r8, r0
 8007f58:	4689      	mov	r9, r1
 8007f5a:	e7c5      	b.n	8007ee8 <_dtoa_r+0x530>
 8007f5c:	ec51 0b17 	vmov	r0, r1, d7
 8007f60:	f7f8 fb4a 	bl	80005f8 <__aeabi_dmul>
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	9d00      	ldr	r5, [sp, #0]
 8007f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f6a:	ec41 0b19 	vmov	d9, r0, r1
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	f7f8 fdf1 	bl	8000b58 <__aeabi_d2iz>
 8007f76:	4606      	mov	r6, r0
 8007f78:	f7f8 fad4 	bl	8000524 <__aeabi_i2d>
 8007f7c:	3630      	adds	r6, #48	; 0x30
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f7f8 f97f 	bl	8000288 <__aeabi_dsub>
 8007f8a:	f805 6b01 	strb.w	r6, [r5], #1
 8007f8e:	9b02      	ldr	r3, [sp, #8]
 8007f90:	429d      	cmp	r5, r3
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	d124      	bne.n	8007fe6 <_dtoa_r+0x62e>
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	; (800800c <_dtoa_r+0x654>)
 8007f9e:	ec51 0b19 	vmov	r0, r1, d9
 8007fa2:	f7f8 f973 	bl	800028c <__adddf3>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d173      	bne.n	800809e <_dtoa_r+0x6e6>
 8007fb6:	ec53 2b19 	vmov	r2, r3, d9
 8007fba:	4914      	ldr	r1, [pc, #80]	; (800800c <_dtoa_r+0x654>)
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f7f8 f963 	bl	8000288 <__aeabi_dsub>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	4649      	mov	r1, r9
 8007fca:	f7f8 fd87 	bl	8000adc <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f43f af2f 	beq.w	8007e32 <_dtoa_r+0x47a>
 8007fd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007fd6:	1e6b      	subs	r3, r5, #1
 8007fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fde:	2b30      	cmp	r3, #48	; 0x30
 8007fe0:	d0f8      	beq.n	8007fd4 <_dtoa_r+0x61c>
 8007fe2:	46bb      	mov	fp, r7
 8007fe4:	e04a      	b.n	800807c <_dtoa_r+0x6c4>
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <_dtoa_r+0x648>)
 8007fe8:	f7f8 fb06 	bl	80005f8 <__aeabi_dmul>
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	e7bd      	b.n	8007f6e <_dtoa_r+0x5b6>
 8007ff2:	bf00      	nop
 8007ff4:	0800ad60 	.word	0x0800ad60
 8007ff8:	0800ad38 	.word	0x0800ad38
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	40240000 	.word	0x40240000
 8008004:	401c0000 	.word	0x401c0000
 8008008:	40140000 	.word	0x40140000
 800800c:	3fe00000 	.word	0x3fe00000
 8008010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008014:	9d00      	ldr	r5, [sp, #0]
 8008016:	4642      	mov	r2, r8
 8008018:	464b      	mov	r3, r9
 800801a:	4630      	mov	r0, r6
 800801c:	4639      	mov	r1, r7
 800801e:	f7f8 fc15 	bl	800084c <__aeabi_ddiv>
 8008022:	f7f8 fd99 	bl	8000b58 <__aeabi_d2iz>
 8008026:	9001      	str	r0, [sp, #4]
 8008028:	f7f8 fa7c 	bl	8000524 <__aeabi_i2d>
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4630      	mov	r0, r6
 800803a:	4639      	mov	r1, r7
 800803c:	f7f8 f924 	bl	8000288 <__aeabi_dsub>
 8008040:	9e01      	ldr	r6, [sp, #4]
 8008042:	9f04      	ldr	r7, [sp, #16]
 8008044:	3630      	adds	r6, #48	; 0x30
 8008046:	f805 6b01 	strb.w	r6, [r5], #1
 800804a:	9e00      	ldr	r6, [sp, #0]
 800804c:	1bae      	subs	r6, r5, r6
 800804e:	42b7      	cmp	r7, r6
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	d134      	bne.n	80080c0 <_dtoa_r+0x708>
 8008056:	f7f8 f919 	bl	800028c <__adddf3>
 800805a:	4642      	mov	r2, r8
 800805c:	464b      	mov	r3, r9
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	f7f8 fd59 	bl	8000b18 <__aeabi_dcmpgt>
 8008066:	b9c8      	cbnz	r0, 800809c <_dtoa_r+0x6e4>
 8008068:	4642      	mov	r2, r8
 800806a:	464b      	mov	r3, r9
 800806c:	4630      	mov	r0, r6
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008074:	b110      	cbz	r0, 800807c <_dtoa_r+0x6c4>
 8008076:	9b01      	ldr	r3, [sp, #4]
 8008078:	07db      	lsls	r3, r3, #31
 800807a:	d40f      	bmi.n	800809c <_dtoa_r+0x6e4>
 800807c:	4651      	mov	r1, sl
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fe82 	bl	8008d88 <_Bfree>
 8008084:	2300      	movs	r3, #0
 8008086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008088:	702b      	strb	r3, [r5, #0]
 800808a:	f10b 0301 	add.w	r3, fp, #1
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008092:	2b00      	cmp	r3, #0
 8008094:	f43f ace2 	beq.w	8007a5c <_dtoa_r+0xa4>
 8008098:	601d      	str	r5, [r3, #0]
 800809a:	e4df      	b.n	8007a5c <_dtoa_r+0xa4>
 800809c:	465f      	mov	r7, fp
 800809e:	462b      	mov	r3, r5
 80080a0:	461d      	mov	r5, r3
 80080a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080a6:	2a39      	cmp	r2, #57	; 0x39
 80080a8:	d106      	bne.n	80080b8 <_dtoa_r+0x700>
 80080aa:	9a00      	ldr	r2, [sp, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d1f7      	bne.n	80080a0 <_dtoa_r+0x6e8>
 80080b0:	9900      	ldr	r1, [sp, #0]
 80080b2:	2230      	movs	r2, #48	; 0x30
 80080b4:	3701      	adds	r7, #1
 80080b6:	700a      	strb	r2, [r1, #0]
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	3201      	adds	r2, #1
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e790      	b.n	8007fe2 <_dtoa_r+0x62a>
 80080c0:	4ba3      	ldr	r3, [pc, #652]	; (8008350 <_dtoa_r+0x998>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	f7f8 fa98 	bl	80005f8 <__aeabi_dmul>
 80080c8:	2200      	movs	r2, #0
 80080ca:	2300      	movs	r3, #0
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	f7f8 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d09e      	beq.n	8008016 <_dtoa_r+0x65e>
 80080d8:	e7d0      	b.n	800807c <_dtoa_r+0x6c4>
 80080da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080dc:	2a00      	cmp	r2, #0
 80080de:	f000 80ca 	beq.w	8008276 <_dtoa_r+0x8be>
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	2a01      	cmp	r2, #1
 80080e6:	f300 80ad 	bgt.w	8008244 <_dtoa_r+0x88c>
 80080ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	f000 80a5 	beq.w	800823c <_dtoa_r+0x884>
 80080f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080f6:	9e08      	ldr	r6, [sp, #32]
 80080f8:	9d05      	ldr	r5, [sp, #20]
 80080fa:	9a05      	ldr	r2, [sp, #20]
 80080fc:	441a      	add	r2, r3
 80080fe:	9205      	str	r2, [sp, #20]
 8008100:	9a06      	ldr	r2, [sp, #24]
 8008102:	2101      	movs	r1, #1
 8008104:	441a      	add	r2, r3
 8008106:	4620      	mov	r0, r4
 8008108:	9206      	str	r2, [sp, #24]
 800810a:	f000 ff3d 	bl	8008f88 <__i2b>
 800810e:	4607      	mov	r7, r0
 8008110:	b165      	cbz	r5, 800812c <_dtoa_r+0x774>
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dd09      	ble.n	800812c <_dtoa_r+0x774>
 8008118:	42ab      	cmp	r3, r5
 800811a:	9a05      	ldr	r2, [sp, #20]
 800811c:	bfa8      	it	ge
 800811e:	462b      	movge	r3, r5
 8008120:	1ad2      	subs	r2, r2, r3
 8008122:	9205      	str	r2, [sp, #20]
 8008124:	9a06      	ldr	r2, [sp, #24]
 8008126:	1aed      	subs	r5, r5, r3
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	b1f3      	cbz	r3, 800816e <_dtoa_r+0x7b6>
 8008130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 80a3 	beq.w	800827e <_dtoa_r+0x8c6>
 8008138:	2e00      	cmp	r6, #0
 800813a:	dd10      	ble.n	800815e <_dtoa_r+0x7a6>
 800813c:	4639      	mov	r1, r7
 800813e:	4632      	mov	r2, r6
 8008140:	4620      	mov	r0, r4
 8008142:	f000 ffe1 	bl	8009108 <__pow5mult>
 8008146:	4652      	mov	r2, sl
 8008148:	4601      	mov	r1, r0
 800814a:	4607      	mov	r7, r0
 800814c:	4620      	mov	r0, r4
 800814e:	f000 ff31 	bl	8008fb4 <__multiply>
 8008152:	4651      	mov	r1, sl
 8008154:	4680      	mov	r8, r0
 8008156:	4620      	mov	r0, r4
 8008158:	f000 fe16 	bl	8008d88 <_Bfree>
 800815c:	46c2      	mov	sl, r8
 800815e:	9b08      	ldr	r3, [sp, #32]
 8008160:	1b9a      	subs	r2, r3, r6
 8008162:	d004      	beq.n	800816e <_dtoa_r+0x7b6>
 8008164:	4651      	mov	r1, sl
 8008166:	4620      	mov	r0, r4
 8008168:	f000 ffce 	bl	8009108 <__pow5mult>
 800816c:	4682      	mov	sl, r0
 800816e:	2101      	movs	r1, #1
 8008170:	4620      	mov	r0, r4
 8008172:	f000 ff09 	bl	8008f88 <__i2b>
 8008176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008178:	2b00      	cmp	r3, #0
 800817a:	4606      	mov	r6, r0
 800817c:	f340 8081 	ble.w	8008282 <_dtoa_r+0x8ca>
 8008180:	461a      	mov	r2, r3
 8008182:	4601      	mov	r1, r0
 8008184:	4620      	mov	r0, r4
 8008186:	f000 ffbf 	bl	8009108 <__pow5mult>
 800818a:	9b07      	ldr	r3, [sp, #28]
 800818c:	2b01      	cmp	r3, #1
 800818e:	4606      	mov	r6, r0
 8008190:	dd7a      	ble.n	8008288 <_dtoa_r+0x8d0>
 8008192:	f04f 0800 	mov.w	r8, #0
 8008196:	6933      	ldr	r3, [r6, #16]
 8008198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800819c:	6918      	ldr	r0, [r3, #16]
 800819e:	f000 fea5 	bl	8008eec <__hi0bits>
 80081a2:	f1c0 0020 	rsb	r0, r0, #32
 80081a6:	9b06      	ldr	r3, [sp, #24]
 80081a8:	4418      	add	r0, r3
 80081aa:	f010 001f 	ands.w	r0, r0, #31
 80081ae:	f000 8094 	beq.w	80082da <_dtoa_r+0x922>
 80081b2:	f1c0 0320 	rsb	r3, r0, #32
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	f340 8085 	ble.w	80082c6 <_dtoa_r+0x90e>
 80081bc:	9b05      	ldr	r3, [sp, #20]
 80081be:	f1c0 001c 	rsb	r0, r0, #28
 80081c2:	4403      	add	r3, r0
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	4403      	add	r3, r0
 80081ca:	4405      	add	r5, r0
 80081cc:	9306      	str	r3, [sp, #24]
 80081ce:	9b05      	ldr	r3, [sp, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dd05      	ble.n	80081e0 <_dtoa_r+0x828>
 80081d4:	4651      	mov	r1, sl
 80081d6:	461a      	mov	r2, r3
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 ffef 	bl	80091bc <__lshift>
 80081de:	4682      	mov	sl, r0
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd05      	ble.n	80081f2 <_dtoa_r+0x83a>
 80081e6:	4631      	mov	r1, r6
 80081e8:	461a      	mov	r2, r3
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 ffe6 	bl	80091bc <__lshift>
 80081f0:	4606      	mov	r6, r0
 80081f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d072      	beq.n	80082de <_dtoa_r+0x926>
 80081f8:	4631      	mov	r1, r6
 80081fa:	4650      	mov	r0, sl
 80081fc:	f001 f84a 	bl	8009294 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	da6c      	bge.n	80082de <_dtoa_r+0x926>
 8008204:	2300      	movs	r3, #0
 8008206:	4651      	mov	r1, sl
 8008208:	220a      	movs	r2, #10
 800820a:	4620      	mov	r0, r4
 800820c:	f000 fdde 	bl	8008dcc <__multadd>
 8008210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008212:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008216:	4682      	mov	sl, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 81b0 	beq.w	800857e <_dtoa_r+0xbc6>
 800821e:	2300      	movs	r3, #0
 8008220:	4639      	mov	r1, r7
 8008222:	220a      	movs	r2, #10
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fdd1 	bl	8008dcc <__multadd>
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	4607      	mov	r7, r0
 8008230:	f300 8096 	bgt.w	8008360 <_dtoa_r+0x9a8>
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	2b02      	cmp	r3, #2
 8008238:	dc59      	bgt.n	80082ee <_dtoa_r+0x936>
 800823a:	e091      	b.n	8008360 <_dtoa_r+0x9a8>
 800823c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800823e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008242:	e758      	b.n	80080f6 <_dtoa_r+0x73e>
 8008244:	9b04      	ldr	r3, [sp, #16]
 8008246:	1e5e      	subs	r6, r3, #1
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	42b3      	cmp	r3, r6
 800824c:	bfbf      	itttt	lt
 800824e:	9b08      	ldrlt	r3, [sp, #32]
 8008250:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008252:	9608      	strlt	r6, [sp, #32]
 8008254:	1af3      	sublt	r3, r6, r3
 8008256:	bfb4      	ite	lt
 8008258:	18d2      	addlt	r2, r2, r3
 800825a:	1b9e      	subge	r6, r3, r6
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	bfbc      	itt	lt
 8008260:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008262:	2600      	movlt	r6, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfb7      	itett	lt
 8008268:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800826c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008270:	1a9d      	sublt	r5, r3, r2
 8008272:	2300      	movlt	r3, #0
 8008274:	e741      	b.n	80080fa <_dtoa_r+0x742>
 8008276:	9e08      	ldr	r6, [sp, #32]
 8008278:	9d05      	ldr	r5, [sp, #20]
 800827a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800827c:	e748      	b.n	8008110 <_dtoa_r+0x758>
 800827e:	9a08      	ldr	r2, [sp, #32]
 8008280:	e770      	b.n	8008164 <_dtoa_r+0x7ac>
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	2b01      	cmp	r3, #1
 8008286:	dc19      	bgt.n	80082bc <_dtoa_r+0x904>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	b9bb      	cbnz	r3, 80082bc <_dtoa_r+0x904>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008292:	b99b      	cbnz	r3, 80082bc <_dtoa_r+0x904>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800829a:	0d1b      	lsrs	r3, r3, #20
 800829c:	051b      	lsls	r3, r3, #20
 800829e:	b183      	cbz	r3, 80082c2 <_dtoa_r+0x90a>
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	3301      	adds	r3, #1
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	3301      	adds	r3, #1
 80082aa:	9306      	str	r3, [sp, #24]
 80082ac:	f04f 0801 	mov.w	r8, #1
 80082b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f47f af6f 	bne.w	8008196 <_dtoa_r+0x7de>
 80082b8:	2001      	movs	r0, #1
 80082ba:	e774      	b.n	80081a6 <_dtoa_r+0x7ee>
 80082bc:	f04f 0800 	mov.w	r8, #0
 80082c0:	e7f6      	b.n	80082b0 <_dtoa_r+0x8f8>
 80082c2:	4698      	mov	r8, r3
 80082c4:	e7f4      	b.n	80082b0 <_dtoa_r+0x8f8>
 80082c6:	d082      	beq.n	80081ce <_dtoa_r+0x816>
 80082c8:	9a05      	ldr	r2, [sp, #20]
 80082ca:	331c      	adds	r3, #28
 80082cc:	441a      	add	r2, r3
 80082ce:	9205      	str	r2, [sp, #20]
 80082d0:	9a06      	ldr	r2, [sp, #24]
 80082d2:	441a      	add	r2, r3
 80082d4:	441d      	add	r5, r3
 80082d6:	9206      	str	r2, [sp, #24]
 80082d8:	e779      	b.n	80081ce <_dtoa_r+0x816>
 80082da:	4603      	mov	r3, r0
 80082dc:	e7f4      	b.n	80082c8 <_dtoa_r+0x910>
 80082de:	9b04      	ldr	r3, [sp, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dc37      	bgt.n	8008354 <_dtoa_r+0x99c>
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	dd34      	ble.n	8008354 <_dtoa_r+0x99c>
 80082ea:	9b04      	ldr	r3, [sp, #16]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	b963      	cbnz	r3, 800830c <_dtoa_r+0x954>
 80082f2:	4631      	mov	r1, r6
 80082f4:	2205      	movs	r2, #5
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 fd68 	bl	8008dcc <__multadd>
 80082fc:	4601      	mov	r1, r0
 80082fe:	4606      	mov	r6, r0
 8008300:	4650      	mov	r0, sl
 8008302:	f000 ffc7 	bl	8009294 <__mcmp>
 8008306:	2800      	cmp	r0, #0
 8008308:	f73f adbb 	bgt.w	8007e82 <_dtoa_r+0x4ca>
 800830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830e:	9d00      	ldr	r5, [sp, #0]
 8008310:	ea6f 0b03 	mvn.w	fp, r3
 8008314:	f04f 0800 	mov.w	r8, #0
 8008318:	4631      	mov	r1, r6
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fd34 	bl	8008d88 <_Bfree>
 8008320:	2f00      	cmp	r7, #0
 8008322:	f43f aeab 	beq.w	800807c <_dtoa_r+0x6c4>
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	d005      	beq.n	8008338 <_dtoa_r+0x980>
 800832c:	45b8      	cmp	r8, r7
 800832e:	d003      	beq.n	8008338 <_dtoa_r+0x980>
 8008330:	4641      	mov	r1, r8
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fd28 	bl	8008d88 <_Bfree>
 8008338:	4639      	mov	r1, r7
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fd24 	bl	8008d88 <_Bfree>
 8008340:	e69c      	b.n	800807c <_dtoa_r+0x6c4>
 8008342:	2600      	movs	r6, #0
 8008344:	4637      	mov	r7, r6
 8008346:	e7e1      	b.n	800830c <_dtoa_r+0x954>
 8008348:	46bb      	mov	fp, r7
 800834a:	4637      	mov	r7, r6
 800834c:	e599      	b.n	8007e82 <_dtoa_r+0x4ca>
 800834e:	bf00      	nop
 8008350:	40240000 	.word	0x40240000
 8008354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 80c8 	beq.w	80084ec <_dtoa_r+0xb34>
 800835c:	9b04      	ldr	r3, [sp, #16]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2d00      	cmp	r5, #0
 8008362:	dd05      	ble.n	8008370 <_dtoa_r+0x9b8>
 8008364:	4639      	mov	r1, r7
 8008366:	462a      	mov	r2, r5
 8008368:	4620      	mov	r0, r4
 800836a:	f000 ff27 	bl	80091bc <__lshift>
 800836e:	4607      	mov	r7, r0
 8008370:	f1b8 0f00 	cmp.w	r8, #0
 8008374:	d05b      	beq.n	800842e <_dtoa_r+0xa76>
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fcc5 	bl	8008d08 <_Balloc>
 800837e:	4605      	mov	r5, r0
 8008380:	b928      	cbnz	r0, 800838e <_dtoa_r+0x9d6>
 8008382:	4b83      	ldr	r3, [pc, #524]	; (8008590 <_dtoa_r+0xbd8>)
 8008384:	4602      	mov	r2, r0
 8008386:	f240 21ef 	movw	r1, #751	; 0x2ef
 800838a:	f7ff bb2e 	b.w	80079ea <_dtoa_r+0x32>
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	3202      	adds	r2, #2
 8008392:	0092      	lsls	r2, r2, #2
 8008394:	f107 010c 	add.w	r1, r7, #12
 8008398:	300c      	adds	r0, #12
 800839a:	f7ff fa66 	bl	800786a <memcpy>
 800839e:	2201      	movs	r2, #1
 80083a0:	4629      	mov	r1, r5
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 ff0a 	bl	80091bc <__lshift>
 80083a8:	9b00      	ldr	r3, [sp, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b2:	4413      	add	r3, r2
 80083b4:	9308      	str	r3, [sp, #32]
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	46b8      	mov	r8, r7
 80083be:	9306      	str	r3, [sp, #24]
 80083c0:	4607      	mov	r7, r0
 80083c2:	9b04      	ldr	r3, [sp, #16]
 80083c4:	4631      	mov	r1, r6
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4650      	mov	r0, sl
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	f7ff fa6a 	bl	80078a4 <quorem>
 80083d0:	4641      	mov	r1, r8
 80083d2:	9002      	str	r0, [sp, #8]
 80083d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083d8:	4650      	mov	r0, sl
 80083da:	f000 ff5b 	bl	8009294 <__mcmp>
 80083de:	463a      	mov	r2, r7
 80083e0:	9005      	str	r0, [sp, #20]
 80083e2:	4631      	mov	r1, r6
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 ff71 	bl	80092cc <__mdiff>
 80083ea:	68c2      	ldr	r2, [r0, #12]
 80083ec:	4605      	mov	r5, r0
 80083ee:	bb02      	cbnz	r2, 8008432 <_dtoa_r+0xa7a>
 80083f0:	4601      	mov	r1, r0
 80083f2:	4650      	mov	r0, sl
 80083f4:	f000 ff4e 	bl	8009294 <__mcmp>
 80083f8:	4602      	mov	r2, r0
 80083fa:	4629      	mov	r1, r5
 80083fc:	4620      	mov	r0, r4
 80083fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008400:	f000 fcc2 	bl	8008d88 <_Bfree>
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008408:	9d04      	ldr	r5, [sp, #16]
 800840a:	ea43 0102 	orr.w	r1, r3, r2
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	4319      	orrs	r1, r3
 8008412:	d110      	bne.n	8008436 <_dtoa_r+0xa7e>
 8008414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008418:	d029      	beq.n	800846e <_dtoa_r+0xab6>
 800841a:	9b05      	ldr	r3, [sp, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd02      	ble.n	8008426 <_dtoa_r+0xa6e>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	f883 9000 	strb.w	r9, [r3]
 800842c:	e774      	b.n	8008318 <_dtoa_r+0x960>
 800842e:	4638      	mov	r0, r7
 8008430:	e7ba      	b.n	80083a8 <_dtoa_r+0x9f0>
 8008432:	2201      	movs	r2, #1
 8008434:	e7e1      	b.n	80083fa <_dtoa_r+0xa42>
 8008436:	9b05      	ldr	r3, [sp, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	db04      	blt.n	8008446 <_dtoa_r+0xa8e>
 800843c:	9907      	ldr	r1, [sp, #28]
 800843e:	430b      	orrs	r3, r1
 8008440:	9906      	ldr	r1, [sp, #24]
 8008442:	430b      	orrs	r3, r1
 8008444:	d120      	bne.n	8008488 <_dtoa_r+0xad0>
 8008446:	2a00      	cmp	r2, #0
 8008448:	dded      	ble.n	8008426 <_dtoa_r+0xa6e>
 800844a:	4651      	mov	r1, sl
 800844c:	2201      	movs	r2, #1
 800844e:	4620      	mov	r0, r4
 8008450:	f000 feb4 	bl	80091bc <__lshift>
 8008454:	4631      	mov	r1, r6
 8008456:	4682      	mov	sl, r0
 8008458:	f000 ff1c 	bl	8009294 <__mcmp>
 800845c:	2800      	cmp	r0, #0
 800845e:	dc03      	bgt.n	8008468 <_dtoa_r+0xab0>
 8008460:	d1e1      	bne.n	8008426 <_dtoa_r+0xa6e>
 8008462:	f019 0f01 	tst.w	r9, #1
 8008466:	d0de      	beq.n	8008426 <_dtoa_r+0xa6e>
 8008468:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800846c:	d1d8      	bne.n	8008420 <_dtoa_r+0xa68>
 800846e:	9a01      	ldr	r2, [sp, #4]
 8008470:	2339      	movs	r3, #57	; 0x39
 8008472:	7013      	strb	r3, [r2, #0]
 8008474:	462b      	mov	r3, r5
 8008476:	461d      	mov	r5, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800847e:	2a39      	cmp	r2, #57	; 0x39
 8008480:	d06c      	beq.n	800855c <_dtoa_r+0xba4>
 8008482:	3201      	adds	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e747      	b.n	8008318 <_dtoa_r+0x960>
 8008488:	2a00      	cmp	r2, #0
 800848a:	dd07      	ble.n	800849c <_dtoa_r+0xae4>
 800848c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008490:	d0ed      	beq.n	800846e <_dtoa_r+0xab6>
 8008492:	9a01      	ldr	r2, [sp, #4]
 8008494:	f109 0301 	add.w	r3, r9, #1
 8008498:	7013      	strb	r3, [r2, #0]
 800849a:	e73d      	b.n	8008318 <_dtoa_r+0x960>
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	9a08      	ldr	r2, [sp, #32]
 80084a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d043      	beq.n	8008530 <_dtoa_r+0xb78>
 80084a8:	4651      	mov	r1, sl
 80084aa:	2300      	movs	r3, #0
 80084ac:	220a      	movs	r2, #10
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 fc8c 	bl	8008dcc <__multadd>
 80084b4:	45b8      	cmp	r8, r7
 80084b6:	4682      	mov	sl, r0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	f04f 020a 	mov.w	r2, #10
 80084c0:	4641      	mov	r1, r8
 80084c2:	4620      	mov	r0, r4
 80084c4:	d107      	bne.n	80084d6 <_dtoa_r+0xb1e>
 80084c6:	f000 fc81 	bl	8008dcc <__multadd>
 80084ca:	4680      	mov	r8, r0
 80084cc:	4607      	mov	r7, r0
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	e775      	b.n	80083c2 <_dtoa_r+0xa0a>
 80084d6:	f000 fc79 	bl	8008dcc <__multadd>
 80084da:	4639      	mov	r1, r7
 80084dc:	4680      	mov	r8, r0
 80084de:	2300      	movs	r3, #0
 80084e0:	220a      	movs	r2, #10
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fc72 	bl	8008dcc <__multadd>
 80084e8:	4607      	mov	r7, r0
 80084ea:	e7f0      	b.n	80084ce <_dtoa_r+0xb16>
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	9d00      	ldr	r5, [sp, #0]
 80084f2:	4631      	mov	r1, r6
 80084f4:	4650      	mov	r0, sl
 80084f6:	f7ff f9d5 	bl	80078a4 <quorem>
 80084fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	f805 9b01 	strb.w	r9, [r5], #1
 8008504:	1aea      	subs	r2, r5, r3
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	4293      	cmp	r3, r2
 800850a:	dd07      	ble.n	800851c <_dtoa_r+0xb64>
 800850c:	4651      	mov	r1, sl
 800850e:	2300      	movs	r3, #0
 8008510:	220a      	movs	r2, #10
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fc5a 	bl	8008dcc <__multadd>
 8008518:	4682      	mov	sl, r0
 800851a:	e7ea      	b.n	80084f2 <_dtoa_r+0xb3a>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	bfc8      	it	gt
 8008522:	461d      	movgt	r5, r3
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	bfd8      	it	le
 8008528:	2501      	movle	r5, #1
 800852a:	441d      	add	r5, r3
 800852c:	f04f 0800 	mov.w	r8, #0
 8008530:	4651      	mov	r1, sl
 8008532:	2201      	movs	r2, #1
 8008534:	4620      	mov	r0, r4
 8008536:	f000 fe41 	bl	80091bc <__lshift>
 800853a:	4631      	mov	r1, r6
 800853c:	4682      	mov	sl, r0
 800853e:	f000 fea9 	bl	8009294 <__mcmp>
 8008542:	2800      	cmp	r0, #0
 8008544:	dc96      	bgt.n	8008474 <_dtoa_r+0xabc>
 8008546:	d102      	bne.n	800854e <_dtoa_r+0xb96>
 8008548:	f019 0f01 	tst.w	r9, #1
 800854c:	d192      	bne.n	8008474 <_dtoa_r+0xabc>
 800854e:	462b      	mov	r3, r5
 8008550:	461d      	mov	r5, r3
 8008552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008556:	2a30      	cmp	r2, #48	; 0x30
 8008558:	d0fa      	beq.n	8008550 <_dtoa_r+0xb98>
 800855a:	e6dd      	b.n	8008318 <_dtoa_r+0x960>
 800855c:	9a00      	ldr	r2, [sp, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d189      	bne.n	8008476 <_dtoa_r+0xabe>
 8008562:	f10b 0b01 	add.w	fp, fp, #1
 8008566:	2331      	movs	r3, #49	; 0x31
 8008568:	e796      	b.n	8008498 <_dtoa_r+0xae0>
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <_dtoa_r+0xbdc>)
 800856c:	f7ff ba99 	b.w	8007aa2 <_dtoa_r+0xea>
 8008570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008572:	2b00      	cmp	r3, #0
 8008574:	f47f aa6d 	bne.w	8007a52 <_dtoa_r+0x9a>
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <_dtoa_r+0xbe0>)
 800857a:	f7ff ba92 	b.w	8007aa2 <_dtoa_r+0xea>
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	dcb5      	bgt.n	80084f0 <_dtoa_r+0xb38>
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	2b02      	cmp	r3, #2
 8008588:	f73f aeb1 	bgt.w	80082ee <_dtoa_r+0x936>
 800858c:	e7b0      	b.n	80084f0 <_dtoa_r+0xb38>
 800858e:	bf00      	nop
 8008590:	0800ac6b 	.word	0x0800ac6b
 8008594:	0800af5c 	.word	0x0800af5c
 8008598:	0800abef 	.word	0x0800abef

0800859c <_free_r>:
 800859c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800859e:	2900      	cmp	r1, #0
 80085a0:	d044      	beq.n	800862c <_free_r+0x90>
 80085a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a6:	9001      	str	r0, [sp, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f1a1 0404 	sub.w	r4, r1, #4
 80085ae:	bfb8      	it	lt
 80085b0:	18e4      	addlt	r4, r4, r3
 80085b2:	f7fd fa41 	bl	8005a38 <__malloc_lock>
 80085b6:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <_free_r+0x94>)
 80085b8:	9801      	ldr	r0, [sp, #4]
 80085ba:	6813      	ldr	r3, [r2, #0]
 80085bc:	b933      	cbnz	r3, 80085cc <_free_r+0x30>
 80085be:	6063      	str	r3, [r4, #4]
 80085c0:	6014      	str	r4, [r2, #0]
 80085c2:	b003      	add	sp, #12
 80085c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c8:	f7fd ba3c 	b.w	8005a44 <__malloc_unlock>
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d908      	bls.n	80085e2 <_free_r+0x46>
 80085d0:	6825      	ldr	r5, [r4, #0]
 80085d2:	1961      	adds	r1, r4, r5
 80085d4:	428b      	cmp	r3, r1
 80085d6:	bf01      	itttt	eq
 80085d8:	6819      	ldreq	r1, [r3, #0]
 80085da:	685b      	ldreq	r3, [r3, #4]
 80085dc:	1949      	addeq	r1, r1, r5
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	e7ed      	b.n	80085be <_free_r+0x22>
 80085e2:	461a      	mov	r2, r3
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	b10b      	cbz	r3, 80085ec <_free_r+0x50>
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d9fa      	bls.n	80085e2 <_free_r+0x46>
 80085ec:	6811      	ldr	r1, [r2, #0]
 80085ee:	1855      	adds	r5, r2, r1
 80085f0:	42a5      	cmp	r5, r4
 80085f2:	d10b      	bne.n	800860c <_free_r+0x70>
 80085f4:	6824      	ldr	r4, [r4, #0]
 80085f6:	4421      	add	r1, r4
 80085f8:	1854      	adds	r4, r2, r1
 80085fa:	42a3      	cmp	r3, r4
 80085fc:	6011      	str	r1, [r2, #0]
 80085fe:	d1e0      	bne.n	80085c2 <_free_r+0x26>
 8008600:	681c      	ldr	r4, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	6053      	str	r3, [r2, #4]
 8008606:	440c      	add	r4, r1
 8008608:	6014      	str	r4, [r2, #0]
 800860a:	e7da      	b.n	80085c2 <_free_r+0x26>
 800860c:	d902      	bls.n	8008614 <_free_r+0x78>
 800860e:	230c      	movs	r3, #12
 8008610:	6003      	str	r3, [r0, #0]
 8008612:	e7d6      	b.n	80085c2 <_free_r+0x26>
 8008614:	6825      	ldr	r5, [r4, #0]
 8008616:	1961      	adds	r1, r4, r5
 8008618:	428b      	cmp	r3, r1
 800861a:	bf04      	itt	eq
 800861c:	6819      	ldreq	r1, [r3, #0]
 800861e:	685b      	ldreq	r3, [r3, #4]
 8008620:	6063      	str	r3, [r4, #4]
 8008622:	bf04      	itt	eq
 8008624:	1949      	addeq	r1, r1, r5
 8008626:	6021      	streq	r1, [r4, #0]
 8008628:	6054      	str	r4, [r2, #4]
 800862a:	e7ca      	b.n	80085c2 <_free_r+0x26>
 800862c:	b003      	add	sp, #12
 800862e:	bd30      	pop	{r4, r5, pc}
 8008630:	20000410 	.word	0x20000410

08008634 <rshift>:
 8008634:	6903      	ldr	r3, [r0, #16]
 8008636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800863a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800863e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008642:	f100 0414 	add.w	r4, r0, #20
 8008646:	dd45      	ble.n	80086d4 <rshift+0xa0>
 8008648:	f011 011f 	ands.w	r1, r1, #31
 800864c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008654:	d10c      	bne.n	8008670 <rshift+0x3c>
 8008656:	f100 0710 	add.w	r7, r0, #16
 800865a:	4629      	mov	r1, r5
 800865c:	42b1      	cmp	r1, r6
 800865e:	d334      	bcc.n	80086ca <rshift+0x96>
 8008660:	1a9b      	subs	r3, r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	1eea      	subs	r2, r5, #3
 8008666:	4296      	cmp	r6, r2
 8008668:	bf38      	it	cc
 800866a:	2300      	movcc	r3, #0
 800866c:	4423      	add	r3, r4
 800866e:	e015      	b.n	800869c <rshift+0x68>
 8008670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008674:	f1c1 0820 	rsb	r8, r1, #32
 8008678:	40cf      	lsrs	r7, r1
 800867a:	f105 0e04 	add.w	lr, r5, #4
 800867e:	46a1      	mov	r9, r4
 8008680:	4576      	cmp	r6, lr
 8008682:	46f4      	mov	ip, lr
 8008684:	d815      	bhi.n	80086b2 <rshift+0x7e>
 8008686:	1a9a      	subs	r2, r3, r2
 8008688:	0092      	lsls	r2, r2, #2
 800868a:	3a04      	subs	r2, #4
 800868c:	3501      	adds	r5, #1
 800868e:	42ae      	cmp	r6, r5
 8008690:	bf38      	it	cc
 8008692:	2200      	movcc	r2, #0
 8008694:	18a3      	adds	r3, r4, r2
 8008696:	50a7      	str	r7, [r4, r2]
 8008698:	b107      	cbz	r7, 800869c <rshift+0x68>
 800869a:	3304      	adds	r3, #4
 800869c:	1b1a      	subs	r2, r3, r4
 800869e:	42a3      	cmp	r3, r4
 80086a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086a4:	bf08      	it	eq
 80086a6:	2300      	moveq	r3, #0
 80086a8:	6102      	str	r2, [r0, #16]
 80086aa:	bf08      	it	eq
 80086ac:	6143      	streq	r3, [r0, #20]
 80086ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086b2:	f8dc c000 	ldr.w	ip, [ip]
 80086b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80086ba:	ea4c 0707 	orr.w	r7, ip, r7
 80086be:	f849 7b04 	str.w	r7, [r9], #4
 80086c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086c6:	40cf      	lsrs	r7, r1
 80086c8:	e7da      	b.n	8008680 <rshift+0x4c>
 80086ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80086ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80086d2:	e7c3      	b.n	800865c <rshift+0x28>
 80086d4:	4623      	mov	r3, r4
 80086d6:	e7e1      	b.n	800869c <rshift+0x68>

080086d8 <__hexdig_fun>:
 80086d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d802      	bhi.n	80086e6 <__hexdig_fun+0xe>
 80086e0:	3820      	subs	r0, #32
 80086e2:	b2c0      	uxtb	r0, r0
 80086e4:	4770      	bx	lr
 80086e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d801      	bhi.n	80086f2 <__hexdig_fun+0x1a>
 80086ee:	3847      	subs	r0, #71	; 0x47
 80086f0:	e7f7      	b.n	80086e2 <__hexdig_fun+0xa>
 80086f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	d801      	bhi.n	80086fe <__hexdig_fun+0x26>
 80086fa:	3827      	subs	r0, #39	; 0x27
 80086fc:	e7f1      	b.n	80086e2 <__hexdig_fun+0xa>
 80086fe:	2000      	movs	r0, #0
 8008700:	4770      	bx	lr
	...

08008704 <__gethex>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	4617      	mov	r7, r2
 800870a:	680a      	ldr	r2, [r1, #0]
 800870c:	b085      	sub	sp, #20
 800870e:	f102 0b02 	add.w	fp, r2, #2
 8008712:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008716:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800871a:	4681      	mov	r9, r0
 800871c:	468a      	mov	sl, r1
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	32fe      	adds	r2, #254	; 0xfe
 8008722:	eb02 030b 	add.w	r3, r2, fp
 8008726:	46d8      	mov	r8, fp
 8008728:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	2830      	cmp	r0, #48	; 0x30
 8008730:	d0f7      	beq.n	8008722 <__gethex+0x1e>
 8008732:	f7ff ffd1 	bl	80086d8 <__hexdig_fun>
 8008736:	4604      	mov	r4, r0
 8008738:	2800      	cmp	r0, #0
 800873a:	d138      	bne.n	80087ae <__gethex+0xaa>
 800873c:	49a7      	ldr	r1, [pc, #668]	; (80089dc <__gethex+0x2d8>)
 800873e:	2201      	movs	r2, #1
 8008740:	4640      	mov	r0, r8
 8008742:	f7fe ffe5 	bl	8007710 <strncmp>
 8008746:	4606      	mov	r6, r0
 8008748:	2800      	cmp	r0, #0
 800874a:	d169      	bne.n	8008820 <__gethex+0x11c>
 800874c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008750:	465d      	mov	r5, fp
 8008752:	f7ff ffc1 	bl	80086d8 <__hexdig_fun>
 8008756:	2800      	cmp	r0, #0
 8008758:	d064      	beq.n	8008824 <__gethex+0x120>
 800875a:	465a      	mov	r2, fp
 800875c:	7810      	ldrb	r0, [r2, #0]
 800875e:	2830      	cmp	r0, #48	; 0x30
 8008760:	4690      	mov	r8, r2
 8008762:	f102 0201 	add.w	r2, r2, #1
 8008766:	d0f9      	beq.n	800875c <__gethex+0x58>
 8008768:	f7ff ffb6 	bl	80086d8 <__hexdig_fun>
 800876c:	2301      	movs	r3, #1
 800876e:	fab0 f480 	clz	r4, r0
 8008772:	0964      	lsrs	r4, r4, #5
 8008774:	465e      	mov	r6, fp
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	4642      	mov	r2, r8
 800877a:	4615      	mov	r5, r2
 800877c:	3201      	adds	r2, #1
 800877e:	7828      	ldrb	r0, [r5, #0]
 8008780:	f7ff ffaa 	bl	80086d8 <__hexdig_fun>
 8008784:	2800      	cmp	r0, #0
 8008786:	d1f8      	bne.n	800877a <__gethex+0x76>
 8008788:	4994      	ldr	r1, [pc, #592]	; (80089dc <__gethex+0x2d8>)
 800878a:	2201      	movs	r2, #1
 800878c:	4628      	mov	r0, r5
 800878e:	f7fe ffbf 	bl	8007710 <strncmp>
 8008792:	b978      	cbnz	r0, 80087b4 <__gethex+0xb0>
 8008794:	b946      	cbnz	r6, 80087a8 <__gethex+0xa4>
 8008796:	1c6e      	adds	r6, r5, #1
 8008798:	4632      	mov	r2, r6
 800879a:	4615      	mov	r5, r2
 800879c:	3201      	adds	r2, #1
 800879e:	7828      	ldrb	r0, [r5, #0]
 80087a0:	f7ff ff9a 	bl	80086d8 <__hexdig_fun>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d1f8      	bne.n	800879a <__gethex+0x96>
 80087a8:	1b73      	subs	r3, r6, r5
 80087aa:	009e      	lsls	r6, r3, #2
 80087ac:	e004      	b.n	80087b8 <__gethex+0xb4>
 80087ae:	2400      	movs	r4, #0
 80087b0:	4626      	mov	r6, r4
 80087b2:	e7e1      	b.n	8008778 <__gethex+0x74>
 80087b4:	2e00      	cmp	r6, #0
 80087b6:	d1f7      	bne.n	80087a8 <__gethex+0xa4>
 80087b8:	782b      	ldrb	r3, [r5, #0]
 80087ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087be:	2b50      	cmp	r3, #80	; 0x50
 80087c0:	d13d      	bne.n	800883e <__gethex+0x13a>
 80087c2:	786b      	ldrb	r3, [r5, #1]
 80087c4:	2b2b      	cmp	r3, #43	; 0x2b
 80087c6:	d02f      	beq.n	8008828 <__gethex+0x124>
 80087c8:	2b2d      	cmp	r3, #45	; 0x2d
 80087ca:	d031      	beq.n	8008830 <__gethex+0x12c>
 80087cc:	1c69      	adds	r1, r5, #1
 80087ce:	f04f 0b00 	mov.w	fp, #0
 80087d2:	7808      	ldrb	r0, [r1, #0]
 80087d4:	f7ff ff80 	bl	80086d8 <__hexdig_fun>
 80087d8:	1e42      	subs	r2, r0, #1
 80087da:	b2d2      	uxtb	r2, r2
 80087dc:	2a18      	cmp	r2, #24
 80087de:	d82e      	bhi.n	800883e <__gethex+0x13a>
 80087e0:	f1a0 0210 	sub.w	r2, r0, #16
 80087e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087e8:	f7ff ff76 	bl	80086d8 <__hexdig_fun>
 80087ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80087f0:	fa5f fc8c 	uxtb.w	ip, ip
 80087f4:	f1bc 0f18 	cmp.w	ip, #24
 80087f8:	d91d      	bls.n	8008836 <__gethex+0x132>
 80087fa:	f1bb 0f00 	cmp.w	fp, #0
 80087fe:	d000      	beq.n	8008802 <__gethex+0xfe>
 8008800:	4252      	negs	r2, r2
 8008802:	4416      	add	r6, r2
 8008804:	f8ca 1000 	str.w	r1, [sl]
 8008808:	b1dc      	cbz	r4, 8008842 <__gethex+0x13e>
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	bf14      	ite	ne
 8008810:	f04f 0800 	movne.w	r8, #0
 8008814:	f04f 0806 	moveq.w	r8, #6
 8008818:	4640      	mov	r0, r8
 800881a:	b005      	add	sp, #20
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	4645      	mov	r5, r8
 8008822:	4626      	mov	r6, r4
 8008824:	2401      	movs	r4, #1
 8008826:	e7c7      	b.n	80087b8 <__gethex+0xb4>
 8008828:	f04f 0b00 	mov.w	fp, #0
 800882c:	1ca9      	adds	r1, r5, #2
 800882e:	e7d0      	b.n	80087d2 <__gethex+0xce>
 8008830:	f04f 0b01 	mov.w	fp, #1
 8008834:	e7fa      	b.n	800882c <__gethex+0x128>
 8008836:	230a      	movs	r3, #10
 8008838:	fb03 0002 	mla	r0, r3, r2, r0
 800883c:	e7d0      	b.n	80087e0 <__gethex+0xdc>
 800883e:	4629      	mov	r1, r5
 8008840:	e7e0      	b.n	8008804 <__gethex+0x100>
 8008842:	eba5 0308 	sub.w	r3, r5, r8
 8008846:	3b01      	subs	r3, #1
 8008848:	4621      	mov	r1, r4
 800884a:	2b07      	cmp	r3, #7
 800884c:	dc0a      	bgt.n	8008864 <__gethex+0x160>
 800884e:	4648      	mov	r0, r9
 8008850:	f000 fa5a 	bl	8008d08 <_Balloc>
 8008854:	4604      	mov	r4, r0
 8008856:	b940      	cbnz	r0, 800886a <__gethex+0x166>
 8008858:	4b61      	ldr	r3, [pc, #388]	; (80089e0 <__gethex+0x2dc>)
 800885a:	4602      	mov	r2, r0
 800885c:	21e4      	movs	r1, #228	; 0xe4
 800885e:	4861      	ldr	r0, [pc, #388]	; (80089e4 <__gethex+0x2e0>)
 8008860:	f001 fd46 	bl	800a2f0 <__assert_func>
 8008864:	3101      	adds	r1, #1
 8008866:	105b      	asrs	r3, r3, #1
 8008868:	e7ef      	b.n	800884a <__gethex+0x146>
 800886a:	f100 0a14 	add.w	sl, r0, #20
 800886e:	2300      	movs	r3, #0
 8008870:	495a      	ldr	r1, [pc, #360]	; (80089dc <__gethex+0x2d8>)
 8008872:	f8cd a004 	str.w	sl, [sp, #4]
 8008876:	469b      	mov	fp, r3
 8008878:	45a8      	cmp	r8, r5
 800887a:	d342      	bcc.n	8008902 <__gethex+0x1fe>
 800887c:	9801      	ldr	r0, [sp, #4]
 800887e:	f840 bb04 	str.w	fp, [r0], #4
 8008882:	eba0 000a 	sub.w	r0, r0, sl
 8008886:	1080      	asrs	r0, r0, #2
 8008888:	6120      	str	r0, [r4, #16]
 800888a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800888e:	4658      	mov	r0, fp
 8008890:	f000 fb2c 	bl	8008eec <__hi0bits>
 8008894:	683d      	ldr	r5, [r7, #0]
 8008896:	eba8 0000 	sub.w	r0, r8, r0
 800889a:	42a8      	cmp	r0, r5
 800889c:	dd59      	ble.n	8008952 <__gethex+0x24e>
 800889e:	eba0 0805 	sub.w	r8, r0, r5
 80088a2:	4641      	mov	r1, r8
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 febb 	bl	8009620 <__any_on>
 80088aa:	4683      	mov	fp, r0
 80088ac:	b1b8      	cbz	r0, 80088de <__gethex+0x1da>
 80088ae:	f108 33ff 	add.w	r3, r8, #4294967295
 80088b2:	1159      	asrs	r1, r3, #5
 80088b4:	f003 021f 	and.w	r2, r3, #31
 80088b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088bc:	f04f 0b01 	mov.w	fp, #1
 80088c0:	fa0b f202 	lsl.w	r2, fp, r2
 80088c4:	420a      	tst	r2, r1
 80088c6:	d00a      	beq.n	80088de <__gethex+0x1da>
 80088c8:	455b      	cmp	r3, fp
 80088ca:	dd06      	ble.n	80088da <__gethex+0x1d6>
 80088cc:	f1a8 0102 	sub.w	r1, r8, #2
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fea5 	bl	8009620 <__any_on>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d138      	bne.n	800894c <__gethex+0x248>
 80088da:	f04f 0b02 	mov.w	fp, #2
 80088de:	4641      	mov	r1, r8
 80088e0:	4620      	mov	r0, r4
 80088e2:	f7ff fea7 	bl	8008634 <rshift>
 80088e6:	4446      	add	r6, r8
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	42b3      	cmp	r3, r6
 80088ec:	da41      	bge.n	8008972 <__gethex+0x26e>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4648      	mov	r0, r9
 80088f2:	f000 fa49 	bl	8008d88 <_Bfree>
 80088f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088f8:	2300      	movs	r3, #0
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008900:	e78a      	b.n	8008818 <__gethex+0x114>
 8008902:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008906:	2a2e      	cmp	r2, #46	; 0x2e
 8008908:	d014      	beq.n	8008934 <__gethex+0x230>
 800890a:	2b20      	cmp	r3, #32
 800890c:	d106      	bne.n	800891c <__gethex+0x218>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	f843 bb04 	str.w	fp, [r3], #4
 8008914:	f04f 0b00 	mov.w	fp, #0
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	465b      	mov	r3, fp
 800891c:	7828      	ldrb	r0, [r5, #0]
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	f7ff feda 	bl	80086d8 <__hexdig_fun>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	f000 000f 	and.w	r0, r0, #15
 800892a:	4098      	lsls	r0, r3
 800892c:	ea4b 0b00 	orr.w	fp, fp, r0
 8008930:	3304      	adds	r3, #4
 8008932:	e7a1      	b.n	8008878 <__gethex+0x174>
 8008934:	45a8      	cmp	r8, r5
 8008936:	d8e8      	bhi.n	800890a <__gethex+0x206>
 8008938:	2201      	movs	r2, #1
 800893a:	4628      	mov	r0, r5
 800893c:	9303      	str	r3, [sp, #12]
 800893e:	f7fe fee7 	bl	8007710 <strncmp>
 8008942:	4926      	ldr	r1, [pc, #152]	; (80089dc <__gethex+0x2d8>)
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	2800      	cmp	r0, #0
 8008948:	d1df      	bne.n	800890a <__gethex+0x206>
 800894a:	e795      	b.n	8008878 <__gethex+0x174>
 800894c:	f04f 0b03 	mov.w	fp, #3
 8008950:	e7c5      	b.n	80088de <__gethex+0x1da>
 8008952:	da0b      	bge.n	800896c <__gethex+0x268>
 8008954:	eba5 0800 	sub.w	r8, r5, r0
 8008958:	4621      	mov	r1, r4
 800895a:	4642      	mov	r2, r8
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fc2d 	bl	80091bc <__lshift>
 8008962:	eba6 0608 	sub.w	r6, r6, r8
 8008966:	4604      	mov	r4, r0
 8008968:	f100 0a14 	add.w	sl, r0, #20
 800896c:	f04f 0b00 	mov.w	fp, #0
 8008970:	e7ba      	b.n	80088e8 <__gethex+0x1e4>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	42b3      	cmp	r3, r6
 8008976:	dd73      	ble.n	8008a60 <__gethex+0x35c>
 8008978:	1b9e      	subs	r6, r3, r6
 800897a:	42b5      	cmp	r5, r6
 800897c:	dc34      	bgt.n	80089e8 <__gethex+0x2e4>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d023      	beq.n	80089cc <__gethex+0x2c8>
 8008984:	2b03      	cmp	r3, #3
 8008986:	d025      	beq.n	80089d4 <__gethex+0x2d0>
 8008988:	2b01      	cmp	r3, #1
 800898a:	d115      	bne.n	80089b8 <__gethex+0x2b4>
 800898c:	42b5      	cmp	r5, r6
 800898e:	d113      	bne.n	80089b8 <__gethex+0x2b4>
 8008990:	2d01      	cmp	r5, #1
 8008992:	d10b      	bne.n	80089ac <__gethex+0x2a8>
 8008994:	9a02      	ldr	r2, [sp, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	2301      	movs	r3, #1
 800899c:	6123      	str	r3, [r4, #16]
 800899e:	f8ca 3000 	str.w	r3, [sl]
 80089a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80089a8:	601c      	str	r4, [r3, #0]
 80089aa:	e735      	b.n	8008818 <__gethex+0x114>
 80089ac:	1e69      	subs	r1, r5, #1
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 fe36 	bl	8009620 <__any_on>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d1ed      	bne.n	8008994 <__gethex+0x290>
 80089b8:	4621      	mov	r1, r4
 80089ba:	4648      	mov	r0, r9
 80089bc:	f000 f9e4 	bl	8008d88 <_Bfree>
 80089c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089c2:	2300      	movs	r3, #0
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80089ca:	e725      	b.n	8008818 <__gethex+0x114>
 80089cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f2      	bne.n	80089b8 <__gethex+0x2b4>
 80089d2:	e7df      	b.n	8008994 <__gethex+0x290>
 80089d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1dc      	bne.n	8008994 <__gethex+0x290>
 80089da:	e7ed      	b.n	80089b8 <__gethex+0x2b4>
 80089dc:	0800ab58 	.word	0x0800ab58
 80089e0:	0800ac6b 	.word	0x0800ac6b
 80089e4:	0800ac7c 	.word	0x0800ac7c
 80089e8:	f106 38ff 	add.w	r8, r6, #4294967295
 80089ec:	f1bb 0f00 	cmp.w	fp, #0
 80089f0:	d133      	bne.n	8008a5a <__gethex+0x356>
 80089f2:	f1b8 0f00 	cmp.w	r8, #0
 80089f6:	d004      	beq.n	8008a02 <__gethex+0x2fe>
 80089f8:	4641      	mov	r1, r8
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 fe10 	bl	8009620 <__any_on>
 8008a00:	4683      	mov	fp, r0
 8008a02:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a06:	2301      	movs	r3, #1
 8008a08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a0c:	f008 081f 	and.w	r8, r8, #31
 8008a10:	fa03 f308 	lsl.w	r3, r3, r8
 8008a14:	4213      	tst	r3, r2
 8008a16:	4631      	mov	r1, r6
 8008a18:	4620      	mov	r0, r4
 8008a1a:	bf18      	it	ne
 8008a1c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a20:	1bad      	subs	r5, r5, r6
 8008a22:	f7ff fe07 	bl	8008634 <rshift>
 8008a26:	687e      	ldr	r6, [r7, #4]
 8008a28:	f04f 0802 	mov.w	r8, #2
 8008a2c:	f1bb 0f00 	cmp.w	fp, #0
 8008a30:	d04a      	beq.n	8008ac8 <__gethex+0x3c4>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d016      	beq.n	8008a66 <__gethex+0x362>
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d018      	beq.n	8008a6e <__gethex+0x36a>
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d109      	bne.n	8008a54 <__gethex+0x350>
 8008a40:	f01b 0f02 	tst.w	fp, #2
 8008a44:	d006      	beq.n	8008a54 <__gethex+0x350>
 8008a46:	f8da 3000 	ldr.w	r3, [sl]
 8008a4a:	ea4b 0b03 	orr.w	fp, fp, r3
 8008a4e:	f01b 0f01 	tst.w	fp, #1
 8008a52:	d10f      	bne.n	8008a74 <__gethex+0x370>
 8008a54:	f048 0810 	orr.w	r8, r8, #16
 8008a58:	e036      	b.n	8008ac8 <__gethex+0x3c4>
 8008a5a:	f04f 0b01 	mov.w	fp, #1
 8008a5e:	e7d0      	b.n	8008a02 <__gethex+0x2fe>
 8008a60:	f04f 0801 	mov.w	r8, #1
 8008a64:	e7e2      	b.n	8008a2c <__gethex+0x328>
 8008a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a68:	f1c3 0301 	rsb	r3, r3, #1
 8008a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0ef      	beq.n	8008a54 <__gethex+0x350>
 8008a74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a78:	f104 0214 	add.w	r2, r4, #20
 8008a7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008a86:	2300      	movs	r3, #0
 8008a88:	4694      	mov	ip, r2
 8008a8a:	f852 1b04 	ldr.w	r1, [r2], #4
 8008a8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008a92:	d01e      	beq.n	8008ad2 <__gethex+0x3ce>
 8008a94:	3101      	adds	r1, #1
 8008a96:	f8cc 1000 	str.w	r1, [ip]
 8008a9a:	f1b8 0f02 	cmp.w	r8, #2
 8008a9e:	f104 0214 	add.w	r2, r4, #20
 8008aa2:	d13d      	bne.n	8008b20 <__gethex+0x41c>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	d10b      	bne.n	8008ac4 <__gethex+0x3c0>
 8008aac:	1169      	asrs	r1, r5, #5
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f005 051f 	and.w	r5, r5, #31
 8008ab4:	fa03 f505 	lsl.w	r5, r3, r5
 8008ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008abc:	421d      	tst	r5, r3
 8008abe:	bf18      	it	ne
 8008ac0:	f04f 0801 	movne.w	r8, #1
 8008ac4:	f048 0820 	orr.w	r8, r8, #32
 8008ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aca:	601c      	str	r4, [r3, #0]
 8008acc:	9b02      	ldr	r3, [sp, #8]
 8008ace:	601e      	str	r6, [r3, #0]
 8008ad0:	e6a2      	b.n	8008818 <__gethex+0x114>
 8008ad2:	4290      	cmp	r0, r2
 8008ad4:	f842 3c04 	str.w	r3, [r2, #-4]
 8008ad8:	d8d6      	bhi.n	8008a88 <__gethex+0x384>
 8008ada:	68a2      	ldr	r2, [r4, #8]
 8008adc:	4593      	cmp	fp, r2
 8008ade:	db17      	blt.n	8008b10 <__gethex+0x40c>
 8008ae0:	6861      	ldr	r1, [r4, #4]
 8008ae2:	4648      	mov	r0, r9
 8008ae4:	3101      	adds	r1, #1
 8008ae6:	f000 f90f 	bl	8008d08 <_Balloc>
 8008aea:	4682      	mov	sl, r0
 8008aec:	b918      	cbnz	r0, 8008af6 <__gethex+0x3f2>
 8008aee:	4b1b      	ldr	r3, [pc, #108]	; (8008b5c <__gethex+0x458>)
 8008af0:	4602      	mov	r2, r0
 8008af2:	2184      	movs	r1, #132	; 0x84
 8008af4:	e6b3      	b.n	800885e <__gethex+0x15a>
 8008af6:	6922      	ldr	r2, [r4, #16]
 8008af8:	3202      	adds	r2, #2
 8008afa:	f104 010c 	add.w	r1, r4, #12
 8008afe:	0092      	lsls	r2, r2, #2
 8008b00:	300c      	adds	r0, #12
 8008b02:	f7fe feb2 	bl	800786a <memcpy>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4648      	mov	r0, r9
 8008b0a:	f000 f93d 	bl	8008d88 <_Bfree>
 8008b0e:	4654      	mov	r4, sl
 8008b10:	6922      	ldr	r2, [r4, #16]
 8008b12:	1c51      	adds	r1, r2, #1
 8008b14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b18:	6121      	str	r1, [r4, #16]
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	6151      	str	r1, [r2, #20]
 8008b1e:	e7bc      	b.n	8008a9a <__gethex+0x396>
 8008b20:	6921      	ldr	r1, [r4, #16]
 8008b22:	4559      	cmp	r1, fp
 8008b24:	dd0b      	ble.n	8008b3e <__gethex+0x43a>
 8008b26:	2101      	movs	r1, #1
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7ff fd83 	bl	8008634 <rshift>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	3601      	adds	r6, #1
 8008b32:	42b3      	cmp	r3, r6
 8008b34:	f6ff aedb 	blt.w	80088ee <__gethex+0x1ea>
 8008b38:	f04f 0801 	mov.w	r8, #1
 8008b3c:	e7c2      	b.n	8008ac4 <__gethex+0x3c0>
 8008b3e:	f015 051f 	ands.w	r5, r5, #31
 8008b42:	d0f9      	beq.n	8008b38 <__gethex+0x434>
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	441a      	add	r2, r3
 8008b48:	f1c5 0520 	rsb	r5, r5, #32
 8008b4c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008b50:	f000 f9cc 	bl	8008eec <__hi0bits>
 8008b54:	42a8      	cmp	r0, r5
 8008b56:	dbe6      	blt.n	8008b26 <__gethex+0x422>
 8008b58:	e7ee      	b.n	8008b38 <__gethex+0x434>
 8008b5a:	bf00      	nop
 8008b5c:	0800ac6b 	.word	0x0800ac6b

08008b60 <L_shift>:
 8008b60:	f1c2 0208 	rsb	r2, r2, #8
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	b570      	push	{r4, r5, r6, lr}
 8008b68:	f1c2 0620 	rsb	r6, r2, #32
 8008b6c:	6843      	ldr	r3, [r0, #4]
 8008b6e:	6804      	ldr	r4, [r0, #0]
 8008b70:	fa03 f506 	lsl.w	r5, r3, r6
 8008b74:	432c      	orrs	r4, r5
 8008b76:	40d3      	lsrs	r3, r2
 8008b78:	6004      	str	r4, [r0, #0]
 8008b7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b7e:	4288      	cmp	r0, r1
 8008b80:	d3f4      	bcc.n	8008b6c <L_shift+0xc>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}

08008b84 <__match>:
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	6803      	ldr	r3, [r0, #0]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b8e:	b914      	cbnz	r4, 8008b96 <__match+0x12>
 8008b90:	6003      	str	r3, [r0, #0]
 8008b92:	2001      	movs	r0, #1
 8008b94:	bd30      	pop	{r4, r5, pc}
 8008b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008b9e:	2d19      	cmp	r5, #25
 8008ba0:	bf98      	it	ls
 8008ba2:	3220      	addls	r2, #32
 8008ba4:	42a2      	cmp	r2, r4
 8008ba6:	d0f0      	beq.n	8008b8a <__match+0x6>
 8008ba8:	2000      	movs	r0, #0
 8008baa:	e7f3      	b.n	8008b94 <__match+0x10>

08008bac <__hexnan>:
 8008bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	680b      	ldr	r3, [r1, #0]
 8008bb2:	6801      	ldr	r1, [r0, #0]
 8008bb4:	115e      	asrs	r6, r3, #5
 8008bb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bba:	f013 031f 	ands.w	r3, r3, #31
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	bf18      	it	ne
 8008bc2:	3604      	addne	r6, #4
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	1f37      	subs	r7, r6, #4
 8008bc8:	4682      	mov	sl, r0
 8008bca:	4690      	mov	r8, r2
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bd2:	46b9      	mov	r9, r7
 8008bd4:	463c      	mov	r4, r7
 8008bd6:	9502      	str	r5, [sp, #8]
 8008bd8:	46ab      	mov	fp, r5
 8008bda:	784a      	ldrb	r2, [r1, #1]
 8008bdc:	1c4b      	adds	r3, r1, #1
 8008bde:	9303      	str	r3, [sp, #12]
 8008be0:	b342      	cbz	r2, 8008c34 <__hexnan+0x88>
 8008be2:	4610      	mov	r0, r2
 8008be4:	9105      	str	r1, [sp, #20]
 8008be6:	9204      	str	r2, [sp, #16]
 8008be8:	f7ff fd76 	bl	80086d8 <__hexdig_fun>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d14f      	bne.n	8008c90 <__hexnan+0xe4>
 8008bf0:	9a04      	ldr	r2, [sp, #16]
 8008bf2:	9905      	ldr	r1, [sp, #20]
 8008bf4:	2a20      	cmp	r2, #32
 8008bf6:	d818      	bhi.n	8008c2a <__hexnan+0x7e>
 8008bf8:	9b02      	ldr	r3, [sp, #8]
 8008bfa:	459b      	cmp	fp, r3
 8008bfc:	dd13      	ble.n	8008c26 <__hexnan+0x7a>
 8008bfe:	454c      	cmp	r4, r9
 8008c00:	d206      	bcs.n	8008c10 <__hexnan+0x64>
 8008c02:	2d07      	cmp	r5, #7
 8008c04:	dc04      	bgt.n	8008c10 <__hexnan+0x64>
 8008c06:	462a      	mov	r2, r5
 8008c08:	4649      	mov	r1, r9
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff ffa8 	bl	8008b60 <L_shift>
 8008c10:	4544      	cmp	r4, r8
 8008c12:	d950      	bls.n	8008cb6 <__hexnan+0x10a>
 8008c14:	2300      	movs	r3, #0
 8008c16:	f1a4 0904 	sub.w	r9, r4, #4
 8008c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8008c22:	464c      	mov	r4, r9
 8008c24:	461d      	mov	r5, r3
 8008c26:	9903      	ldr	r1, [sp, #12]
 8008c28:	e7d7      	b.n	8008bda <__hexnan+0x2e>
 8008c2a:	2a29      	cmp	r2, #41	; 0x29
 8008c2c:	d155      	bne.n	8008cda <__hexnan+0x12e>
 8008c2e:	3102      	adds	r1, #2
 8008c30:	f8ca 1000 	str.w	r1, [sl]
 8008c34:	f1bb 0f00 	cmp.w	fp, #0
 8008c38:	d04f      	beq.n	8008cda <__hexnan+0x12e>
 8008c3a:	454c      	cmp	r4, r9
 8008c3c:	d206      	bcs.n	8008c4c <__hexnan+0xa0>
 8008c3e:	2d07      	cmp	r5, #7
 8008c40:	dc04      	bgt.n	8008c4c <__hexnan+0xa0>
 8008c42:	462a      	mov	r2, r5
 8008c44:	4649      	mov	r1, r9
 8008c46:	4620      	mov	r0, r4
 8008c48:	f7ff ff8a 	bl	8008b60 <L_shift>
 8008c4c:	4544      	cmp	r4, r8
 8008c4e:	d934      	bls.n	8008cba <__hexnan+0x10e>
 8008c50:	f1a8 0204 	sub.w	r2, r8, #4
 8008c54:	4623      	mov	r3, r4
 8008c56:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c5e:	429f      	cmp	r7, r3
 8008c60:	d2f9      	bcs.n	8008c56 <__hexnan+0xaa>
 8008c62:	1b3b      	subs	r3, r7, r4
 8008c64:	f023 0303 	bic.w	r3, r3, #3
 8008c68:	3304      	adds	r3, #4
 8008c6a:	3e03      	subs	r6, #3
 8008c6c:	3401      	adds	r4, #1
 8008c6e:	42a6      	cmp	r6, r4
 8008c70:	bf38      	it	cc
 8008c72:	2304      	movcc	r3, #4
 8008c74:	4443      	add	r3, r8
 8008c76:	2200      	movs	r2, #0
 8008c78:	f843 2b04 	str.w	r2, [r3], #4
 8008c7c:	429f      	cmp	r7, r3
 8008c7e:	d2fb      	bcs.n	8008c78 <__hexnan+0xcc>
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	b91b      	cbnz	r3, 8008c8c <__hexnan+0xe0>
 8008c84:	4547      	cmp	r7, r8
 8008c86:	d126      	bne.n	8008cd6 <__hexnan+0x12a>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	2005      	movs	r0, #5
 8008c8e:	e025      	b.n	8008cdc <__hexnan+0x130>
 8008c90:	3501      	adds	r5, #1
 8008c92:	2d08      	cmp	r5, #8
 8008c94:	f10b 0b01 	add.w	fp, fp, #1
 8008c98:	dd06      	ble.n	8008ca8 <__hexnan+0xfc>
 8008c9a:	4544      	cmp	r4, r8
 8008c9c:	d9c3      	bls.n	8008c26 <__hexnan+0x7a>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ca4:	2501      	movs	r5, #1
 8008ca6:	3c04      	subs	r4, #4
 8008ca8:	6822      	ldr	r2, [r4, #0]
 8008caa:	f000 000f 	and.w	r0, r0, #15
 8008cae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008cb2:	6020      	str	r0, [r4, #0]
 8008cb4:	e7b7      	b.n	8008c26 <__hexnan+0x7a>
 8008cb6:	2508      	movs	r5, #8
 8008cb8:	e7b5      	b.n	8008c26 <__hexnan+0x7a>
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0df      	beq.n	8008c80 <__hexnan+0xd4>
 8008cc0:	f1c3 0320 	rsb	r3, r3, #32
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc8:	40da      	lsrs	r2, r3
 8008cca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8008cd4:	e7d4      	b.n	8008c80 <__hexnan+0xd4>
 8008cd6:	3f04      	subs	r7, #4
 8008cd8:	e7d2      	b.n	8008c80 <__hexnan+0xd4>
 8008cda:	2004      	movs	r0, #4
 8008cdc:	b007      	add	sp, #28
 8008cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ce2 <__ascii_mbtowc>:
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	b901      	cbnz	r1, 8008ce8 <__ascii_mbtowc+0x6>
 8008ce6:	a901      	add	r1, sp, #4
 8008ce8:	b142      	cbz	r2, 8008cfc <__ascii_mbtowc+0x1a>
 8008cea:	b14b      	cbz	r3, 8008d00 <__ascii_mbtowc+0x1e>
 8008cec:	7813      	ldrb	r3, [r2, #0]
 8008cee:	600b      	str	r3, [r1, #0]
 8008cf0:	7812      	ldrb	r2, [r2, #0]
 8008cf2:	1e10      	subs	r0, r2, #0
 8008cf4:	bf18      	it	ne
 8008cf6:	2001      	movne	r0, #1
 8008cf8:	b002      	add	sp, #8
 8008cfa:	4770      	bx	lr
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	e7fb      	b.n	8008cf8 <__ascii_mbtowc+0x16>
 8008d00:	f06f 0001 	mvn.w	r0, #1
 8008d04:	e7f8      	b.n	8008cf8 <__ascii_mbtowc+0x16>
	...

08008d08 <_Balloc>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	69c6      	ldr	r6, [r0, #28]
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	b976      	cbnz	r6, 8008d30 <_Balloc+0x28>
 8008d12:	2010      	movs	r0, #16
 8008d14:	f7fc fde8 	bl	80058e8 <malloc>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	61e0      	str	r0, [r4, #28]
 8008d1c:	b920      	cbnz	r0, 8008d28 <_Balloc+0x20>
 8008d1e:	4b18      	ldr	r3, [pc, #96]	; (8008d80 <_Balloc+0x78>)
 8008d20:	4818      	ldr	r0, [pc, #96]	; (8008d84 <_Balloc+0x7c>)
 8008d22:	216b      	movs	r1, #107	; 0x6b
 8008d24:	f001 fae4 	bl	800a2f0 <__assert_func>
 8008d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d2c:	6006      	str	r6, [r0, #0]
 8008d2e:	60c6      	str	r6, [r0, #12]
 8008d30:	69e6      	ldr	r6, [r4, #28]
 8008d32:	68f3      	ldr	r3, [r6, #12]
 8008d34:	b183      	cbz	r3, 8008d58 <_Balloc+0x50>
 8008d36:	69e3      	ldr	r3, [r4, #28]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d3e:	b9b8      	cbnz	r0, 8008d70 <_Balloc+0x68>
 8008d40:	2101      	movs	r1, #1
 8008d42:	fa01 f605 	lsl.w	r6, r1, r5
 8008d46:	1d72      	adds	r2, r6, #5
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f001 faee 	bl	800a32c <_calloc_r>
 8008d50:	b160      	cbz	r0, 8008d6c <_Balloc+0x64>
 8008d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d56:	e00e      	b.n	8008d76 <_Balloc+0x6e>
 8008d58:	2221      	movs	r2, #33	; 0x21
 8008d5a:	2104      	movs	r1, #4
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f001 fae5 	bl	800a32c <_calloc_r>
 8008d62:	69e3      	ldr	r3, [r4, #28]
 8008d64:	60f0      	str	r0, [r6, #12]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e4      	bne.n	8008d36 <_Balloc+0x2e>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	6802      	ldr	r2, [r0, #0]
 8008d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d76:	2300      	movs	r3, #0
 8008d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d7c:	e7f7      	b.n	8008d6e <_Balloc+0x66>
 8008d7e:	bf00      	nop
 8008d80:	0800abfc 	.word	0x0800abfc
 8008d84:	0800acdc 	.word	0x0800acdc

08008d88 <_Bfree>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	69c6      	ldr	r6, [r0, #28]
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b976      	cbnz	r6, 8008db0 <_Bfree+0x28>
 8008d92:	2010      	movs	r0, #16
 8008d94:	f7fc fda8 	bl	80058e8 <malloc>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	61e8      	str	r0, [r5, #28]
 8008d9c:	b920      	cbnz	r0, 8008da8 <_Bfree+0x20>
 8008d9e:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <_Bfree+0x3c>)
 8008da0:	4809      	ldr	r0, [pc, #36]	; (8008dc8 <_Bfree+0x40>)
 8008da2:	218f      	movs	r1, #143	; 0x8f
 8008da4:	f001 faa4 	bl	800a2f0 <__assert_func>
 8008da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dac:	6006      	str	r6, [r0, #0]
 8008dae:	60c6      	str	r6, [r0, #12]
 8008db0:	b13c      	cbz	r4, 8008dc2 <_Bfree+0x3a>
 8008db2:	69eb      	ldr	r3, [r5, #28]
 8008db4:	6862      	ldr	r2, [r4, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dbc:	6021      	str	r1, [r4, #0]
 8008dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	0800abfc 	.word	0x0800abfc
 8008dc8:	0800acdc 	.word	0x0800acdc

08008dcc <__multadd>:
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	461e      	mov	r6, r3
 8008dd8:	f101 0c14 	add.w	ip, r1, #20
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f8dc 3000 	ldr.w	r3, [ip]
 8008de2:	b299      	uxth	r1, r3
 8008de4:	fb02 6101 	mla	r1, r2, r1, r6
 8008de8:	0c1e      	lsrs	r6, r3, #16
 8008dea:	0c0b      	lsrs	r3, r1, #16
 8008dec:	fb02 3306 	mla	r3, r2, r6, r3
 8008df0:	b289      	uxth	r1, r1
 8008df2:	3001      	adds	r0, #1
 8008df4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008df8:	4285      	cmp	r5, r0
 8008dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e02:	dcec      	bgt.n	8008dde <__multadd+0x12>
 8008e04:	b30e      	cbz	r6, 8008e4a <__multadd+0x7e>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	42ab      	cmp	r3, r5
 8008e0a:	dc19      	bgt.n	8008e40 <__multadd+0x74>
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4638      	mov	r0, r7
 8008e10:	3101      	adds	r1, #1
 8008e12:	f7ff ff79 	bl	8008d08 <_Balloc>
 8008e16:	4680      	mov	r8, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__multadd+0x5a>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <__multadd+0x84>)
 8008e1e:	480d      	ldr	r0, [pc, #52]	; (8008e54 <__multadd+0x88>)
 8008e20:	21ba      	movs	r1, #186	; 0xba
 8008e22:	f001 fa65 	bl	800a2f0 <__assert_func>
 8008e26:	6922      	ldr	r2, [r4, #16]
 8008e28:	3202      	adds	r2, #2
 8008e2a:	f104 010c 	add.w	r1, r4, #12
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	300c      	adds	r0, #12
 8008e32:	f7fe fd1a 	bl	800786a <memcpy>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7ff ffa5 	bl	8008d88 <_Bfree>
 8008e3e:	4644      	mov	r4, r8
 8008e40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e44:	3501      	adds	r5, #1
 8008e46:	615e      	str	r6, [r3, #20]
 8008e48:	6125      	str	r5, [r4, #16]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e50:	0800ac6b 	.word	0x0800ac6b
 8008e54:	0800acdc 	.word	0x0800acdc

08008e58 <__s2b>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	4615      	mov	r5, r2
 8008e60:	461f      	mov	r7, r3
 8008e62:	2209      	movs	r2, #9
 8008e64:	3308      	adds	r3, #8
 8008e66:	4606      	mov	r6, r0
 8008e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	2201      	movs	r2, #1
 8008e70:	429a      	cmp	r2, r3
 8008e72:	db09      	blt.n	8008e88 <__s2b+0x30>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ff47 	bl	8008d08 <_Balloc>
 8008e7a:	b940      	cbnz	r0, 8008e8e <__s2b+0x36>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <__s2b+0x8c>)
 8008e80:	4819      	ldr	r0, [pc, #100]	; (8008ee8 <__s2b+0x90>)
 8008e82:	21d3      	movs	r1, #211	; 0xd3
 8008e84:	f001 fa34 	bl	800a2f0 <__assert_func>
 8008e88:	0052      	lsls	r2, r2, #1
 8008e8a:	3101      	adds	r1, #1
 8008e8c:	e7f0      	b.n	8008e70 <__s2b+0x18>
 8008e8e:	9b08      	ldr	r3, [sp, #32]
 8008e90:	6143      	str	r3, [r0, #20]
 8008e92:	2d09      	cmp	r5, #9
 8008e94:	f04f 0301 	mov.w	r3, #1
 8008e98:	6103      	str	r3, [r0, #16]
 8008e9a:	dd16      	ble.n	8008eca <__s2b+0x72>
 8008e9c:	f104 0909 	add.w	r9, r4, #9
 8008ea0:	46c8      	mov	r8, r9
 8008ea2:	442c      	add	r4, r5
 8008ea4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	3b30      	subs	r3, #48	; 0x30
 8008eac:	220a      	movs	r2, #10
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ff8c 	bl	8008dcc <__multadd>
 8008eb4:	45a0      	cmp	r8, r4
 8008eb6:	d1f5      	bne.n	8008ea4 <__s2b+0x4c>
 8008eb8:	f1a5 0408 	sub.w	r4, r5, #8
 8008ebc:	444c      	add	r4, r9
 8008ebe:	1b2d      	subs	r5, r5, r4
 8008ec0:	1963      	adds	r3, r4, r5
 8008ec2:	42bb      	cmp	r3, r7
 8008ec4:	db04      	blt.n	8008ed0 <__s2b+0x78>
 8008ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eca:	340a      	adds	r4, #10
 8008ecc:	2509      	movs	r5, #9
 8008ece:	e7f6      	b.n	8008ebe <__s2b+0x66>
 8008ed0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ed4:	4601      	mov	r1, r0
 8008ed6:	3b30      	subs	r3, #48	; 0x30
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ff76 	bl	8008dcc <__multadd>
 8008ee0:	e7ee      	b.n	8008ec0 <__s2b+0x68>
 8008ee2:	bf00      	nop
 8008ee4:	0800ac6b 	.word	0x0800ac6b
 8008ee8:	0800acdc 	.word	0x0800acdc

08008eec <__hi0bits>:
 8008eec:	0c03      	lsrs	r3, r0, #16
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	b9d3      	cbnz	r3, 8008f28 <__hi0bits+0x3c>
 8008ef2:	0400      	lsls	r0, r0, #16
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008efa:	bf04      	itt	eq
 8008efc:	0200      	lsleq	r0, r0, #8
 8008efe:	3308      	addeq	r3, #8
 8008f00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f04:	bf04      	itt	eq
 8008f06:	0100      	lsleq	r0, r0, #4
 8008f08:	3304      	addeq	r3, #4
 8008f0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f0e:	bf04      	itt	eq
 8008f10:	0080      	lsleq	r0, r0, #2
 8008f12:	3302      	addeq	r3, #2
 8008f14:	2800      	cmp	r0, #0
 8008f16:	db05      	blt.n	8008f24 <__hi0bits+0x38>
 8008f18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f1c:	f103 0301 	add.w	r3, r3, #1
 8008f20:	bf08      	it	eq
 8008f22:	2320      	moveq	r3, #32
 8008f24:	4618      	mov	r0, r3
 8008f26:	4770      	bx	lr
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e7e4      	b.n	8008ef6 <__hi0bits+0xa>

08008f2c <__lo0bits>:
 8008f2c:	6803      	ldr	r3, [r0, #0]
 8008f2e:	f013 0207 	ands.w	r2, r3, #7
 8008f32:	d00c      	beq.n	8008f4e <__lo0bits+0x22>
 8008f34:	07d9      	lsls	r1, r3, #31
 8008f36:	d422      	bmi.n	8008f7e <__lo0bits+0x52>
 8008f38:	079a      	lsls	r2, r3, #30
 8008f3a:	bf49      	itett	mi
 8008f3c:	085b      	lsrmi	r3, r3, #1
 8008f3e:	089b      	lsrpl	r3, r3, #2
 8008f40:	6003      	strmi	r3, [r0, #0]
 8008f42:	2201      	movmi	r2, #1
 8008f44:	bf5c      	itt	pl
 8008f46:	6003      	strpl	r3, [r0, #0]
 8008f48:	2202      	movpl	r2, #2
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	4770      	bx	lr
 8008f4e:	b299      	uxth	r1, r3
 8008f50:	b909      	cbnz	r1, 8008f56 <__lo0bits+0x2a>
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	2210      	movs	r2, #16
 8008f56:	b2d9      	uxtb	r1, r3
 8008f58:	b909      	cbnz	r1, 8008f5e <__lo0bits+0x32>
 8008f5a:	3208      	adds	r2, #8
 8008f5c:	0a1b      	lsrs	r3, r3, #8
 8008f5e:	0719      	lsls	r1, r3, #28
 8008f60:	bf04      	itt	eq
 8008f62:	091b      	lsreq	r3, r3, #4
 8008f64:	3204      	addeq	r2, #4
 8008f66:	0799      	lsls	r1, r3, #30
 8008f68:	bf04      	itt	eq
 8008f6a:	089b      	lsreq	r3, r3, #2
 8008f6c:	3202      	addeq	r2, #2
 8008f6e:	07d9      	lsls	r1, r3, #31
 8008f70:	d403      	bmi.n	8008f7a <__lo0bits+0x4e>
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	f102 0201 	add.w	r2, r2, #1
 8008f78:	d003      	beq.n	8008f82 <__lo0bits+0x56>
 8008f7a:	6003      	str	r3, [r0, #0]
 8008f7c:	e7e5      	b.n	8008f4a <__lo0bits+0x1e>
 8008f7e:	2200      	movs	r2, #0
 8008f80:	e7e3      	b.n	8008f4a <__lo0bits+0x1e>
 8008f82:	2220      	movs	r2, #32
 8008f84:	e7e1      	b.n	8008f4a <__lo0bits+0x1e>
	...

08008f88 <__i2b>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	f7ff febb 	bl	8008d08 <_Balloc>
 8008f92:	4602      	mov	r2, r0
 8008f94:	b928      	cbnz	r0, 8008fa2 <__i2b+0x1a>
 8008f96:	4b05      	ldr	r3, [pc, #20]	; (8008fac <__i2b+0x24>)
 8008f98:	4805      	ldr	r0, [pc, #20]	; (8008fb0 <__i2b+0x28>)
 8008f9a:	f240 1145 	movw	r1, #325	; 0x145
 8008f9e:	f001 f9a7 	bl	800a2f0 <__assert_func>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	6144      	str	r4, [r0, #20]
 8008fa6:	6103      	str	r3, [r0, #16]
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	bf00      	nop
 8008fac:	0800ac6b 	.word	0x0800ac6b
 8008fb0:	0800acdc 	.word	0x0800acdc

08008fb4 <__multiply>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	4691      	mov	r9, r2
 8008fba:	690a      	ldr	r2, [r1, #16]
 8008fbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	bfb8      	it	lt
 8008fc4:	460b      	movlt	r3, r1
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	bfbc      	itt	lt
 8008fca:	464c      	movlt	r4, r9
 8008fcc:	4699      	movlt	r9, r3
 8008fce:	6927      	ldr	r7, [r4, #16]
 8008fd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	6861      	ldr	r1, [r4, #4]
 8008fd8:	eb07 060a 	add.w	r6, r7, sl
 8008fdc:	42b3      	cmp	r3, r6
 8008fde:	b085      	sub	sp, #20
 8008fe0:	bfb8      	it	lt
 8008fe2:	3101      	addlt	r1, #1
 8008fe4:	f7ff fe90 	bl	8008d08 <_Balloc>
 8008fe8:	b930      	cbnz	r0, 8008ff8 <__multiply+0x44>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b44      	ldr	r3, [pc, #272]	; (8009100 <__multiply+0x14c>)
 8008fee:	4845      	ldr	r0, [pc, #276]	; (8009104 <__multiply+0x150>)
 8008ff0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008ff4:	f001 f97c 	bl	800a2f0 <__assert_func>
 8008ff8:	f100 0514 	add.w	r5, r0, #20
 8008ffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009000:	462b      	mov	r3, r5
 8009002:	2200      	movs	r2, #0
 8009004:	4543      	cmp	r3, r8
 8009006:	d321      	bcc.n	800904c <__multiply+0x98>
 8009008:	f104 0314 	add.w	r3, r4, #20
 800900c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009010:	f109 0314 	add.w	r3, r9, #20
 8009014:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009018:	9202      	str	r2, [sp, #8]
 800901a:	1b3a      	subs	r2, r7, r4
 800901c:	3a15      	subs	r2, #21
 800901e:	f022 0203 	bic.w	r2, r2, #3
 8009022:	3204      	adds	r2, #4
 8009024:	f104 0115 	add.w	r1, r4, #21
 8009028:	428f      	cmp	r7, r1
 800902a:	bf38      	it	cc
 800902c:	2204      	movcc	r2, #4
 800902e:	9201      	str	r2, [sp, #4]
 8009030:	9a02      	ldr	r2, [sp, #8]
 8009032:	9303      	str	r3, [sp, #12]
 8009034:	429a      	cmp	r2, r3
 8009036:	d80c      	bhi.n	8009052 <__multiply+0x9e>
 8009038:	2e00      	cmp	r6, #0
 800903a:	dd03      	ble.n	8009044 <__multiply+0x90>
 800903c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009040:	2b00      	cmp	r3, #0
 8009042:	d05b      	beq.n	80090fc <__multiply+0x148>
 8009044:	6106      	str	r6, [r0, #16]
 8009046:	b005      	add	sp, #20
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	f843 2b04 	str.w	r2, [r3], #4
 8009050:	e7d8      	b.n	8009004 <__multiply+0x50>
 8009052:	f8b3 a000 	ldrh.w	sl, [r3]
 8009056:	f1ba 0f00 	cmp.w	sl, #0
 800905a:	d024      	beq.n	80090a6 <__multiply+0xf2>
 800905c:	f104 0e14 	add.w	lr, r4, #20
 8009060:	46a9      	mov	r9, r5
 8009062:	f04f 0c00 	mov.w	ip, #0
 8009066:	f85e 2b04 	ldr.w	r2, [lr], #4
 800906a:	f8d9 1000 	ldr.w	r1, [r9]
 800906e:	fa1f fb82 	uxth.w	fp, r2
 8009072:	b289      	uxth	r1, r1
 8009074:	fb0a 110b 	mla	r1, sl, fp, r1
 8009078:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800907c:	f8d9 2000 	ldr.w	r2, [r9]
 8009080:	4461      	add	r1, ip
 8009082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009086:	fb0a c20b 	mla	r2, sl, fp, ip
 800908a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800908e:	b289      	uxth	r1, r1
 8009090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009094:	4577      	cmp	r7, lr
 8009096:	f849 1b04 	str.w	r1, [r9], #4
 800909a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800909e:	d8e2      	bhi.n	8009066 <__multiply+0xb2>
 80090a0:	9a01      	ldr	r2, [sp, #4]
 80090a2:	f845 c002 	str.w	ip, [r5, r2]
 80090a6:	9a03      	ldr	r2, [sp, #12]
 80090a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090ac:	3304      	adds	r3, #4
 80090ae:	f1b9 0f00 	cmp.w	r9, #0
 80090b2:	d021      	beq.n	80090f8 <__multiply+0x144>
 80090b4:	6829      	ldr	r1, [r5, #0]
 80090b6:	f104 0c14 	add.w	ip, r4, #20
 80090ba:	46ae      	mov	lr, r5
 80090bc:	f04f 0a00 	mov.w	sl, #0
 80090c0:	f8bc b000 	ldrh.w	fp, [ip]
 80090c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090c8:	fb09 220b 	mla	r2, r9, fp, r2
 80090cc:	4452      	add	r2, sl
 80090ce:	b289      	uxth	r1, r1
 80090d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090d4:	f84e 1b04 	str.w	r1, [lr], #4
 80090d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80090dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090e0:	f8be 1000 	ldrh.w	r1, [lr]
 80090e4:	fb09 110a 	mla	r1, r9, sl, r1
 80090e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80090ec:	4567      	cmp	r7, ip
 80090ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090f2:	d8e5      	bhi.n	80090c0 <__multiply+0x10c>
 80090f4:	9a01      	ldr	r2, [sp, #4]
 80090f6:	50a9      	str	r1, [r5, r2]
 80090f8:	3504      	adds	r5, #4
 80090fa:	e799      	b.n	8009030 <__multiply+0x7c>
 80090fc:	3e01      	subs	r6, #1
 80090fe:	e79b      	b.n	8009038 <__multiply+0x84>
 8009100:	0800ac6b 	.word	0x0800ac6b
 8009104:	0800acdc 	.word	0x0800acdc

08009108 <__pow5mult>:
 8009108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800910c:	4615      	mov	r5, r2
 800910e:	f012 0203 	ands.w	r2, r2, #3
 8009112:	4606      	mov	r6, r0
 8009114:	460f      	mov	r7, r1
 8009116:	d007      	beq.n	8009128 <__pow5mult+0x20>
 8009118:	4c25      	ldr	r4, [pc, #148]	; (80091b0 <__pow5mult+0xa8>)
 800911a:	3a01      	subs	r2, #1
 800911c:	2300      	movs	r3, #0
 800911e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009122:	f7ff fe53 	bl	8008dcc <__multadd>
 8009126:	4607      	mov	r7, r0
 8009128:	10ad      	asrs	r5, r5, #2
 800912a:	d03d      	beq.n	80091a8 <__pow5mult+0xa0>
 800912c:	69f4      	ldr	r4, [r6, #28]
 800912e:	b97c      	cbnz	r4, 8009150 <__pow5mult+0x48>
 8009130:	2010      	movs	r0, #16
 8009132:	f7fc fbd9 	bl	80058e8 <malloc>
 8009136:	4602      	mov	r2, r0
 8009138:	61f0      	str	r0, [r6, #28]
 800913a:	b928      	cbnz	r0, 8009148 <__pow5mult+0x40>
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <__pow5mult+0xac>)
 800913e:	481e      	ldr	r0, [pc, #120]	; (80091b8 <__pow5mult+0xb0>)
 8009140:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009144:	f001 f8d4 	bl	800a2f0 <__assert_func>
 8009148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800914c:	6004      	str	r4, [r0, #0]
 800914e:	60c4      	str	r4, [r0, #12]
 8009150:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009158:	b94c      	cbnz	r4, 800916e <__pow5mult+0x66>
 800915a:	f240 2171 	movw	r1, #625	; 0x271
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff ff12 	bl	8008f88 <__i2b>
 8009164:	2300      	movs	r3, #0
 8009166:	f8c8 0008 	str.w	r0, [r8, #8]
 800916a:	4604      	mov	r4, r0
 800916c:	6003      	str	r3, [r0, #0]
 800916e:	f04f 0900 	mov.w	r9, #0
 8009172:	07eb      	lsls	r3, r5, #31
 8009174:	d50a      	bpl.n	800918c <__pow5mult+0x84>
 8009176:	4639      	mov	r1, r7
 8009178:	4622      	mov	r2, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff ff1a 	bl	8008fb4 <__multiply>
 8009180:	4639      	mov	r1, r7
 8009182:	4680      	mov	r8, r0
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff fdff 	bl	8008d88 <_Bfree>
 800918a:	4647      	mov	r7, r8
 800918c:	106d      	asrs	r5, r5, #1
 800918e:	d00b      	beq.n	80091a8 <__pow5mult+0xa0>
 8009190:	6820      	ldr	r0, [r4, #0]
 8009192:	b938      	cbnz	r0, 80091a4 <__pow5mult+0x9c>
 8009194:	4622      	mov	r2, r4
 8009196:	4621      	mov	r1, r4
 8009198:	4630      	mov	r0, r6
 800919a:	f7ff ff0b 	bl	8008fb4 <__multiply>
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	f8c0 9000 	str.w	r9, [r0]
 80091a4:	4604      	mov	r4, r0
 80091a6:	e7e4      	b.n	8009172 <__pow5mult+0x6a>
 80091a8:	4638      	mov	r0, r7
 80091aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ae:	bf00      	nop
 80091b0:	0800ae28 	.word	0x0800ae28
 80091b4:	0800abfc 	.word	0x0800abfc
 80091b8:	0800acdc 	.word	0x0800acdc

080091bc <__lshift>:
 80091bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	6849      	ldr	r1, [r1, #4]
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	4607      	mov	r7, r0
 80091ce:	4691      	mov	r9, r2
 80091d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091d4:	f108 0601 	add.w	r6, r8, #1
 80091d8:	42b3      	cmp	r3, r6
 80091da:	db0b      	blt.n	80091f4 <__lshift+0x38>
 80091dc:	4638      	mov	r0, r7
 80091de:	f7ff fd93 	bl	8008d08 <_Balloc>
 80091e2:	4605      	mov	r5, r0
 80091e4:	b948      	cbnz	r0, 80091fa <__lshift+0x3e>
 80091e6:	4602      	mov	r2, r0
 80091e8:	4b28      	ldr	r3, [pc, #160]	; (800928c <__lshift+0xd0>)
 80091ea:	4829      	ldr	r0, [pc, #164]	; (8009290 <__lshift+0xd4>)
 80091ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80091f0:	f001 f87e 	bl	800a2f0 <__assert_func>
 80091f4:	3101      	adds	r1, #1
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	e7ee      	b.n	80091d8 <__lshift+0x1c>
 80091fa:	2300      	movs	r3, #0
 80091fc:	f100 0114 	add.w	r1, r0, #20
 8009200:	f100 0210 	add.w	r2, r0, #16
 8009204:	4618      	mov	r0, r3
 8009206:	4553      	cmp	r3, sl
 8009208:	db33      	blt.n	8009272 <__lshift+0xb6>
 800920a:	6920      	ldr	r0, [r4, #16]
 800920c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009210:	f104 0314 	add.w	r3, r4, #20
 8009214:	f019 091f 	ands.w	r9, r9, #31
 8009218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800921c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009220:	d02b      	beq.n	800927a <__lshift+0xbe>
 8009222:	f1c9 0e20 	rsb	lr, r9, #32
 8009226:	468a      	mov	sl, r1
 8009228:	2200      	movs	r2, #0
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	fa00 f009 	lsl.w	r0, r0, r9
 8009230:	4310      	orrs	r0, r2
 8009232:	f84a 0b04 	str.w	r0, [sl], #4
 8009236:	f853 2b04 	ldr.w	r2, [r3], #4
 800923a:	459c      	cmp	ip, r3
 800923c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009240:	d8f3      	bhi.n	800922a <__lshift+0x6e>
 8009242:	ebac 0304 	sub.w	r3, ip, r4
 8009246:	3b15      	subs	r3, #21
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	3304      	adds	r3, #4
 800924e:	f104 0015 	add.w	r0, r4, #21
 8009252:	4584      	cmp	ip, r0
 8009254:	bf38      	it	cc
 8009256:	2304      	movcc	r3, #4
 8009258:	50ca      	str	r2, [r1, r3]
 800925a:	b10a      	cbz	r2, 8009260 <__lshift+0xa4>
 800925c:	f108 0602 	add.w	r6, r8, #2
 8009260:	3e01      	subs	r6, #1
 8009262:	4638      	mov	r0, r7
 8009264:	612e      	str	r6, [r5, #16]
 8009266:	4621      	mov	r1, r4
 8009268:	f7ff fd8e 	bl	8008d88 <_Bfree>
 800926c:	4628      	mov	r0, r5
 800926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009272:	f842 0f04 	str.w	r0, [r2, #4]!
 8009276:	3301      	adds	r3, #1
 8009278:	e7c5      	b.n	8009206 <__lshift+0x4a>
 800927a:	3904      	subs	r1, #4
 800927c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009280:	f841 2f04 	str.w	r2, [r1, #4]!
 8009284:	459c      	cmp	ip, r3
 8009286:	d8f9      	bhi.n	800927c <__lshift+0xc0>
 8009288:	e7ea      	b.n	8009260 <__lshift+0xa4>
 800928a:	bf00      	nop
 800928c:	0800ac6b 	.word	0x0800ac6b
 8009290:	0800acdc 	.word	0x0800acdc

08009294 <__mcmp>:
 8009294:	b530      	push	{r4, r5, lr}
 8009296:	6902      	ldr	r2, [r0, #16]
 8009298:	690c      	ldr	r4, [r1, #16]
 800929a:	1b12      	subs	r2, r2, r4
 800929c:	d10e      	bne.n	80092bc <__mcmp+0x28>
 800929e:	f100 0314 	add.w	r3, r0, #20
 80092a2:	3114      	adds	r1, #20
 80092a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092b4:	42a5      	cmp	r5, r4
 80092b6:	d003      	beq.n	80092c0 <__mcmp+0x2c>
 80092b8:	d305      	bcc.n	80092c6 <__mcmp+0x32>
 80092ba:	2201      	movs	r2, #1
 80092bc:	4610      	mov	r0, r2
 80092be:	bd30      	pop	{r4, r5, pc}
 80092c0:	4283      	cmp	r3, r0
 80092c2:	d3f3      	bcc.n	80092ac <__mcmp+0x18>
 80092c4:	e7fa      	b.n	80092bc <__mcmp+0x28>
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ca:	e7f7      	b.n	80092bc <__mcmp+0x28>

080092cc <__mdiff>:
 80092cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	460c      	mov	r4, r1
 80092d2:	4606      	mov	r6, r0
 80092d4:	4611      	mov	r1, r2
 80092d6:	4620      	mov	r0, r4
 80092d8:	4690      	mov	r8, r2
 80092da:	f7ff ffdb 	bl	8009294 <__mcmp>
 80092de:	1e05      	subs	r5, r0, #0
 80092e0:	d110      	bne.n	8009304 <__mdiff+0x38>
 80092e2:	4629      	mov	r1, r5
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff fd0f 	bl	8008d08 <_Balloc>
 80092ea:	b930      	cbnz	r0, 80092fa <__mdiff+0x2e>
 80092ec:	4b3a      	ldr	r3, [pc, #232]	; (80093d8 <__mdiff+0x10c>)
 80092ee:	4602      	mov	r2, r0
 80092f0:	f240 2137 	movw	r1, #567	; 0x237
 80092f4:	4839      	ldr	r0, [pc, #228]	; (80093dc <__mdiff+0x110>)
 80092f6:	f000 fffb 	bl	800a2f0 <__assert_func>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009304:	bfa4      	itt	ge
 8009306:	4643      	movge	r3, r8
 8009308:	46a0      	movge	r8, r4
 800930a:	4630      	mov	r0, r6
 800930c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009310:	bfa6      	itte	ge
 8009312:	461c      	movge	r4, r3
 8009314:	2500      	movge	r5, #0
 8009316:	2501      	movlt	r5, #1
 8009318:	f7ff fcf6 	bl	8008d08 <_Balloc>
 800931c:	b920      	cbnz	r0, 8009328 <__mdiff+0x5c>
 800931e:	4b2e      	ldr	r3, [pc, #184]	; (80093d8 <__mdiff+0x10c>)
 8009320:	4602      	mov	r2, r0
 8009322:	f240 2145 	movw	r1, #581	; 0x245
 8009326:	e7e5      	b.n	80092f4 <__mdiff+0x28>
 8009328:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800932c:	6926      	ldr	r6, [r4, #16]
 800932e:	60c5      	str	r5, [r0, #12]
 8009330:	f104 0914 	add.w	r9, r4, #20
 8009334:	f108 0514 	add.w	r5, r8, #20
 8009338:	f100 0e14 	add.w	lr, r0, #20
 800933c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009340:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009344:	f108 0210 	add.w	r2, r8, #16
 8009348:	46f2      	mov	sl, lr
 800934a:	2100      	movs	r1, #0
 800934c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009350:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009354:	fa11 f88b 	uxtah	r8, r1, fp
 8009358:	b299      	uxth	r1, r3
 800935a:	0c1b      	lsrs	r3, r3, #16
 800935c:	eba8 0801 	sub.w	r8, r8, r1
 8009360:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009364:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009368:	fa1f f888 	uxth.w	r8, r8
 800936c:	1419      	asrs	r1, r3, #16
 800936e:	454e      	cmp	r6, r9
 8009370:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009374:	f84a 3b04 	str.w	r3, [sl], #4
 8009378:	d8e8      	bhi.n	800934c <__mdiff+0x80>
 800937a:	1b33      	subs	r3, r6, r4
 800937c:	3b15      	subs	r3, #21
 800937e:	f023 0303 	bic.w	r3, r3, #3
 8009382:	3304      	adds	r3, #4
 8009384:	3415      	adds	r4, #21
 8009386:	42a6      	cmp	r6, r4
 8009388:	bf38      	it	cc
 800938a:	2304      	movcc	r3, #4
 800938c:	441d      	add	r5, r3
 800938e:	4473      	add	r3, lr
 8009390:	469e      	mov	lr, r3
 8009392:	462e      	mov	r6, r5
 8009394:	4566      	cmp	r6, ip
 8009396:	d30e      	bcc.n	80093b6 <__mdiff+0xea>
 8009398:	f10c 0203 	add.w	r2, ip, #3
 800939c:	1b52      	subs	r2, r2, r5
 800939e:	f022 0203 	bic.w	r2, r2, #3
 80093a2:	3d03      	subs	r5, #3
 80093a4:	45ac      	cmp	ip, r5
 80093a6:	bf38      	it	cc
 80093a8:	2200      	movcc	r2, #0
 80093aa:	4413      	add	r3, r2
 80093ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80093b0:	b17a      	cbz	r2, 80093d2 <__mdiff+0x106>
 80093b2:	6107      	str	r7, [r0, #16]
 80093b4:	e7a4      	b.n	8009300 <__mdiff+0x34>
 80093b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80093ba:	fa11 f288 	uxtah	r2, r1, r8
 80093be:	1414      	asrs	r4, r2, #16
 80093c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093c4:	b292      	uxth	r2, r2
 80093c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093ca:	f84e 2b04 	str.w	r2, [lr], #4
 80093ce:	1421      	asrs	r1, r4, #16
 80093d0:	e7e0      	b.n	8009394 <__mdiff+0xc8>
 80093d2:	3f01      	subs	r7, #1
 80093d4:	e7ea      	b.n	80093ac <__mdiff+0xe0>
 80093d6:	bf00      	nop
 80093d8:	0800ac6b 	.word	0x0800ac6b
 80093dc:	0800acdc 	.word	0x0800acdc

080093e0 <__ulp>:
 80093e0:	b082      	sub	sp, #8
 80093e2:	ed8d 0b00 	vstr	d0, [sp]
 80093e6:	9a01      	ldr	r2, [sp, #4]
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <__ulp+0x48>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	dc08      	bgt.n	8009406 <__ulp+0x26>
 80093f4:	425b      	negs	r3, r3
 80093f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80093fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80093fe:	da04      	bge.n	800940a <__ulp+0x2a>
 8009400:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009404:	4113      	asrs	r3, r2
 8009406:	2200      	movs	r2, #0
 8009408:	e008      	b.n	800941c <__ulp+0x3c>
 800940a:	f1a2 0314 	sub.w	r3, r2, #20
 800940e:	2b1e      	cmp	r3, #30
 8009410:	bfda      	itte	le
 8009412:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009416:	40da      	lsrle	r2, r3
 8009418:	2201      	movgt	r2, #1
 800941a:	2300      	movs	r3, #0
 800941c:	4619      	mov	r1, r3
 800941e:	4610      	mov	r0, r2
 8009420:	ec41 0b10 	vmov	d0, r0, r1
 8009424:	b002      	add	sp, #8
 8009426:	4770      	bx	lr
 8009428:	7ff00000 	.word	0x7ff00000

0800942c <__b2d>:
 800942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009430:	6906      	ldr	r6, [r0, #16]
 8009432:	f100 0814 	add.w	r8, r0, #20
 8009436:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800943a:	1f37      	subs	r7, r6, #4
 800943c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009440:	4610      	mov	r0, r2
 8009442:	f7ff fd53 	bl	8008eec <__hi0bits>
 8009446:	f1c0 0320 	rsb	r3, r0, #32
 800944a:	280a      	cmp	r0, #10
 800944c:	600b      	str	r3, [r1, #0]
 800944e:	491b      	ldr	r1, [pc, #108]	; (80094bc <__b2d+0x90>)
 8009450:	dc15      	bgt.n	800947e <__b2d+0x52>
 8009452:	f1c0 0c0b 	rsb	ip, r0, #11
 8009456:	fa22 f30c 	lsr.w	r3, r2, ip
 800945a:	45b8      	cmp	r8, r7
 800945c:	ea43 0501 	orr.w	r5, r3, r1
 8009460:	bf34      	ite	cc
 8009462:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009466:	2300      	movcs	r3, #0
 8009468:	3015      	adds	r0, #21
 800946a:	fa02 f000 	lsl.w	r0, r2, r0
 800946e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009472:	4303      	orrs	r3, r0
 8009474:	461c      	mov	r4, r3
 8009476:	ec45 4b10 	vmov	d0, r4, r5
 800947a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947e:	45b8      	cmp	r8, r7
 8009480:	bf3a      	itte	cc
 8009482:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009486:	f1a6 0708 	subcc.w	r7, r6, #8
 800948a:	2300      	movcs	r3, #0
 800948c:	380b      	subs	r0, #11
 800948e:	d012      	beq.n	80094b6 <__b2d+0x8a>
 8009490:	f1c0 0120 	rsb	r1, r0, #32
 8009494:	fa23 f401 	lsr.w	r4, r3, r1
 8009498:	4082      	lsls	r2, r0
 800949a:	4322      	orrs	r2, r4
 800949c:	4547      	cmp	r7, r8
 800949e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80094a2:	bf8c      	ite	hi
 80094a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80094a8:	2200      	movls	r2, #0
 80094aa:	4083      	lsls	r3, r0
 80094ac:	40ca      	lsrs	r2, r1
 80094ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80094b2:	4313      	orrs	r3, r2
 80094b4:	e7de      	b.n	8009474 <__b2d+0x48>
 80094b6:	ea42 0501 	orr.w	r5, r2, r1
 80094ba:	e7db      	b.n	8009474 <__b2d+0x48>
 80094bc:	3ff00000 	.word	0x3ff00000

080094c0 <__d2b>:
 80094c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094c4:	460f      	mov	r7, r1
 80094c6:	2101      	movs	r1, #1
 80094c8:	ec59 8b10 	vmov	r8, r9, d0
 80094cc:	4616      	mov	r6, r2
 80094ce:	f7ff fc1b 	bl	8008d08 <_Balloc>
 80094d2:	4604      	mov	r4, r0
 80094d4:	b930      	cbnz	r0, 80094e4 <__d2b+0x24>
 80094d6:	4602      	mov	r2, r0
 80094d8:	4b24      	ldr	r3, [pc, #144]	; (800956c <__d2b+0xac>)
 80094da:	4825      	ldr	r0, [pc, #148]	; (8009570 <__d2b+0xb0>)
 80094dc:	f240 310f 	movw	r1, #783	; 0x30f
 80094e0:	f000 ff06 	bl	800a2f0 <__assert_func>
 80094e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094ec:	bb2d      	cbnz	r5, 800953a <__d2b+0x7a>
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	f1b8 0300 	subs.w	r3, r8, #0
 80094f4:	d026      	beq.n	8009544 <__d2b+0x84>
 80094f6:	4668      	mov	r0, sp
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	f7ff fd17 	bl	8008f2c <__lo0bits>
 80094fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009502:	b1e8      	cbz	r0, 8009540 <__d2b+0x80>
 8009504:	f1c0 0320 	rsb	r3, r0, #32
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	430b      	orrs	r3, r1
 800950e:	40c2      	lsrs	r2, r0
 8009510:	6163      	str	r3, [r4, #20]
 8009512:	9201      	str	r2, [sp, #4]
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	61a3      	str	r3, [r4, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	bf14      	ite	ne
 800951c:	2202      	movne	r2, #2
 800951e:	2201      	moveq	r2, #1
 8009520:	6122      	str	r2, [r4, #16]
 8009522:	b1bd      	cbz	r5, 8009554 <__d2b+0x94>
 8009524:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009528:	4405      	add	r5, r0
 800952a:	603d      	str	r5, [r7, #0]
 800952c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009530:	6030      	str	r0, [r6, #0]
 8009532:	4620      	mov	r0, r4
 8009534:	b003      	add	sp, #12
 8009536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800953a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800953e:	e7d6      	b.n	80094ee <__d2b+0x2e>
 8009540:	6161      	str	r1, [r4, #20]
 8009542:	e7e7      	b.n	8009514 <__d2b+0x54>
 8009544:	a801      	add	r0, sp, #4
 8009546:	f7ff fcf1 	bl	8008f2c <__lo0bits>
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	6163      	str	r3, [r4, #20]
 800954e:	3020      	adds	r0, #32
 8009550:	2201      	movs	r2, #1
 8009552:	e7e5      	b.n	8009520 <__d2b+0x60>
 8009554:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009558:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800955c:	6038      	str	r0, [r7, #0]
 800955e:	6918      	ldr	r0, [r3, #16]
 8009560:	f7ff fcc4 	bl	8008eec <__hi0bits>
 8009564:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009568:	e7e2      	b.n	8009530 <__d2b+0x70>
 800956a:	bf00      	nop
 800956c:	0800ac6b 	.word	0x0800ac6b
 8009570:	0800acdc 	.word	0x0800acdc

08009574 <__ratio>:
 8009574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	4688      	mov	r8, r1
 800957a:	4669      	mov	r1, sp
 800957c:	4681      	mov	r9, r0
 800957e:	f7ff ff55 	bl	800942c <__b2d>
 8009582:	a901      	add	r1, sp, #4
 8009584:	4640      	mov	r0, r8
 8009586:	ec55 4b10 	vmov	r4, r5, d0
 800958a:	f7ff ff4f 	bl	800942c <__b2d>
 800958e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009592:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009596:	eba3 0c02 	sub.w	ip, r3, r2
 800959a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800959e:	1a9b      	subs	r3, r3, r2
 80095a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80095a4:	ec51 0b10 	vmov	r0, r1, d0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bfd6      	itet	le
 80095ac:	460a      	movle	r2, r1
 80095ae:	462a      	movgt	r2, r5
 80095b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095b4:	468b      	mov	fp, r1
 80095b6:	462f      	mov	r7, r5
 80095b8:	bfd4      	ite	le
 80095ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80095be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095c2:	4620      	mov	r0, r4
 80095c4:	ee10 2a10 	vmov	r2, s0
 80095c8:	465b      	mov	r3, fp
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7f7 f93e 	bl	800084c <__aeabi_ddiv>
 80095d0:	ec41 0b10 	vmov	d0, r0, r1
 80095d4:	b003      	add	sp, #12
 80095d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095da <__copybits>:
 80095da:	3901      	subs	r1, #1
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	1149      	asrs	r1, r1, #5
 80095e0:	6914      	ldr	r4, [r2, #16]
 80095e2:	3101      	adds	r1, #1
 80095e4:	f102 0314 	add.w	r3, r2, #20
 80095e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80095ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80095f0:	1f05      	subs	r5, r0, #4
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	d30c      	bcc.n	8009610 <__copybits+0x36>
 80095f6:	1aa3      	subs	r3, r4, r2
 80095f8:	3b11      	subs	r3, #17
 80095fa:	f023 0303 	bic.w	r3, r3, #3
 80095fe:	3211      	adds	r2, #17
 8009600:	42a2      	cmp	r2, r4
 8009602:	bf88      	it	hi
 8009604:	2300      	movhi	r3, #0
 8009606:	4418      	add	r0, r3
 8009608:	2300      	movs	r3, #0
 800960a:	4288      	cmp	r0, r1
 800960c:	d305      	bcc.n	800961a <__copybits+0x40>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f853 6b04 	ldr.w	r6, [r3], #4
 8009614:	f845 6f04 	str.w	r6, [r5, #4]!
 8009618:	e7eb      	b.n	80095f2 <__copybits+0x18>
 800961a:	f840 3b04 	str.w	r3, [r0], #4
 800961e:	e7f4      	b.n	800960a <__copybits+0x30>

08009620 <__any_on>:
 8009620:	f100 0214 	add.w	r2, r0, #20
 8009624:	6900      	ldr	r0, [r0, #16]
 8009626:	114b      	asrs	r3, r1, #5
 8009628:	4298      	cmp	r0, r3
 800962a:	b510      	push	{r4, lr}
 800962c:	db11      	blt.n	8009652 <__any_on+0x32>
 800962e:	dd0a      	ble.n	8009646 <__any_on+0x26>
 8009630:	f011 011f 	ands.w	r1, r1, #31
 8009634:	d007      	beq.n	8009646 <__any_on+0x26>
 8009636:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800963a:	fa24 f001 	lsr.w	r0, r4, r1
 800963e:	fa00 f101 	lsl.w	r1, r0, r1
 8009642:	428c      	cmp	r4, r1
 8009644:	d10b      	bne.n	800965e <__any_on+0x3e>
 8009646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800964a:	4293      	cmp	r3, r2
 800964c:	d803      	bhi.n	8009656 <__any_on+0x36>
 800964e:	2000      	movs	r0, #0
 8009650:	bd10      	pop	{r4, pc}
 8009652:	4603      	mov	r3, r0
 8009654:	e7f7      	b.n	8009646 <__any_on+0x26>
 8009656:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800965a:	2900      	cmp	r1, #0
 800965c:	d0f5      	beq.n	800964a <__any_on+0x2a>
 800965e:	2001      	movs	r0, #1
 8009660:	e7f6      	b.n	8009650 <__any_on+0x30>
	...

08009664 <_strtol_l.constprop.0>:
 8009664:	2b01      	cmp	r3, #1
 8009666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966a:	d001      	beq.n	8009670 <_strtol_l.constprop.0+0xc>
 800966c:	2b24      	cmp	r3, #36	; 0x24
 800966e:	d906      	bls.n	800967e <_strtol_l.constprop.0+0x1a>
 8009670:	f7fe f8ce 	bl	8007810 <__errno>
 8009674:	2316      	movs	r3, #22
 8009676:	6003      	str	r3, [r0, #0]
 8009678:	2000      	movs	r0, #0
 800967a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009764 <_strtol_l.constprop.0+0x100>
 8009682:	460d      	mov	r5, r1
 8009684:	462e      	mov	r6, r5
 8009686:	f815 4b01 	ldrb.w	r4, [r5], #1
 800968a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800968e:	f017 0708 	ands.w	r7, r7, #8
 8009692:	d1f7      	bne.n	8009684 <_strtol_l.constprop.0+0x20>
 8009694:	2c2d      	cmp	r4, #45	; 0x2d
 8009696:	d132      	bne.n	80096fe <_strtol_l.constprop.0+0x9a>
 8009698:	782c      	ldrb	r4, [r5, #0]
 800969a:	2701      	movs	r7, #1
 800969c:	1cb5      	adds	r5, r6, #2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d05b      	beq.n	800975a <_strtol_l.constprop.0+0xf6>
 80096a2:	2b10      	cmp	r3, #16
 80096a4:	d109      	bne.n	80096ba <_strtol_l.constprop.0+0x56>
 80096a6:	2c30      	cmp	r4, #48	; 0x30
 80096a8:	d107      	bne.n	80096ba <_strtol_l.constprop.0+0x56>
 80096aa:	782c      	ldrb	r4, [r5, #0]
 80096ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096b0:	2c58      	cmp	r4, #88	; 0x58
 80096b2:	d14d      	bne.n	8009750 <_strtol_l.constprop.0+0xec>
 80096b4:	786c      	ldrb	r4, [r5, #1]
 80096b6:	2310      	movs	r3, #16
 80096b8:	3502      	adds	r5, #2
 80096ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80096be:	f108 38ff 	add.w	r8, r8, #4294967295
 80096c2:	f04f 0e00 	mov.w	lr, #0
 80096c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80096ca:	4676      	mov	r6, lr
 80096cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80096d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80096d4:	f1bc 0f09 	cmp.w	ip, #9
 80096d8:	d816      	bhi.n	8009708 <_strtol_l.constprop.0+0xa4>
 80096da:	4664      	mov	r4, ip
 80096dc:	42a3      	cmp	r3, r4
 80096de:	dd24      	ble.n	800972a <_strtol_l.constprop.0+0xc6>
 80096e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80096e4:	d008      	beq.n	80096f8 <_strtol_l.constprop.0+0x94>
 80096e6:	45b1      	cmp	r9, r6
 80096e8:	d31c      	bcc.n	8009724 <_strtol_l.constprop.0+0xc0>
 80096ea:	d101      	bne.n	80096f0 <_strtol_l.constprop.0+0x8c>
 80096ec:	45a2      	cmp	sl, r4
 80096ee:	db19      	blt.n	8009724 <_strtol_l.constprop.0+0xc0>
 80096f0:	fb06 4603 	mla	r6, r6, r3, r4
 80096f4:	f04f 0e01 	mov.w	lr, #1
 80096f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096fc:	e7e8      	b.n	80096d0 <_strtol_l.constprop.0+0x6c>
 80096fe:	2c2b      	cmp	r4, #43	; 0x2b
 8009700:	bf04      	itt	eq
 8009702:	782c      	ldrbeq	r4, [r5, #0]
 8009704:	1cb5      	addeq	r5, r6, #2
 8009706:	e7ca      	b.n	800969e <_strtol_l.constprop.0+0x3a>
 8009708:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800970c:	f1bc 0f19 	cmp.w	ip, #25
 8009710:	d801      	bhi.n	8009716 <_strtol_l.constprop.0+0xb2>
 8009712:	3c37      	subs	r4, #55	; 0x37
 8009714:	e7e2      	b.n	80096dc <_strtol_l.constprop.0+0x78>
 8009716:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800971a:	f1bc 0f19 	cmp.w	ip, #25
 800971e:	d804      	bhi.n	800972a <_strtol_l.constprop.0+0xc6>
 8009720:	3c57      	subs	r4, #87	; 0x57
 8009722:	e7db      	b.n	80096dc <_strtol_l.constprop.0+0x78>
 8009724:	f04f 3eff 	mov.w	lr, #4294967295
 8009728:	e7e6      	b.n	80096f8 <_strtol_l.constprop.0+0x94>
 800972a:	f1be 3fff 	cmp.w	lr, #4294967295
 800972e:	d105      	bne.n	800973c <_strtol_l.constprop.0+0xd8>
 8009730:	2322      	movs	r3, #34	; 0x22
 8009732:	6003      	str	r3, [r0, #0]
 8009734:	4646      	mov	r6, r8
 8009736:	b942      	cbnz	r2, 800974a <_strtol_l.constprop.0+0xe6>
 8009738:	4630      	mov	r0, r6
 800973a:	e79e      	b.n	800967a <_strtol_l.constprop.0+0x16>
 800973c:	b107      	cbz	r7, 8009740 <_strtol_l.constprop.0+0xdc>
 800973e:	4276      	negs	r6, r6
 8009740:	2a00      	cmp	r2, #0
 8009742:	d0f9      	beq.n	8009738 <_strtol_l.constprop.0+0xd4>
 8009744:	f1be 0f00 	cmp.w	lr, #0
 8009748:	d000      	beq.n	800974c <_strtol_l.constprop.0+0xe8>
 800974a:	1e69      	subs	r1, r5, #1
 800974c:	6011      	str	r1, [r2, #0]
 800974e:	e7f3      	b.n	8009738 <_strtol_l.constprop.0+0xd4>
 8009750:	2430      	movs	r4, #48	; 0x30
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1b1      	bne.n	80096ba <_strtol_l.constprop.0+0x56>
 8009756:	2308      	movs	r3, #8
 8009758:	e7af      	b.n	80096ba <_strtol_l.constprop.0+0x56>
 800975a:	2c30      	cmp	r4, #48	; 0x30
 800975c:	d0a5      	beq.n	80096aa <_strtol_l.constprop.0+0x46>
 800975e:	230a      	movs	r3, #10
 8009760:	e7ab      	b.n	80096ba <_strtol_l.constprop.0+0x56>
 8009762:	bf00      	nop
 8009764:	0800ae35 	.word	0x0800ae35

08009768 <_strtol_r>:
 8009768:	f7ff bf7c 	b.w	8009664 <_strtol_l.constprop.0>

0800976c <__ascii_wctomb>:
 800976c:	b149      	cbz	r1, 8009782 <__ascii_wctomb+0x16>
 800976e:	2aff      	cmp	r2, #255	; 0xff
 8009770:	bf85      	ittet	hi
 8009772:	238a      	movhi	r3, #138	; 0x8a
 8009774:	6003      	strhi	r3, [r0, #0]
 8009776:	700a      	strbls	r2, [r1, #0]
 8009778:	f04f 30ff 	movhi.w	r0, #4294967295
 800977c:	bf98      	it	ls
 800977e:	2001      	movls	r0, #1
 8009780:	4770      	bx	lr
 8009782:	4608      	mov	r0, r1
 8009784:	4770      	bx	lr

08009786 <__ssputs_r>:
 8009786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978a:	688e      	ldr	r6, [r1, #8]
 800978c:	461f      	mov	r7, r3
 800978e:	42be      	cmp	r6, r7
 8009790:	680b      	ldr	r3, [r1, #0]
 8009792:	4682      	mov	sl, r0
 8009794:	460c      	mov	r4, r1
 8009796:	4690      	mov	r8, r2
 8009798:	d82c      	bhi.n	80097f4 <__ssputs_r+0x6e>
 800979a:	898a      	ldrh	r2, [r1, #12]
 800979c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097a0:	d026      	beq.n	80097f0 <__ssputs_r+0x6a>
 80097a2:	6965      	ldr	r5, [r4, #20]
 80097a4:	6909      	ldr	r1, [r1, #16]
 80097a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097aa:	eba3 0901 	sub.w	r9, r3, r1
 80097ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097b2:	1c7b      	adds	r3, r7, #1
 80097b4:	444b      	add	r3, r9
 80097b6:	106d      	asrs	r5, r5, #1
 80097b8:	429d      	cmp	r5, r3
 80097ba:	bf38      	it	cc
 80097bc:	461d      	movcc	r5, r3
 80097be:	0553      	lsls	r3, r2, #21
 80097c0:	d527      	bpl.n	8009812 <__ssputs_r+0x8c>
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7fc f8b8 	bl	8005938 <_malloc_r>
 80097c8:	4606      	mov	r6, r0
 80097ca:	b360      	cbz	r0, 8009826 <__ssputs_r+0xa0>
 80097cc:	6921      	ldr	r1, [r4, #16]
 80097ce:	464a      	mov	r2, r9
 80097d0:	f7fe f84b 	bl	800786a <memcpy>
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	6126      	str	r6, [r4, #16]
 80097e2:	6165      	str	r5, [r4, #20]
 80097e4:	444e      	add	r6, r9
 80097e6:	eba5 0509 	sub.w	r5, r5, r9
 80097ea:	6026      	str	r6, [r4, #0]
 80097ec:	60a5      	str	r5, [r4, #8]
 80097ee:	463e      	mov	r6, r7
 80097f0:	42be      	cmp	r6, r7
 80097f2:	d900      	bls.n	80097f6 <__ssputs_r+0x70>
 80097f4:	463e      	mov	r6, r7
 80097f6:	6820      	ldr	r0, [r4, #0]
 80097f8:	4632      	mov	r2, r6
 80097fa:	4641      	mov	r1, r8
 80097fc:	f000 fd5d 	bl	800a2ba <memmove>
 8009800:	68a3      	ldr	r3, [r4, #8]
 8009802:	1b9b      	subs	r3, r3, r6
 8009804:	60a3      	str	r3, [r4, #8]
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	4433      	add	r3, r6
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	2000      	movs	r0, #0
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	462a      	mov	r2, r5
 8009814:	f000 fda0 	bl	800a358 <_realloc_r>
 8009818:	4606      	mov	r6, r0
 800981a:	2800      	cmp	r0, #0
 800981c:	d1e0      	bne.n	80097e0 <__ssputs_r+0x5a>
 800981e:	6921      	ldr	r1, [r4, #16]
 8009820:	4650      	mov	r0, sl
 8009822:	f7fe febb 	bl	800859c <_free_r>
 8009826:	230c      	movs	r3, #12
 8009828:	f8ca 3000 	str.w	r3, [sl]
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e7e9      	b.n	800980e <__ssputs_r+0x88>
	...

0800983c <_svfiprintf_r>:
 800983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	4698      	mov	r8, r3
 8009842:	898b      	ldrh	r3, [r1, #12]
 8009844:	061b      	lsls	r3, r3, #24
 8009846:	b09d      	sub	sp, #116	; 0x74
 8009848:	4607      	mov	r7, r0
 800984a:	460d      	mov	r5, r1
 800984c:	4614      	mov	r4, r2
 800984e:	d50e      	bpl.n	800986e <_svfiprintf_r+0x32>
 8009850:	690b      	ldr	r3, [r1, #16]
 8009852:	b963      	cbnz	r3, 800986e <_svfiprintf_r+0x32>
 8009854:	2140      	movs	r1, #64	; 0x40
 8009856:	f7fc f86f 	bl	8005938 <_malloc_r>
 800985a:	6028      	str	r0, [r5, #0]
 800985c:	6128      	str	r0, [r5, #16]
 800985e:	b920      	cbnz	r0, 800986a <_svfiprintf_r+0x2e>
 8009860:	230c      	movs	r3, #12
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	f04f 30ff 	mov.w	r0, #4294967295
 8009868:	e0d0      	b.n	8009a0c <_svfiprintf_r+0x1d0>
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	616b      	str	r3, [r5, #20]
 800986e:	2300      	movs	r3, #0
 8009870:	9309      	str	r3, [sp, #36]	; 0x24
 8009872:	2320      	movs	r3, #32
 8009874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009878:	f8cd 800c 	str.w	r8, [sp, #12]
 800987c:	2330      	movs	r3, #48	; 0x30
 800987e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a24 <_svfiprintf_r+0x1e8>
 8009882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009886:	f04f 0901 	mov.w	r9, #1
 800988a:	4623      	mov	r3, r4
 800988c:	469a      	mov	sl, r3
 800988e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009892:	b10a      	cbz	r2, 8009898 <_svfiprintf_r+0x5c>
 8009894:	2a25      	cmp	r2, #37	; 0x25
 8009896:	d1f9      	bne.n	800988c <_svfiprintf_r+0x50>
 8009898:	ebba 0b04 	subs.w	fp, sl, r4
 800989c:	d00b      	beq.n	80098b6 <_svfiprintf_r+0x7a>
 800989e:	465b      	mov	r3, fp
 80098a0:	4622      	mov	r2, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff ff6e 	bl	8009786 <__ssputs_r>
 80098aa:	3001      	adds	r0, #1
 80098ac:	f000 80a9 	beq.w	8009a02 <_svfiprintf_r+0x1c6>
 80098b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b2:	445a      	add	r2, fp
 80098b4:	9209      	str	r2, [sp, #36]	; 0x24
 80098b6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 80a1 	beq.w	8009a02 <_svfiprintf_r+0x1c6>
 80098c0:	2300      	movs	r3, #0
 80098c2:	f04f 32ff 	mov.w	r2, #4294967295
 80098c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ca:	f10a 0a01 	add.w	sl, sl, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	9307      	str	r3, [sp, #28]
 80098d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d6:	931a      	str	r3, [sp, #104]	; 0x68
 80098d8:	4654      	mov	r4, sl
 80098da:	2205      	movs	r2, #5
 80098dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e0:	4850      	ldr	r0, [pc, #320]	; (8009a24 <_svfiprintf_r+0x1e8>)
 80098e2:	f7f6 fc75 	bl	80001d0 <memchr>
 80098e6:	9a04      	ldr	r2, [sp, #16]
 80098e8:	b9d8      	cbnz	r0, 8009922 <_svfiprintf_r+0xe6>
 80098ea:	06d0      	lsls	r0, r2, #27
 80098ec:	bf44      	itt	mi
 80098ee:	2320      	movmi	r3, #32
 80098f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f4:	0711      	lsls	r1, r2, #28
 80098f6:	bf44      	itt	mi
 80098f8:	232b      	movmi	r3, #43	; 0x2b
 80098fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009902:	2b2a      	cmp	r3, #42	; 0x2a
 8009904:	d015      	beq.n	8009932 <_svfiprintf_r+0xf6>
 8009906:	9a07      	ldr	r2, [sp, #28]
 8009908:	4654      	mov	r4, sl
 800990a:	2000      	movs	r0, #0
 800990c:	f04f 0c0a 	mov.w	ip, #10
 8009910:	4621      	mov	r1, r4
 8009912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009916:	3b30      	subs	r3, #48	; 0x30
 8009918:	2b09      	cmp	r3, #9
 800991a:	d94d      	bls.n	80099b8 <_svfiprintf_r+0x17c>
 800991c:	b1b0      	cbz	r0, 800994c <_svfiprintf_r+0x110>
 800991e:	9207      	str	r2, [sp, #28]
 8009920:	e014      	b.n	800994c <_svfiprintf_r+0x110>
 8009922:	eba0 0308 	sub.w	r3, r0, r8
 8009926:	fa09 f303 	lsl.w	r3, r9, r3
 800992a:	4313      	orrs	r3, r2
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	46a2      	mov	sl, r4
 8009930:	e7d2      	b.n	80098d8 <_svfiprintf_r+0x9c>
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	1d19      	adds	r1, r3, #4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	9103      	str	r1, [sp, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfbb      	ittet	lt
 800993e:	425b      	neglt	r3, r3
 8009940:	f042 0202 	orrlt.w	r2, r2, #2
 8009944:	9307      	strge	r3, [sp, #28]
 8009946:	9307      	strlt	r3, [sp, #28]
 8009948:	bfb8      	it	lt
 800994a:	9204      	strlt	r2, [sp, #16]
 800994c:	7823      	ldrb	r3, [r4, #0]
 800994e:	2b2e      	cmp	r3, #46	; 0x2e
 8009950:	d10c      	bne.n	800996c <_svfiprintf_r+0x130>
 8009952:	7863      	ldrb	r3, [r4, #1]
 8009954:	2b2a      	cmp	r3, #42	; 0x2a
 8009956:	d134      	bne.n	80099c2 <_svfiprintf_r+0x186>
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	1d1a      	adds	r2, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	9203      	str	r2, [sp, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfb8      	it	lt
 8009964:	f04f 33ff 	movlt.w	r3, #4294967295
 8009968:	3402      	adds	r4, #2
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a34 <_svfiprintf_r+0x1f8>
 8009970:	7821      	ldrb	r1, [r4, #0]
 8009972:	2203      	movs	r2, #3
 8009974:	4650      	mov	r0, sl
 8009976:	f7f6 fc2b 	bl	80001d0 <memchr>
 800997a:	b138      	cbz	r0, 800998c <_svfiprintf_r+0x150>
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	eba0 000a 	sub.w	r0, r0, sl
 8009982:	2240      	movs	r2, #64	; 0x40
 8009984:	4082      	lsls	r2, r0
 8009986:	4313      	orrs	r3, r2
 8009988:	3401      	adds	r4, #1
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009990:	4825      	ldr	r0, [pc, #148]	; (8009a28 <_svfiprintf_r+0x1ec>)
 8009992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009996:	2206      	movs	r2, #6
 8009998:	f7f6 fc1a 	bl	80001d0 <memchr>
 800999c:	2800      	cmp	r0, #0
 800999e:	d038      	beq.n	8009a12 <_svfiprintf_r+0x1d6>
 80099a0:	4b22      	ldr	r3, [pc, #136]	; (8009a2c <_svfiprintf_r+0x1f0>)
 80099a2:	bb1b      	cbnz	r3, 80099ec <_svfiprintf_r+0x1b0>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	3307      	adds	r3, #7
 80099a8:	f023 0307 	bic.w	r3, r3, #7
 80099ac:	3308      	adds	r3, #8
 80099ae:	9303      	str	r3, [sp, #12]
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	4433      	add	r3, r6
 80099b4:	9309      	str	r3, [sp, #36]	; 0x24
 80099b6:	e768      	b.n	800988a <_svfiprintf_r+0x4e>
 80099b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099bc:	460c      	mov	r4, r1
 80099be:	2001      	movs	r0, #1
 80099c0:	e7a6      	b.n	8009910 <_svfiprintf_r+0xd4>
 80099c2:	2300      	movs	r3, #0
 80099c4:	3401      	adds	r4, #1
 80099c6:	9305      	str	r3, [sp, #20]
 80099c8:	4619      	mov	r1, r3
 80099ca:	f04f 0c0a 	mov.w	ip, #10
 80099ce:	4620      	mov	r0, r4
 80099d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d4:	3a30      	subs	r2, #48	; 0x30
 80099d6:	2a09      	cmp	r2, #9
 80099d8:	d903      	bls.n	80099e2 <_svfiprintf_r+0x1a6>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0c6      	beq.n	800996c <_svfiprintf_r+0x130>
 80099de:	9105      	str	r1, [sp, #20]
 80099e0:	e7c4      	b.n	800996c <_svfiprintf_r+0x130>
 80099e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e6:	4604      	mov	r4, r0
 80099e8:	2301      	movs	r3, #1
 80099ea:	e7f0      	b.n	80099ce <_svfiprintf_r+0x192>
 80099ec:	ab03      	add	r3, sp, #12
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	462a      	mov	r2, r5
 80099f2:	4b0f      	ldr	r3, [pc, #60]	; (8009a30 <_svfiprintf_r+0x1f4>)
 80099f4:	a904      	add	r1, sp, #16
 80099f6:	4638      	mov	r0, r7
 80099f8:	f7fc ff4c 	bl	8006894 <_printf_float>
 80099fc:	1c42      	adds	r2, r0, #1
 80099fe:	4606      	mov	r6, r0
 8009a00:	d1d6      	bne.n	80099b0 <_svfiprintf_r+0x174>
 8009a02:	89ab      	ldrh	r3, [r5, #12]
 8009a04:	065b      	lsls	r3, r3, #25
 8009a06:	f53f af2d 	bmi.w	8009864 <_svfiprintf_r+0x28>
 8009a0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a0c:	b01d      	add	sp, #116	; 0x74
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	ab03      	add	r3, sp, #12
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	462a      	mov	r2, r5
 8009a18:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <_svfiprintf_r+0x1f4>)
 8009a1a:	a904      	add	r1, sp, #16
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7fd f9dd 	bl	8006ddc <_printf_i>
 8009a22:	e7eb      	b.n	80099fc <_svfiprintf_r+0x1c0>
 8009a24:	0800af35 	.word	0x0800af35
 8009a28:	0800af3f 	.word	0x0800af3f
 8009a2c:	08006895 	.word	0x08006895
 8009a30:	08009787 	.word	0x08009787
 8009a34:	0800af3b 	.word	0x0800af3b

08009a38 <_sungetc_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	1c4b      	adds	r3, r1, #1
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	d103      	bne.n	8009a48 <_sungetc_r+0x10>
 8009a40:	f04f 35ff 	mov.w	r5, #4294967295
 8009a44:	4628      	mov	r0, r5
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	8993      	ldrh	r3, [r2, #12]
 8009a4a:	f023 0320 	bic.w	r3, r3, #32
 8009a4e:	8193      	strh	r3, [r2, #12]
 8009a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a52:	6852      	ldr	r2, [r2, #4]
 8009a54:	b2cd      	uxtb	r5, r1
 8009a56:	b18b      	cbz	r3, 8009a7c <_sungetc_r+0x44>
 8009a58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	dd08      	ble.n	8009a70 <_sungetc_r+0x38>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	1e5a      	subs	r2, r3, #1
 8009a62:	6022      	str	r2, [r4, #0]
 8009a64:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	e7e9      	b.n	8009a44 <_sungetc_r+0xc>
 8009a70:	4621      	mov	r1, r4
 8009a72:	f000 fbe8 	bl	800a246 <__submore>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d0f1      	beq.n	8009a5e <_sungetc_r+0x26>
 8009a7a:	e7e1      	b.n	8009a40 <_sungetc_r+0x8>
 8009a7c:	6921      	ldr	r1, [r4, #16]
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	b151      	cbz	r1, 8009a98 <_sungetc_r+0x60>
 8009a82:	4299      	cmp	r1, r3
 8009a84:	d208      	bcs.n	8009a98 <_sungetc_r+0x60>
 8009a86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009a8a:	42a9      	cmp	r1, r5
 8009a8c:	d104      	bne.n	8009a98 <_sungetc_r+0x60>
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	3201      	adds	r2, #1
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	6062      	str	r2, [r4, #4]
 8009a96:	e7d5      	b.n	8009a44 <_sungetc_r+0xc>
 8009a98:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	63a3      	str	r3, [r4, #56]	; 0x38
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7dc      	b.n	8009a6c <_sungetc_r+0x34>

08009ab2 <__ssrefill_r>:
 8009ab2:	b510      	push	{r4, lr}
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009ab8:	b169      	cbz	r1, 8009ad6 <__ssrefill_r+0x24>
 8009aba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009abe:	4299      	cmp	r1, r3
 8009ac0:	d001      	beq.n	8009ac6 <__ssrefill_r+0x14>
 8009ac2:	f7fe fd6b 	bl	800859c <_free_r>
 8009ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ac8:	6063      	str	r3, [r4, #4]
 8009aca:	2000      	movs	r0, #0
 8009acc:	6360      	str	r0, [r4, #52]	; 0x34
 8009ace:	b113      	cbz	r3, 8009ad6 <__ssrefill_r+0x24>
 8009ad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ad2:	6023      	str	r3, [r4, #0]
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	2300      	movs	r3, #0
 8009adc:	6063      	str	r3, [r4, #4]
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f043 0320 	orr.w	r3, r3, #32
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aea:	e7f3      	b.n	8009ad4 <__ssrefill_r+0x22>

08009aec <__ssvfiscanf_r>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	460c      	mov	r4, r1
 8009af2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009af6:	2100      	movs	r1, #0
 8009af8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009afc:	49a6      	ldr	r1, [pc, #664]	; (8009d98 <__ssvfiscanf_r+0x2ac>)
 8009afe:	91a0      	str	r1, [sp, #640]	; 0x280
 8009b00:	f10d 0804 	add.w	r8, sp, #4
 8009b04:	49a5      	ldr	r1, [pc, #660]	; (8009d9c <__ssvfiscanf_r+0x2b0>)
 8009b06:	4fa6      	ldr	r7, [pc, #664]	; (8009da0 <__ssvfiscanf_r+0x2b4>)
 8009b08:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009da4 <__ssvfiscanf_r+0x2b8>
 8009b0c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009b10:	4606      	mov	r6, r0
 8009b12:	91a1      	str	r1, [sp, #644]	; 0x284
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	7813      	ldrb	r3, [r2, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 815a 	beq.w	8009dd2 <__ssvfiscanf_r+0x2e6>
 8009b1e:	5cf9      	ldrb	r1, [r7, r3]
 8009b20:	f011 0108 	ands.w	r1, r1, #8
 8009b24:	f102 0501 	add.w	r5, r2, #1
 8009b28:	d019      	beq.n	8009b5e <__ssvfiscanf_r+0x72>
 8009b2a:	6863      	ldr	r3, [r4, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd0f      	ble.n	8009b50 <__ssvfiscanf_r+0x64>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	781a      	ldrb	r2, [r3, #0]
 8009b34:	5cba      	ldrb	r2, [r7, r2]
 8009b36:	0712      	lsls	r2, r2, #28
 8009b38:	d401      	bmi.n	8009b3e <__ssvfiscanf_r+0x52>
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	e7eb      	b.n	8009b16 <__ssvfiscanf_r+0x2a>
 8009b3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b40:	3201      	adds	r2, #1
 8009b42:	9245      	str	r2, [sp, #276]	; 0x114
 8009b44:	6862      	ldr	r2, [r4, #4]
 8009b46:	3301      	adds	r3, #1
 8009b48:	3a01      	subs	r2, #1
 8009b4a:	6062      	str	r2, [r4, #4]
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	e7ec      	b.n	8009b2a <__ssvfiscanf_r+0x3e>
 8009b50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b52:	4621      	mov	r1, r4
 8009b54:	4630      	mov	r0, r6
 8009b56:	4798      	blx	r3
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0e9      	beq.n	8009b30 <__ssvfiscanf_r+0x44>
 8009b5c:	e7ed      	b.n	8009b3a <__ssvfiscanf_r+0x4e>
 8009b5e:	2b25      	cmp	r3, #37	; 0x25
 8009b60:	d012      	beq.n	8009b88 <__ssvfiscanf_r+0x9c>
 8009b62:	469a      	mov	sl, r3
 8009b64:	6863      	ldr	r3, [r4, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f340 8091 	ble.w	8009c8e <__ssvfiscanf_r+0x1a2>
 8009b6c:	6822      	ldr	r2, [r4, #0]
 8009b6e:	7813      	ldrb	r3, [r2, #0]
 8009b70:	4553      	cmp	r3, sl
 8009b72:	f040 812e 	bne.w	8009dd2 <__ssvfiscanf_r+0x2e6>
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	6063      	str	r3, [r4, #4]
 8009b7c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009b7e:	3201      	adds	r2, #1
 8009b80:	3301      	adds	r3, #1
 8009b82:	6022      	str	r2, [r4, #0]
 8009b84:	9345      	str	r3, [sp, #276]	; 0x114
 8009b86:	e7d8      	b.n	8009b3a <__ssvfiscanf_r+0x4e>
 8009b88:	9141      	str	r1, [sp, #260]	; 0x104
 8009b8a:	9143      	str	r1, [sp, #268]	; 0x10c
 8009b8c:	7853      	ldrb	r3, [r2, #1]
 8009b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b90:	bf02      	ittt	eq
 8009b92:	2310      	moveq	r3, #16
 8009b94:	1c95      	addeq	r5, r2, #2
 8009b96:	9341      	streq	r3, [sp, #260]	; 0x104
 8009b98:	220a      	movs	r2, #10
 8009b9a:	46aa      	mov	sl, r5
 8009b9c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009ba0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009ba4:	2b09      	cmp	r3, #9
 8009ba6:	d91c      	bls.n	8009be2 <__ssvfiscanf_r+0xf6>
 8009ba8:	487e      	ldr	r0, [pc, #504]	; (8009da4 <__ssvfiscanf_r+0x2b8>)
 8009baa:	2203      	movs	r2, #3
 8009bac:	f7f6 fb10 	bl	80001d0 <memchr>
 8009bb0:	b138      	cbz	r0, 8009bc2 <__ssvfiscanf_r+0xd6>
 8009bb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009bb4:	eba0 0009 	sub.w	r0, r0, r9
 8009bb8:	2301      	movs	r3, #1
 8009bba:	4083      	lsls	r3, r0
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	9341      	str	r3, [sp, #260]	; 0x104
 8009bc0:	4655      	mov	r5, sl
 8009bc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bc6:	2b78      	cmp	r3, #120	; 0x78
 8009bc8:	d806      	bhi.n	8009bd8 <__ssvfiscanf_r+0xec>
 8009bca:	2b57      	cmp	r3, #87	; 0x57
 8009bcc:	d810      	bhi.n	8009bf0 <__ssvfiscanf_r+0x104>
 8009bce:	2b25      	cmp	r3, #37	; 0x25
 8009bd0:	d0c7      	beq.n	8009b62 <__ssvfiscanf_r+0x76>
 8009bd2:	d857      	bhi.n	8009c84 <__ssvfiscanf_r+0x198>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d065      	beq.n	8009ca4 <__ssvfiscanf_r+0x1b8>
 8009bd8:	2303      	movs	r3, #3
 8009bda:	9347      	str	r3, [sp, #284]	; 0x11c
 8009bdc:	230a      	movs	r3, #10
 8009bde:	9342      	str	r3, [sp, #264]	; 0x108
 8009be0:	e076      	b.n	8009cd0 <__ssvfiscanf_r+0x1e4>
 8009be2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009be4:	fb02 1103 	mla	r1, r2, r3, r1
 8009be8:	3930      	subs	r1, #48	; 0x30
 8009bea:	9143      	str	r1, [sp, #268]	; 0x10c
 8009bec:	4655      	mov	r5, sl
 8009bee:	e7d4      	b.n	8009b9a <__ssvfiscanf_r+0xae>
 8009bf0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009bf4:	2a20      	cmp	r2, #32
 8009bf6:	d8ef      	bhi.n	8009bd8 <__ssvfiscanf_r+0xec>
 8009bf8:	a101      	add	r1, pc, #4	; (adr r1, 8009c00 <__ssvfiscanf_r+0x114>)
 8009bfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009cb3 	.word	0x08009cb3
 8009c04:	08009bd9 	.word	0x08009bd9
 8009c08:	08009bd9 	.word	0x08009bd9
 8009c0c:	08009d11 	.word	0x08009d11
 8009c10:	08009bd9 	.word	0x08009bd9
 8009c14:	08009bd9 	.word	0x08009bd9
 8009c18:	08009bd9 	.word	0x08009bd9
 8009c1c:	08009bd9 	.word	0x08009bd9
 8009c20:	08009bd9 	.word	0x08009bd9
 8009c24:	08009bd9 	.word	0x08009bd9
 8009c28:	08009bd9 	.word	0x08009bd9
 8009c2c:	08009d27 	.word	0x08009d27
 8009c30:	08009d0d 	.word	0x08009d0d
 8009c34:	08009c8b 	.word	0x08009c8b
 8009c38:	08009c8b 	.word	0x08009c8b
 8009c3c:	08009c8b 	.word	0x08009c8b
 8009c40:	08009bd9 	.word	0x08009bd9
 8009c44:	08009cc9 	.word	0x08009cc9
 8009c48:	08009bd9 	.word	0x08009bd9
 8009c4c:	08009bd9 	.word	0x08009bd9
 8009c50:	08009bd9 	.word	0x08009bd9
 8009c54:	08009bd9 	.word	0x08009bd9
 8009c58:	08009d37 	.word	0x08009d37
 8009c5c:	08009d05 	.word	0x08009d05
 8009c60:	08009cab 	.word	0x08009cab
 8009c64:	08009bd9 	.word	0x08009bd9
 8009c68:	08009bd9 	.word	0x08009bd9
 8009c6c:	08009d33 	.word	0x08009d33
 8009c70:	08009bd9 	.word	0x08009bd9
 8009c74:	08009d0d 	.word	0x08009d0d
 8009c78:	08009bd9 	.word	0x08009bd9
 8009c7c:	08009bd9 	.word	0x08009bd9
 8009c80:	08009cb3 	.word	0x08009cb3
 8009c84:	3b45      	subs	r3, #69	; 0x45
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d8a6      	bhi.n	8009bd8 <__ssvfiscanf_r+0xec>
 8009c8a:	2305      	movs	r3, #5
 8009c8c:	e01f      	b.n	8009cce <__ssvfiscanf_r+0x1e2>
 8009c8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c90:	4621      	mov	r1, r4
 8009c92:	4630      	mov	r0, r6
 8009c94:	4798      	blx	r3
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f43f af68 	beq.w	8009b6c <__ssvfiscanf_r+0x80>
 8009c9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 808d 	bne.w	8009dbe <__ssvfiscanf_r+0x2d2>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	e08f      	b.n	8009dca <__ssvfiscanf_r+0x2de>
 8009caa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009cac:	f042 0220 	orr.w	r2, r2, #32
 8009cb0:	9241      	str	r2, [sp, #260]	; 0x104
 8009cb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb8:	9241      	str	r2, [sp, #260]	; 0x104
 8009cba:	2210      	movs	r2, #16
 8009cbc:	2b6f      	cmp	r3, #111	; 0x6f
 8009cbe:	9242      	str	r2, [sp, #264]	; 0x108
 8009cc0:	bf34      	ite	cc
 8009cc2:	2303      	movcc	r3, #3
 8009cc4:	2304      	movcs	r3, #4
 8009cc6:	e002      	b.n	8009cce <__ssvfiscanf_r+0x1e2>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	9342      	str	r3, [sp, #264]	; 0x108
 8009ccc:	2303      	movs	r3, #3
 8009cce:	9347      	str	r3, [sp, #284]	; 0x11c
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dd3d      	ble.n	8009d52 <__ssvfiscanf_r+0x266>
 8009cd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009cd8:	0659      	lsls	r1, r3, #25
 8009cda:	d404      	bmi.n	8009ce6 <__ssvfiscanf_r+0x1fa>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	5cba      	ldrb	r2, [r7, r2]
 8009ce2:	0712      	lsls	r2, r2, #28
 8009ce4:	d43c      	bmi.n	8009d60 <__ssvfiscanf_r+0x274>
 8009ce6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	dc4b      	bgt.n	8009d84 <__ssvfiscanf_r+0x298>
 8009cec:	466b      	mov	r3, sp
 8009cee:	4622      	mov	r2, r4
 8009cf0:	a941      	add	r1, sp, #260	; 0x104
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 f872 	bl	8009ddc <_scanf_chars>
 8009cf8:	2801      	cmp	r0, #1
 8009cfa:	d06a      	beq.n	8009dd2 <__ssvfiscanf_r+0x2e6>
 8009cfc:	2802      	cmp	r0, #2
 8009cfe:	f47f af1c 	bne.w	8009b3a <__ssvfiscanf_r+0x4e>
 8009d02:	e7cb      	b.n	8009c9c <__ssvfiscanf_r+0x1b0>
 8009d04:	2308      	movs	r3, #8
 8009d06:	9342      	str	r3, [sp, #264]	; 0x108
 8009d08:	2304      	movs	r3, #4
 8009d0a:	e7e0      	b.n	8009cce <__ssvfiscanf_r+0x1e2>
 8009d0c:	220a      	movs	r2, #10
 8009d0e:	e7d5      	b.n	8009cbc <__ssvfiscanf_r+0x1d0>
 8009d10:	4629      	mov	r1, r5
 8009d12:	4640      	mov	r0, r8
 8009d14:	f000 fa5e 	bl	800a1d4 <__sccl>
 8009d18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1e:	9341      	str	r3, [sp, #260]	; 0x104
 8009d20:	4605      	mov	r5, r0
 8009d22:	2301      	movs	r3, #1
 8009d24:	e7d3      	b.n	8009cce <__ssvfiscanf_r+0x1e2>
 8009d26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d2c:	9341      	str	r3, [sp, #260]	; 0x104
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e7cd      	b.n	8009cce <__ssvfiscanf_r+0x1e2>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e7cb      	b.n	8009cce <__ssvfiscanf_r+0x1e2>
 8009d36:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009d38:	06c3      	lsls	r3, r0, #27
 8009d3a:	f53f aefe 	bmi.w	8009b3a <__ssvfiscanf_r+0x4e>
 8009d3e:	9b00      	ldr	r3, [sp, #0]
 8009d40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009d42:	1d19      	adds	r1, r3, #4
 8009d44:	9100      	str	r1, [sp, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	07c0      	lsls	r0, r0, #31
 8009d4a:	bf4c      	ite	mi
 8009d4c:	801a      	strhmi	r2, [r3, #0]
 8009d4e:	601a      	strpl	r2, [r3, #0]
 8009d50:	e6f3      	b.n	8009b3a <__ssvfiscanf_r+0x4e>
 8009d52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d54:	4621      	mov	r1, r4
 8009d56:	4630      	mov	r0, r6
 8009d58:	4798      	blx	r3
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d0bb      	beq.n	8009cd6 <__ssvfiscanf_r+0x1ea>
 8009d5e:	e79d      	b.n	8009c9c <__ssvfiscanf_r+0x1b0>
 8009d60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009d62:	3201      	adds	r2, #1
 8009d64:	9245      	str	r2, [sp, #276]	; 0x114
 8009d66:	6862      	ldr	r2, [r4, #4]
 8009d68:	3a01      	subs	r2, #1
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	6062      	str	r2, [r4, #4]
 8009d6e:	dd02      	ble.n	8009d76 <__ssvfiscanf_r+0x28a>
 8009d70:	3301      	adds	r3, #1
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	e7b2      	b.n	8009cdc <__ssvfiscanf_r+0x1f0>
 8009d76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	4798      	blx	r3
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d0ac      	beq.n	8009cdc <__ssvfiscanf_r+0x1f0>
 8009d82:	e78b      	b.n	8009c9c <__ssvfiscanf_r+0x1b0>
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	dc0f      	bgt.n	8009da8 <__ssvfiscanf_r+0x2bc>
 8009d88:	466b      	mov	r3, sp
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	a941      	add	r1, sp, #260	; 0x104
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f000 f87e 	bl	8009e90 <_scanf_i>
 8009d94:	e7b0      	b.n	8009cf8 <__ssvfiscanf_r+0x20c>
 8009d96:	bf00      	nop
 8009d98:	08009a39 	.word	0x08009a39
 8009d9c:	08009ab3 	.word	0x08009ab3
 8009da0:	0800ae35 	.word	0x0800ae35
 8009da4:	0800af3b 	.word	0x0800af3b
 8009da8:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <__ssvfiscanf_r+0x2ec>)
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f43f aec5 	beq.w	8009b3a <__ssvfiscanf_r+0x4e>
 8009db0:	466b      	mov	r3, sp
 8009db2:	4622      	mov	r2, r4
 8009db4:	a941      	add	r1, sp, #260	; 0x104
 8009db6:	4630      	mov	r0, r6
 8009db8:	f7fd f932 	bl	8007020 <_scanf_float>
 8009dbc:	e79c      	b.n	8009cf8 <__ssvfiscanf_r+0x20c>
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009dc4:	bf18      	it	ne
 8009dc6:	f04f 30ff 	movne.w	r0, #4294967295
 8009dca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009dd4:	e7f9      	b.n	8009dca <__ssvfiscanf_r+0x2de>
 8009dd6:	bf00      	nop
 8009dd8:	08007021 	.word	0x08007021

08009ddc <_scanf_chars>:
 8009ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de0:	4615      	mov	r5, r2
 8009de2:	688a      	ldr	r2, [r1, #8]
 8009de4:	4680      	mov	r8, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	b932      	cbnz	r2, 8009df8 <_scanf_chars+0x1c>
 8009dea:	698a      	ldr	r2, [r1, #24]
 8009dec:	2a00      	cmp	r2, #0
 8009dee:	bf0c      	ite	eq
 8009df0:	2201      	moveq	r2, #1
 8009df2:	f04f 32ff 	movne.w	r2, #4294967295
 8009df6:	608a      	str	r2, [r1, #8]
 8009df8:	6822      	ldr	r2, [r4, #0]
 8009dfa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009e8c <_scanf_chars+0xb0>
 8009dfe:	06d1      	lsls	r1, r2, #27
 8009e00:	bf5f      	itttt	pl
 8009e02:	681a      	ldrpl	r2, [r3, #0]
 8009e04:	1d11      	addpl	r1, r2, #4
 8009e06:	6019      	strpl	r1, [r3, #0]
 8009e08:	6816      	ldrpl	r6, [r2, #0]
 8009e0a:	2700      	movs	r7, #0
 8009e0c:	69a0      	ldr	r0, [r4, #24]
 8009e0e:	b188      	cbz	r0, 8009e34 <_scanf_chars+0x58>
 8009e10:	2801      	cmp	r0, #1
 8009e12:	d107      	bne.n	8009e24 <_scanf_chars+0x48>
 8009e14:	682a      	ldr	r2, [r5, #0]
 8009e16:	7811      	ldrb	r1, [r2, #0]
 8009e18:	6962      	ldr	r2, [r4, #20]
 8009e1a:	5c52      	ldrb	r2, [r2, r1]
 8009e1c:	b952      	cbnz	r2, 8009e34 <_scanf_chars+0x58>
 8009e1e:	2f00      	cmp	r7, #0
 8009e20:	d031      	beq.n	8009e86 <_scanf_chars+0xaa>
 8009e22:	e022      	b.n	8009e6a <_scanf_chars+0x8e>
 8009e24:	2802      	cmp	r0, #2
 8009e26:	d120      	bne.n	8009e6a <_scanf_chars+0x8e>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009e30:	071b      	lsls	r3, r3, #28
 8009e32:	d41a      	bmi.n	8009e6a <_scanf_chars+0x8e>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	06da      	lsls	r2, r3, #27
 8009e38:	bf5e      	ittt	pl
 8009e3a:	682b      	ldrpl	r3, [r5, #0]
 8009e3c:	781b      	ldrbpl	r3, [r3, #0]
 8009e3e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009e42:	682a      	ldr	r2, [r5, #0]
 8009e44:	686b      	ldr	r3, [r5, #4]
 8009e46:	3201      	adds	r2, #1
 8009e48:	602a      	str	r2, [r5, #0]
 8009e4a:	68a2      	ldr	r2, [r4, #8]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	606b      	str	r3, [r5, #4]
 8009e52:	3701      	adds	r7, #1
 8009e54:	60a2      	str	r2, [r4, #8]
 8009e56:	b142      	cbz	r2, 8009e6a <_scanf_chars+0x8e>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	dcd7      	bgt.n	8009e0c <_scanf_chars+0x30>
 8009e5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e60:	4629      	mov	r1, r5
 8009e62:	4640      	mov	r0, r8
 8009e64:	4798      	blx	r3
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d0d0      	beq.n	8009e0c <_scanf_chars+0x30>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	f013 0310 	ands.w	r3, r3, #16
 8009e70:	d105      	bne.n	8009e7e <_scanf_chars+0xa2>
 8009e72:	68e2      	ldr	r2, [r4, #12]
 8009e74:	3201      	adds	r2, #1
 8009e76:	60e2      	str	r2, [r4, #12]
 8009e78:	69a2      	ldr	r2, [r4, #24]
 8009e7a:	b102      	cbz	r2, 8009e7e <_scanf_chars+0xa2>
 8009e7c:	7033      	strb	r3, [r6, #0]
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	443b      	add	r3, r7
 8009e82:	6123      	str	r3, [r4, #16]
 8009e84:	2000      	movs	r0, #0
 8009e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e8a:	bf00      	nop
 8009e8c:	0800ae35 	.word	0x0800ae35

08009e90 <_scanf_i>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	4698      	mov	r8, r3
 8009e96:	4b74      	ldr	r3, [pc, #464]	; (800a068 <_scanf_i+0x1d8>)
 8009e98:	460c      	mov	r4, r1
 8009e9a:	4682      	mov	sl, r0
 8009e9c:	4616      	mov	r6, r2
 8009e9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	ab03      	add	r3, sp, #12
 8009ea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009eaa:	4b70      	ldr	r3, [pc, #448]	; (800a06c <_scanf_i+0x1dc>)
 8009eac:	69a1      	ldr	r1, [r4, #24]
 8009eae:	4a70      	ldr	r2, [pc, #448]	; (800a070 <_scanf_i+0x1e0>)
 8009eb0:	2903      	cmp	r1, #3
 8009eb2:	bf18      	it	ne
 8009eb4:	461a      	movne	r2, r3
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	9201      	str	r2, [sp, #4]
 8009eba:	1e5a      	subs	r2, r3, #1
 8009ebc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009ec0:	bf88      	it	hi
 8009ec2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009ec6:	4627      	mov	r7, r4
 8009ec8:	bf82      	ittt	hi
 8009eca:	eb03 0905 	addhi.w	r9, r3, r5
 8009ece:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ed2:	60a3      	strhi	r3, [r4, #8]
 8009ed4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009ed8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009edc:	bf98      	it	ls
 8009ede:	f04f 0900 	movls.w	r9, #0
 8009ee2:	6023      	str	r3, [r4, #0]
 8009ee4:	463d      	mov	r5, r7
 8009ee6:	f04f 0b00 	mov.w	fp, #0
 8009eea:	6831      	ldr	r1, [r6, #0]
 8009eec:	ab03      	add	r3, sp, #12
 8009eee:	7809      	ldrb	r1, [r1, #0]
 8009ef0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	f7f6 f96b 	bl	80001d0 <memchr>
 8009efa:	b328      	cbz	r0, 8009f48 <_scanf_i+0xb8>
 8009efc:	f1bb 0f01 	cmp.w	fp, #1
 8009f00:	d159      	bne.n	8009fb6 <_scanf_i+0x126>
 8009f02:	6862      	ldr	r2, [r4, #4]
 8009f04:	b92a      	cbnz	r2, 8009f12 <_scanf_i+0x82>
 8009f06:	6822      	ldr	r2, [r4, #0]
 8009f08:	2308      	movs	r3, #8
 8009f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f0e:	6063      	str	r3, [r4, #4]
 8009f10:	6022      	str	r2, [r4, #0]
 8009f12:	6822      	ldr	r2, [r4, #0]
 8009f14:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009f18:	6022      	str	r2, [r4, #0]
 8009f1a:	68a2      	ldr	r2, [r4, #8]
 8009f1c:	1e51      	subs	r1, r2, #1
 8009f1e:	60a1      	str	r1, [r4, #8]
 8009f20:	b192      	cbz	r2, 8009f48 <_scanf_i+0xb8>
 8009f22:	6832      	ldr	r2, [r6, #0]
 8009f24:	1c51      	adds	r1, r2, #1
 8009f26:	6031      	str	r1, [r6, #0]
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	f805 2b01 	strb.w	r2, [r5], #1
 8009f2e:	6872      	ldr	r2, [r6, #4]
 8009f30:	3a01      	subs	r2, #1
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	6072      	str	r2, [r6, #4]
 8009f36:	dc07      	bgt.n	8009f48 <_scanf_i+0xb8>
 8009f38:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4650      	mov	r0, sl
 8009f40:	4790      	blx	r2
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f040 8085 	bne.w	800a052 <_scanf_i+0x1c2>
 8009f48:	f10b 0b01 	add.w	fp, fp, #1
 8009f4c:	f1bb 0f03 	cmp.w	fp, #3
 8009f50:	d1cb      	bne.n	8009eea <_scanf_i+0x5a>
 8009f52:	6863      	ldr	r3, [r4, #4]
 8009f54:	b90b      	cbnz	r3, 8009f5a <_scanf_i+0xca>
 8009f56:	230a      	movs	r3, #10
 8009f58:	6063      	str	r3, [r4, #4]
 8009f5a:	6863      	ldr	r3, [r4, #4]
 8009f5c:	4945      	ldr	r1, [pc, #276]	; (800a074 <_scanf_i+0x1e4>)
 8009f5e:	6960      	ldr	r0, [r4, #20]
 8009f60:	1ac9      	subs	r1, r1, r3
 8009f62:	f000 f937 	bl	800a1d4 <__sccl>
 8009f66:	f04f 0b00 	mov.w	fp, #0
 8009f6a:	68a3      	ldr	r3, [r4, #8]
 8009f6c:	6822      	ldr	r2, [r4, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d03d      	beq.n	8009fee <_scanf_i+0x15e>
 8009f72:	6831      	ldr	r1, [r6, #0]
 8009f74:	6960      	ldr	r0, [r4, #20]
 8009f76:	f891 c000 	ldrb.w	ip, [r1]
 8009f7a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d035      	beq.n	8009fee <_scanf_i+0x15e>
 8009f82:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009f86:	d124      	bne.n	8009fd2 <_scanf_i+0x142>
 8009f88:	0510      	lsls	r0, r2, #20
 8009f8a:	d522      	bpl.n	8009fd2 <_scanf_i+0x142>
 8009f8c:	f10b 0b01 	add.w	fp, fp, #1
 8009f90:	f1b9 0f00 	cmp.w	r9, #0
 8009f94:	d003      	beq.n	8009f9e <_scanf_i+0x10e>
 8009f96:	3301      	adds	r3, #1
 8009f98:	f109 39ff 	add.w	r9, r9, #4294967295
 8009f9c:	60a3      	str	r3, [r4, #8]
 8009f9e:	6873      	ldr	r3, [r6, #4]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	6073      	str	r3, [r6, #4]
 8009fa6:	dd1b      	ble.n	8009fe0 <_scanf_i+0x150>
 8009fa8:	6833      	ldr	r3, [r6, #0]
 8009faa:	3301      	adds	r3, #1
 8009fac:	6033      	str	r3, [r6, #0]
 8009fae:	68a3      	ldr	r3, [r4, #8]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	e7d9      	b.n	8009f6a <_scanf_i+0xda>
 8009fb6:	f1bb 0f02 	cmp.w	fp, #2
 8009fba:	d1ae      	bne.n	8009f1a <_scanf_i+0x8a>
 8009fbc:	6822      	ldr	r2, [r4, #0]
 8009fbe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009fc2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009fc6:	d1bf      	bne.n	8009f48 <_scanf_i+0xb8>
 8009fc8:	2310      	movs	r3, #16
 8009fca:	6063      	str	r3, [r4, #4]
 8009fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fd0:	e7a2      	b.n	8009f18 <_scanf_i+0x88>
 8009fd2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009fd6:	6022      	str	r2, [r4, #0]
 8009fd8:	780b      	ldrb	r3, [r1, #0]
 8009fda:	f805 3b01 	strb.w	r3, [r5], #1
 8009fde:	e7de      	b.n	8009f9e <_scanf_i+0x10e>
 8009fe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	4798      	blx	r3
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0df      	beq.n	8009fae <_scanf_i+0x11e>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	05d9      	lsls	r1, r3, #23
 8009ff2:	d50d      	bpl.n	800a010 <_scanf_i+0x180>
 8009ff4:	42bd      	cmp	r5, r7
 8009ff6:	d909      	bls.n	800a00c <_scanf_i+0x17c>
 8009ff8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a000:	4632      	mov	r2, r6
 800a002:	4650      	mov	r0, sl
 800a004:	4798      	blx	r3
 800a006:	f105 39ff 	add.w	r9, r5, #4294967295
 800a00a:	464d      	mov	r5, r9
 800a00c:	42bd      	cmp	r5, r7
 800a00e:	d028      	beq.n	800a062 <_scanf_i+0x1d2>
 800a010:	6822      	ldr	r2, [r4, #0]
 800a012:	f012 0210 	ands.w	r2, r2, #16
 800a016:	d113      	bne.n	800a040 <_scanf_i+0x1b0>
 800a018:	702a      	strb	r2, [r5, #0]
 800a01a:	6863      	ldr	r3, [r4, #4]
 800a01c:	9e01      	ldr	r6, [sp, #4]
 800a01e:	4639      	mov	r1, r7
 800a020:	4650      	mov	r0, sl
 800a022:	47b0      	blx	r6
 800a024:	f8d8 3000 	ldr.w	r3, [r8]
 800a028:	6821      	ldr	r1, [r4, #0]
 800a02a:	1d1a      	adds	r2, r3, #4
 800a02c:	f8c8 2000 	str.w	r2, [r8]
 800a030:	f011 0f20 	tst.w	r1, #32
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	d00f      	beq.n	800a058 <_scanf_i+0x1c8>
 800a038:	6018      	str	r0, [r3, #0]
 800a03a:	68e3      	ldr	r3, [r4, #12]
 800a03c:	3301      	adds	r3, #1
 800a03e:	60e3      	str	r3, [r4, #12]
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	1bed      	subs	r5, r5, r7
 800a044:	445d      	add	r5, fp
 800a046:	442b      	add	r3, r5
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	2000      	movs	r0, #0
 800a04c:	b007      	add	sp, #28
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	f04f 0b00 	mov.w	fp, #0
 800a056:	e7ca      	b.n	8009fee <_scanf_i+0x15e>
 800a058:	07ca      	lsls	r2, r1, #31
 800a05a:	bf4c      	ite	mi
 800a05c:	8018      	strhmi	r0, [r3, #0]
 800a05e:	6018      	strpl	r0, [r3, #0]
 800a060:	e7eb      	b.n	800a03a <_scanf_i+0x1aa>
 800a062:	2001      	movs	r0, #1
 800a064:	e7f2      	b.n	800a04c <_scanf_i+0x1bc>
 800a066:	bf00      	nop
 800a068:	0800ab14 	.word	0x0800ab14
 800a06c:	0800a49d 	.word	0x0800a49d
 800a070:	08009769 	.word	0x08009769
 800a074:	0800af56 	.word	0x0800af56

0800a078 <__sflush_r>:
 800a078:	898a      	ldrh	r2, [r1, #12]
 800a07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07e:	4605      	mov	r5, r0
 800a080:	0710      	lsls	r0, r2, #28
 800a082:	460c      	mov	r4, r1
 800a084:	d458      	bmi.n	800a138 <__sflush_r+0xc0>
 800a086:	684b      	ldr	r3, [r1, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dc05      	bgt.n	800a098 <__sflush_r+0x20>
 800a08c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a08e:	2b00      	cmp	r3, #0
 800a090:	dc02      	bgt.n	800a098 <__sflush_r+0x20>
 800a092:	2000      	movs	r0, #0
 800a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	d0f9      	beq.n	800a092 <__sflush_r+0x1a>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0a4:	682f      	ldr	r7, [r5, #0]
 800a0a6:	6a21      	ldr	r1, [r4, #32]
 800a0a8:	602b      	str	r3, [r5, #0]
 800a0aa:	d032      	beq.n	800a112 <__sflush_r+0x9a>
 800a0ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	075a      	lsls	r2, r3, #29
 800a0b2:	d505      	bpl.n	800a0c0 <__sflush_r+0x48>
 800a0b4:	6863      	ldr	r3, [r4, #4]
 800a0b6:	1ac0      	subs	r0, r0, r3
 800a0b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0ba:	b10b      	cbz	r3, 800a0c0 <__sflush_r+0x48>
 800a0bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0be:	1ac0      	subs	r0, r0, r3
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0c6:	6a21      	ldr	r1, [r4, #32]
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b0      	blx	r6
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	d106      	bne.n	800a0e0 <__sflush_r+0x68>
 800a0d2:	6829      	ldr	r1, [r5, #0]
 800a0d4:	291d      	cmp	r1, #29
 800a0d6:	d82b      	bhi.n	800a130 <__sflush_r+0xb8>
 800a0d8:	4a29      	ldr	r2, [pc, #164]	; (800a180 <__sflush_r+0x108>)
 800a0da:	410a      	asrs	r2, r1
 800a0dc:	07d6      	lsls	r6, r2, #31
 800a0de:	d427      	bmi.n	800a130 <__sflush_r+0xb8>
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	6062      	str	r2, [r4, #4]
 800a0e4:	04d9      	lsls	r1, r3, #19
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	6022      	str	r2, [r4, #0]
 800a0ea:	d504      	bpl.n	800a0f6 <__sflush_r+0x7e>
 800a0ec:	1c42      	adds	r2, r0, #1
 800a0ee:	d101      	bne.n	800a0f4 <__sflush_r+0x7c>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b903      	cbnz	r3, 800a0f6 <__sflush_r+0x7e>
 800a0f4:	6560      	str	r0, [r4, #84]	; 0x54
 800a0f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0f8:	602f      	str	r7, [r5, #0]
 800a0fa:	2900      	cmp	r1, #0
 800a0fc:	d0c9      	beq.n	800a092 <__sflush_r+0x1a>
 800a0fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a102:	4299      	cmp	r1, r3
 800a104:	d002      	beq.n	800a10c <__sflush_r+0x94>
 800a106:	4628      	mov	r0, r5
 800a108:	f7fe fa48 	bl	800859c <_free_r>
 800a10c:	2000      	movs	r0, #0
 800a10e:	6360      	str	r0, [r4, #52]	; 0x34
 800a110:	e7c0      	b.n	800a094 <__sflush_r+0x1c>
 800a112:	2301      	movs	r3, #1
 800a114:	4628      	mov	r0, r5
 800a116:	47b0      	blx	r6
 800a118:	1c41      	adds	r1, r0, #1
 800a11a:	d1c8      	bne.n	800a0ae <__sflush_r+0x36>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d0c5      	beq.n	800a0ae <__sflush_r+0x36>
 800a122:	2b1d      	cmp	r3, #29
 800a124:	d001      	beq.n	800a12a <__sflush_r+0xb2>
 800a126:	2b16      	cmp	r3, #22
 800a128:	d101      	bne.n	800a12e <__sflush_r+0xb6>
 800a12a:	602f      	str	r7, [r5, #0]
 800a12c:	e7b1      	b.n	800a092 <__sflush_r+0x1a>
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	e7ad      	b.n	800a094 <__sflush_r+0x1c>
 800a138:	690f      	ldr	r7, [r1, #16]
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	d0a9      	beq.n	800a092 <__sflush_r+0x1a>
 800a13e:	0793      	lsls	r3, r2, #30
 800a140:	680e      	ldr	r6, [r1, #0]
 800a142:	bf08      	it	eq
 800a144:	694b      	ldreq	r3, [r1, #20]
 800a146:	600f      	str	r7, [r1, #0]
 800a148:	bf18      	it	ne
 800a14a:	2300      	movne	r3, #0
 800a14c:	eba6 0807 	sub.w	r8, r6, r7
 800a150:	608b      	str	r3, [r1, #8]
 800a152:	f1b8 0f00 	cmp.w	r8, #0
 800a156:	dd9c      	ble.n	800a092 <__sflush_r+0x1a>
 800a158:	6a21      	ldr	r1, [r4, #32]
 800a15a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a15c:	4643      	mov	r3, r8
 800a15e:	463a      	mov	r2, r7
 800a160:	4628      	mov	r0, r5
 800a162:	47b0      	blx	r6
 800a164:	2800      	cmp	r0, #0
 800a166:	dc06      	bgt.n	800a176 <__sflush_r+0xfe>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	e78e      	b.n	800a094 <__sflush_r+0x1c>
 800a176:	4407      	add	r7, r0
 800a178:	eba8 0800 	sub.w	r8, r8, r0
 800a17c:	e7e9      	b.n	800a152 <__sflush_r+0xda>
 800a17e:	bf00      	nop
 800a180:	dfbffffe 	.word	0xdfbffffe

0800a184 <_fflush_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	690b      	ldr	r3, [r1, #16]
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	b913      	cbnz	r3, 800a194 <_fflush_r+0x10>
 800a18e:	2500      	movs	r5, #0
 800a190:	4628      	mov	r0, r5
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	b118      	cbz	r0, 800a19e <_fflush_r+0x1a>
 800a196:	6a03      	ldr	r3, [r0, #32]
 800a198:	b90b      	cbnz	r3, 800a19e <_fflush_r+0x1a>
 800a19a:	f7fd f9dd 	bl	8007558 <__sinit>
 800a19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0f3      	beq.n	800a18e <_fflush_r+0xa>
 800a1a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1a8:	07d0      	lsls	r0, r2, #31
 800a1aa:	d404      	bmi.n	800a1b6 <_fflush_r+0x32>
 800a1ac:	0599      	lsls	r1, r3, #22
 800a1ae:	d402      	bmi.n	800a1b6 <_fflush_r+0x32>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1b2:	f7fd fb58 	bl	8007866 <__retarget_lock_acquire_recursive>
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f7ff ff5d 	bl	800a078 <__sflush_r>
 800a1be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1c0:	07da      	lsls	r2, r3, #31
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	d4e4      	bmi.n	800a190 <_fflush_r+0xc>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	059b      	lsls	r3, r3, #22
 800a1ca:	d4e1      	bmi.n	800a190 <_fflush_r+0xc>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ce:	f7fd fb4b 	bl	8007868 <__retarget_lock_release_recursive>
 800a1d2:	e7dd      	b.n	800a190 <_fflush_r+0xc>

0800a1d4 <__sccl>:
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	780b      	ldrb	r3, [r1, #0]
 800a1d8:	4604      	mov	r4, r0
 800a1da:	2b5e      	cmp	r3, #94	; 0x5e
 800a1dc:	bf0b      	itete	eq
 800a1de:	784b      	ldrbeq	r3, [r1, #1]
 800a1e0:	1c4a      	addne	r2, r1, #1
 800a1e2:	1c8a      	addeq	r2, r1, #2
 800a1e4:	2100      	movne	r1, #0
 800a1e6:	bf08      	it	eq
 800a1e8:	2101      	moveq	r1, #1
 800a1ea:	3801      	subs	r0, #1
 800a1ec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a1f0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a1f4:	42a8      	cmp	r0, r5
 800a1f6:	d1fb      	bne.n	800a1f0 <__sccl+0x1c>
 800a1f8:	b90b      	cbnz	r3, 800a1fe <__sccl+0x2a>
 800a1fa:	1e50      	subs	r0, r2, #1
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
 800a1fe:	f081 0101 	eor.w	r1, r1, #1
 800a202:	54e1      	strb	r1, [r4, r3]
 800a204:	4610      	mov	r0, r2
 800a206:	4602      	mov	r2, r0
 800a208:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a20c:	2d2d      	cmp	r5, #45	; 0x2d
 800a20e:	d005      	beq.n	800a21c <__sccl+0x48>
 800a210:	2d5d      	cmp	r5, #93	; 0x5d
 800a212:	d016      	beq.n	800a242 <__sccl+0x6e>
 800a214:	2d00      	cmp	r5, #0
 800a216:	d0f1      	beq.n	800a1fc <__sccl+0x28>
 800a218:	462b      	mov	r3, r5
 800a21a:	e7f2      	b.n	800a202 <__sccl+0x2e>
 800a21c:	7846      	ldrb	r6, [r0, #1]
 800a21e:	2e5d      	cmp	r6, #93	; 0x5d
 800a220:	d0fa      	beq.n	800a218 <__sccl+0x44>
 800a222:	42b3      	cmp	r3, r6
 800a224:	dcf8      	bgt.n	800a218 <__sccl+0x44>
 800a226:	3002      	adds	r0, #2
 800a228:	461a      	mov	r2, r3
 800a22a:	3201      	adds	r2, #1
 800a22c:	4296      	cmp	r6, r2
 800a22e:	54a1      	strb	r1, [r4, r2]
 800a230:	dcfb      	bgt.n	800a22a <__sccl+0x56>
 800a232:	1af2      	subs	r2, r6, r3
 800a234:	3a01      	subs	r2, #1
 800a236:	1c5d      	adds	r5, r3, #1
 800a238:	42b3      	cmp	r3, r6
 800a23a:	bfa8      	it	ge
 800a23c:	2200      	movge	r2, #0
 800a23e:	18ab      	adds	r3, r5, r2
 800a240:	e7e1      	b.n	800a206 <__sccl+0x32>
 800a242:	4610      	mov	r0, r2
 800a244:	e7da      	b.n	800a1fc <__sccl+0x28>

0800a246 <__submore>:
 800a246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	460c      	mov	r4, r1
 800a24c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a24e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a252:	4299      	cmp	r1, r3
 800a254:	d11d      	bne.n	800a292 <__submore+0x4c>
 800a256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a25a:	f7fb fb6d 	bl	8005938 <_malloc_r>
 800a25e:	b918      	cbnz	r0, 800a268 <__submore+0x22>
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a26e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a272:	6360      	str	r0, [r4, #52]	; 0x34
 800a274:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a278:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a27c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a280:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a284:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a288:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a28c:	6020      	str	r0, [r4, #0]
 800a28e:	2000      	movs	r0, #0
 800a290:	e7e8      	b.n	800a264 <__submore+0x1e>
 800a292:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a294:	0077      	lsls	r7, r6, #1
 800a296:	463a      	mov	r2, r7
 800a298:	f000 f85e 	bl	800a358 <_realloc_r>
 800a29c:	4605      	mov	r5, r0
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d0de      	beq.n	800a260 <__submore+0x1a>
 800a2a2:	eb00 0806 	add.w	r8, r0, r6
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7fd fadd 	bl	800786a <memcpy>
 800a2b0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a2b4:	f8c4 8000 	str.w	r8, [r4]
 800a2b8:	e7e9      	b.n	800a28e <__submore+0x48>

0800a2ba <memmove>:
 800a2ba:	4288      	cmp	r0, r1
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	eb01 0402 	add.w	r4, r1, r2
 800a2c2:	d902      	bls.n	800a2ca <memmove+0x10>
 800a2c4:	4284      	cmp	r4, r0
 800a2c6:	4623      	mov	r3, r4
 800a2c8:	d807      	bhi.n	800a2da <memmove+0x20>
 800a2ca:	1e43      	subs	r3, r0, #1
 800a2cc:	42a1      	cmp	r1, r4
 800a2ce:	d008      	beq.n	800a2e2 <memmove+0x28>
 800a2d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2d8:	e7f8      	b.n	800a2cc <memmove+0x12>
 800a2da:	4402      	add	r2, r0
 800a2dc:	4601      	mov	r1, r0
 800a2de:	428a      	cmp	r2, r1
 800a2e0:	d100      	bne.n	800a2e4 <memmove+0x2a>
 800a2e2:	bd10      	pop	{r4, pc}
 800a2e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ec:	e7f7      	b.n	800a2de <memmove+0x24>
	...

0800a2f0 <__assert_func>:
 800a2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2f2:	4614      	mov	r4, r2
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <__assert_func+0x2c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	68d8      	ldr	r0, [r3, #12]
 800a2fe:	b14c      	cbz	r4, 800a314 <__assert_func+0x24>
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <__assert_func+0x30>)
 800a302:	9100      	str	r1, [sp, #0]
 800a304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a308:	4906      	ldr	r1, [pc, #24]	; (800a324 <__assert_func+0x34>)
 800a30a:	462b      	mov	r3, r5
 800a30c:	f000 f8c8 	bl	800a4a0 <fiprintf>
 800a310:	f000 f8d8 	bl	800a4c4 <abort>
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <__assert_func+0x38>)
 800a316:	461c      	mov	r4, r3
 800a318:	e7f3      	b.n	800a302 <__assert_func+0x12>
 800a31a:	bf00      	nop
 800a31c:	20000220 	.word	0x20000220
 800a320:	0800af61 	.word	0x0800af61
 800a324:	0800af6e 	.word	0x0800af6e
 800a328:	0800af9c 	.word	0x0800af9c

0800a32c <_calloc_r>:
 800a32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a32e:	fba1 2402 	umull	r2, r4, r1, r2
 800a332:	b94c      	cbnz	r4, 800a348 <_calloc_r+0x1c>
 800a334:	4611      	mov	r1, r2
 800a336:	9201      	str	r2, [sp, #4]
 800a338:	f7fb fafe 	bl	8005938 <_malloc_r>
 800a33c:	9a01      	ldr	r2, [sp, #4]
 800a33e:	4605      	mov	r5, r0
 800a340:	b930      	cbnz	r0, 800a350 <_calloc_r+0x24>
 800a342:	4628      	mov	r0, r5
 800a344:	b003      	add	sp, #12
 800a346:	bd30      	pop	{r4, r5, pc}
 800a348:	220c      	movs	r2, #12
 800a34a:	6002      	str	r2, [r0, #0]
 800a34c:	2500      	movs	r5, #0
 800a34e:	e7f8      	b.n	800a342 <_calloc_r+0x16>
 800a350:	4621      	mov	r1, r4
 800a352:	f7fd f9c8 	bl	80076e6 <memset>
 800a356:	e7f4      	b.n	800a342 <_calloc_r+0x16>

0800a358 <_realloc_r>:
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	4680      	mov	r8, r0
 800a35e:	4614      	mov	r4, r2
 800a360:	460e      	mov	r6, r1
 800a362:	b921      	cbnz	r1, 800a36e <_realloc_r+0x16>
 800a364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a368:	4611      	mov	r1, r2
 800a36a:	f7fb bae5 	b.w	8005938 <_malloc_r>
 800a36e:	b92a      	cbnz	r2, 800a37c <_realloc_r+0x24>
 800a370:	f7fe f914 	bl	800859c <_free_r>
 800a374:	4625      	mov	r5, r4
 800a376:	4628      	mov	r0, r5
 800a378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a37c:	f000 f8a9 	bl	800a4d2 <_malloc_usable_size_r>
 800a380:	4284      	cmp	r4, r0
 800a382:	4607      	mov	r7, r0
 800a384:	d802      	bhi.n	800a38c <_realloc_r+0x34>
 800a386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a38a:	d812      	bhi.n	800a3b2 <_realloc_r+0x5a>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4640      	mov	r0, r8
 800a390:	f7fb fad2 	bl	8005938 <_malloc_r>
 800a394:	4605      	mov	r5, r0
 800a396:	2800      	cmp	r0, #0
 800a398:	d0ed      	beq.n	800a376 <_realloc_r+0x1e>
 800a39a:	42bc      	cmp	r4, r7
 800a39c:	4622      	mov	r2, r4
 800a39e:	4631      	mov	r1, r6
 800a3a0:	bf28      	it	cs
 800a3a2:	463a      	movcs	r2, r7
 800a3a4:	f7fd fa61 	bl	800786a <memcpy>
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f7fe f8f6 	bl	800859c <_free_r>
 800a3b0:	e7e1      	b.n	800a376 <_realloc_r+0x1e>
 800a3b2:	4635      	mov	r5, r6
 800a3b4:	e7df      	b.n	800a376 <_realloc_r+0x1e>
	...

0800a3b8 <_strtoul_l.constprop.0>:
 800a3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3bc:	4f36      	ldr	r7, [pc, #216]	; (800a498 <_strtoul_l.constprop.0+0xe0>)
 800a3be:	4686      	mov	lr, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3c8:	5d3e      	ldrb	r6, [r7, r4]
 800a3ca:	f016 0608 	ands.w	r6, r6, #8
 800a3ce:	d1f8      	bne.n	800a3c2 <_strtoul_l.constprop.0+0xa>
 800a3d0:	2c2d      	cmp	r4, #45	; 0x2d
 800a3d2:	d130      	bne.n	800a436 <_strtoul_l.constprop.0+0x7e>
 800a3d4:	782c      	ldrb	r4, [r5, #0]
 800a3d6:	2601      	movs	r6, #1
 800a3d8:	1c85      	adds	r5, r0, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d057      	beq.n	800a48e <_strtoul_l.constprop.0+0xd6>
 800a3de:	2b10      	cmp	r3, #16
 800a3e0:	d109      	bne.n	800a3f6 <_strtoul_l.constprop.0+0x3e>
 800a3e2:	2c30      	cmp	r4, #48	; 0x30
 800a3e4:	d107      	bne.n	800a3f6 <_strtoul_l.constprop.0+0x3e>
 800a3e6:	7828      	ldrb	r0, [r5, #0]
 800a3e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3ec:	2858      	cmp	r0, #88	; 0x58
 800a3ee:	d149      	bne.n	800a484 <_strtoul_l.constprop.0+0xcc>
 800a3f0:	786c      	ldrb	r4, [r5, #1]
 800a3f2:	2310      	movs	r3, #16
 800a3f4:	3502      	adds	r5, #2
 800a3f6:	f04f 38ff 	mov.w	r8, #4294967295
 800a3fa:	2700      	movs	r7, #0
 800a3fc:	fbb8 f8f3 	udiv	r8, r8, r3
 800a400:	fb03 f908 	mul.w	r9, r3, r8
 800a404:	ea6f 0909 	mvn.w	r9, r9
 800a408:	4638      	mov	r0, r7
 800a40a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a40e:	f1bc 0f09 	cmp.w	ip, #9
 800a412:	d815      	bhi.n	800a440 <_strtoul_l.constprop.0+0x88>
 800a414:	4664      	mov	r4, ip
 800a416:	42a3      	cmp	r3, r4
 800a418:	dd23      	ble.n	800a462 <_strtoul_l.constprop.0+0xaa>
 800a41a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a41e:	d007      	beq.n	800a430 <_strtoul_l.constprop.0+0x78>
 800a420:	4580      	cmp	r8, r0
 800a422:	d31b      	bcc.n	800a45c <_strtoul_l.constprop.0+0xa4>
 800a424:	d101      	bne.n	800a42a <_strtoul_l.constprop.0+0x72>
 800a426:	45a1      	cmp	r9, r4
 800a428:	db18      	blt.n	800a45c <_strtoul_l.constprop.0+0xa4>
 800a42a:	fb00 4003 	mla	r0, r0, r3, r4
 800a42e:	2701      	movs	r7, #1
 800a430:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a434:	e7e9      	b.n	800a40a <_strtoul_l.constprop.0+0x52>
 800a436:	2c2b      	cmp	r4, #43	; 0x2b
 800a438:	bf04      	itt	eq
 800a43a:	782c      	ldrbeq	r4, [r5, #0]
 800a43c:	1c85      	addeq	r5, r0, #2
 800a43e:	e7cc      	b.n	800a3da <_strtoul_l.constprop.0+0x22>
 800a440:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a444:	f1bc 0f19 	cmp.w	ip, #25
 800a448:	d801      	bhi.n	800a44e <_strtoul_l.constprop.0+0x96>
 800a44a:	3c37      	subs	r4, #55	; 0x37
 800a44c:	e7e3      	b.n	800a416 <_strtoul_l.constprop.0+0x5e>
 800a44e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a452:	f1bc 0f19 	cmp.w	ip, #25
 800a456:	d804      	bhi.n	800a462 <_strtoul_l.constprop.0+0xaa>
 800a458:	3c57      	subs	r4, #87	; 0x57
 800a45a:	e7dc      	b.n	800a416 <_strtoul_l.constprop.0+0x5e>
 800a45c:	f04f 37ff 	mov.w	r7, #4294967295
 800a460:	e7e6      	b.n	800a430 <_strtoul_l.constprop.0+0x78>
 800a462:	1c7b      	adds	r3, r7, #1
 800a464:	d106      	bne.n	800a474 <_strtoul_l.constprop.0+0xbc>
 800a466:	2322      	movs	r3, #34	; 0x22
 800a468:	f8ce 3000 	str.w	r3, [lr]
 800a46c:	4638      	mov	r0, r7
 800a46e:	b932      	cbnz	r2, 800a47e <_strtoul_l.constprop.0+0xc6>
 800a470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a474:	b106      	cbz	r6, 800a478 <_strtoul_l.constprop.0+0xc0>
 800a476:	4240      	negs	r0, r0
 800a478:	2a00      	cmp	r2, #0
 800a47a:	d0f9      	beq.n	800a470 <_strtoul_l.constprop.0+0xb8>
 800a47c:	b107      	cbz	r7, 800a480 <_strtoul_l.constprop.0+0xc8>
 800a47e:	1e69      	subs	r1, r5, #1
 800a480:	6011      	str	r1, [r2, #0]
 800a482:	e7f5      	b.n	800a470 <_strtoul_l.constprop.0+0xb8>
 800a484:	2430      	movs	r4, #48	; 0x30
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1b5      	bne.n	800a3f6 <_strtoul_l.constprop.0+0x3e>
 800a48a:	2308      	movs	r3, #8
 800a48c:	e7b3      	b.n	800a3f6 <_strtoul_l.constprop.0+0x3e>
 800a48e:	2c30      	cmp	r4, #48	; 0x30
 800a490:	d0a9      	beq.n	800a3e6 <_strtoul_l.constprop.0+0x2e>
 800a492:	230a      	movs	r3, #10
 800a494:	e7af      	b.n	800a3f6 <_strtoul_l.constprop.0+0x3e>
 800a496:	bf00      	nop
 800a498:	0800ae35 	.word	0x0800ae35

0800a49c <_strtoul_r>:
 800a49c:	f7ff bf8c 	b.w	800a3b8 <_strtoul_l.constprop.0>

0800a4a0 <fiprintf>:
 800a4a0:	b40e      	push	{r1, r2, r3}
 800a4a2:	b503      	push	{r0, r1, lr}
 800a4a4:	4601      	mov	r1, r0
 800a4a6:	ab03      	add	r3, sp, #12
 800a4a8:	4805      	ldr	r0, [pc, #20]	; (800a4c0 <fiprintf+0x20>)
 800a4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ae:	6800      	ldr	r0, [r0, #0]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	f000 f83f 	bl	800a534 <_vfiprintf_r>
 800a4b6:	b002      	add	sp, #8
 800a4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4bc:	b003      	add	sp, #12
 800a4be:	4770      	bx	lr
 800a4c0:	20000220 	.word	0x20000220

0800a4c4 <abort>:
 800a4c4:	b508      	push	{r3, lr}
 800a4c6:	2006      	movs	r0, #6
 800a4c8:	f000 fa0c 	bl	800a8e4 <raise>
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	f7f7 fc83 	bl	8001dd8 <_exit>

0800a4d2 <_malloc_usable_size_r>:
 800a4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d6:	1f18      	subs	r0, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bfbc      	itt	lt
 800a4dc:	580b      	ldrlt	r3, [r1, r0]
 800a4de:	18c0      	addlt	r0, r0, r3
 800a4e0:	4770      	bx	lr

0800a4e2 <__sfputc_r>:
 800a4e2:	6893      	ldr	r3, [r2, #8]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	b410      	push	{r4}
 800a4ea:	6093      	str	r3, [r2, #8]
 800a4ec:	da08      	bge.n	800a500 <__sfputc_r+0x1e>
 800a4ee:	6994      	ldr	r4, [r2, #24]
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	db01      	blt.n	800a4f8 <__sfputc_r+0x16>
 800a4f4:	290a      	cmp	r1, #10
 800a4f6:	d103      	bne.n	800a500 <__sfputc_r+0x1e>
 800a4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4fc:	f000 b934 	b.w	800a768 <__swbuf_r>
 800a500:	6813      	ldr	r3, [r2, #0]
 800a502:	1c58      	adds	r0, r3, #1
 800a504:	6010      	str	r0, [r2, #0]
 800a506:	7019      	strb	r1, [r3, #0]
 800a508:	4608      	mov	r0, r1
 800a50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <__sfputs_r>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	4614      	mov	r4, r2
 800a518:	18d5      	adds	r5, r2, r3
 800a51a:	42ac      	cmp	r4, r5
 800a51c:	d101      	bne.n	800a522 <__sfputs_r+0x12>
 800a51e:	2000      	movs	r0, #0
 800a520:	e007      	b.n	800a532 <__sfputs_r+0x22>
 800a522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a526:	463a      	mov	r2, r7
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff ffda 	bl	800a4e2 <__sfputc_r>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	d1f3      	bne.n	800a51a <__sfputs_r+0xa>
 800a532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a534 <_vfiprintf_r>:
 800a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a538:	460d      	mov	r5, r1
 800a53a:	b09d      	sub	sp, #116	; 0x74
 800a53c:	4614      	mov	r4, r2
 800a53e:	4698      	mov	r8, r3
 800a540:	4606      	mov	r6, r0
 800a542:	b118      	cbz	r0, 800a54c <_vfiprintf_r+0x18>
 800a544:	6a03      	ldr	r3, [r0, #32]
 800a546:	b90b      	cbnz	r3, 800a54c <_vfiprintf_r+0x18>
 800a548:	f7fd f806 	bl	8007558 <__sinit>
 800a54c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54e:	07d9      	lsls	r1, r3, #31
 800a550:	d405      	bmi.n	800a55e <_vfiprintf_r+0x2a>
 800a552:	89ab      	ldrh	r3, [r5, #12]
 800a554:	059a      	lsls	r2, r3, #22
 800a556:	d402      	bmi.n	800a55e <_vfiprintf_r+0x2a>
 800a558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a55a:	f7fd f984 	bl	8007866 <__retarget_lock_acquire_recursive>
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	071b      	lsls	r3, r3, #28
 800a562:	d501      	bpl.n	800a568 <_vfiprintf_r+0x34>
 800a564:	692b      	ldr	r3, [r5, #16]
 800a566:	b99b      	cbnz	r3, 800a590 <_vfiprintf_r+0x5c>
 800a568:	4629      	mov	r1, r5
 800a56a:	4630      	mov	r0, r6
 800a56c:	f000 f93a 	bl	800a7e4 <__swsetup_r>
 800a570:	b170      	cbz	r0, 800a590 <_vfiprintf_r+0x5c>
 800a572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a574:	07dc      	lsls	r4, r3, #31
 800a576:	d504      	bpl.n	800a582 <_vfiprintf_r+0x4e>
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	b01d      	add	sp, #116	; 0x74
 800a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	0598      	lsls	r0, r3, #22
 800a586:	d4f7      	bmi.n	800a578 <_vfiprintf_r+0x44>
 800a588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a58a:	f7fd f96d 	bl	8007868 <__retarget_lock_release_recursive>
 800a58e:	e7f3      	b.n	800a578 <_vfiprintf_r+0x44>
 800a590:	2300      	movs	r3, #0
 800a592:	9309      	str	r3, [sp, #36]	; 0x24
 800a594:	2320      	movs	r3, #32
 800a596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a59a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a59e:	2330      	movs	r3, #48	; 0x30
 800a5a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a754 <_vfiprintf_r+0x220>
 800a5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5a8:	f04f 0901 	mov.w	r9, #1
 800a5ac:	4623      	mov	r3, r4
 800a5ae:	469a      	mov	sl, r3
 800a5b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b4:	b10a      	cbz	r2, 800a5ba <_vfiprintf_r+0x86>
 800a5b6:	2a25      	cmp	r2, #37	; 0x25
 800a5b8:	d1f9      	bne.n	800a5ae <_vfiprintf_r+0x7a>
 800a5ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a5be:	d00b      	beq.n	800a5d8 <_vfiprintf_r+0xa4>
 800a5c0:	465b      	mov	r3, fp
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7ff ffa2 	bl	800a510 <__sfputs_r>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f000 80a9 	beq.w	800a724 <_vfiprintf_r+0x1f0>
 800a5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d4:	445a      	add	r2, fp
 800a5d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 80a1 	beq.w	800a724 <_vfiprintf_r+0x1f0>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5ec:	f10a 0a01 	add.w	sl, sl, #1
 800a5f0:	9304      	str	r3, [sp, #16]
 800a5f2:	9307      	str	r3, [sp, #28]
 800a5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a5fa:	4654      	mov	r4, sl
 800a5fc:	2205      	movs	r2, #5
 800a5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a602:	4854      	ldr	r0, [pc, #336]	; (800a754 <_vfiprintf_r+0x220>)
 800a604:	f7f5 fde4 	bl	80001d0 <memchr>
 800a608:	9a04      	ldr	r2, [sp, #16]
 800a60a:	b9d8      	cbnz	r0, 800a644 <_vfiprintf_r+0x110>
 800a60c:	06d1      	lsls	r1, r2, #27
 800a60e:	bf44      	itt	mi
 800a610:	2320      	movmi	r3, #32
 800a612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a616:	0713      	lsls	r3, r2, #28
 800a618:	bf44      	itt	mi
 800a61a:	232b      	movmi	r3, #43	; 0x2b
 800a61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a620:	f89a 3000 	ldrb.w	r3, [sl]
 800a624:	2b2a      	cmp	r3, #42	; 0x2a
 800a626:	d015      	beq.n	800a654 <_vfiprintf_r+0x120>
 800a628:	9a07      	ldr	r2, [sp, #28]
 800a62a:	4654      	mov	r4, sl
 800a62c:	2000      	movs	r0, #0
 800a62e:	f04f 0c0a 	mov.w	ip, #10
 800a632:	4621      	mov	r1, r4
 800a634:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a638:	3b30      	subs	r3, #48	; 0x30
 800a63a:	2b09      	cmp	r3, #9
 800a63c:	d94d      	bls.n	800a6da <_vfiprintf_r+0x1a6>
 800a63e:	b1b0      	cbz	r0, 800a66e <_vfiprintf_r+0x13a>
 800a640:	9207      	str	r2, [sp, #28]
 800a642:	e014      	b.n	800a66e <_vfiprintf_r+0x13a>
 800a644:	eba0 0308 	sub.w	r3, r0, r8
 800a648:	fa09 f303 	lsl.w	r3, r9, r3
 800a64c:	4313      	orrs	r3, r2
 800a64e:	9304      	str	r3, [sp, #16]
 800a650:	46a2      	mov	sl, r4
 800a652:	e7d2      	b.n	800a5fa <_vfiprintf_r+0xc6>
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	1d19      	adds	r1, r3, #4
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	9103      	str	r1, [sp, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bfbb      	ittet	lt
 800a660:	425b      	neglt	r3, r3
 800a662:	f042 0202 	orrlt.w	r2, r2, #2
 800a666:	9307      	strge	r3, [sp, #28]
 800a668:	9307      	strlt	r3, [sp, #28]
 800a66a:	bfb8      	it	lt
 800a66c:	9204      	strlt	r2, [sp, #16]
 800a66e:	7823      	ldrb	r3, [r4, #0]
 800a670:	2b2e      	cmp	r3, #46	; 0x2e
 800a672:	d10c      	bne.n	800a68e <_vfiprintf_r+0x15a>
 800a674:	7863      	ldrb	r3, [r4, #1]
 800a676:	2b2a      	cmp	r3, #42	; 0x2a
 800a678:	d134      	bne.n	800a6e4 <_vfiprintf_r+0x1b0>
 800a67a:	9b03      	ldr	r3, [sp, #12]
 800a67c:	1d1a      	adds	r2, r3, #4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	9203      	str	r2, [sp, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfb8      	it	lt
 800a686:	f04f 33ff 	movlt.w	r3, #4294967295
 800a68a:	3402      	adds	r4, #2
 800a68c:	9305      	str	r3, [sp, #20]
 800a68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a764 <_vfiprintf_r+0x230>
 800a692:	7821      	ldrb	r1, [r4, #0]
 800a694:	2203      	movs	r2, #3
 800a696:	4650      	mov	r0, sl
 800a698:	f7f5 fd9a 	bl	80001d0 <memchr>
 800a69c:	b138      	cbz	r0, 800a6ae <_vfiprintf_r+0x17a>
 800a69e:	9b04      	ldr	r3, [sp, #16]
 800a6a0:	eba0 000a 	sub.w	r0, r0, sl
 800a6a4:	2240      	movs	r2, #64	; 0x40
 800a6a6:	4082      	lsls	r2, r0
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	3401      	adds	r4, #1
 800a6ac:	9304      	str	r3, [sp, #16]
 800a6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b2:	4829      	ldr	r0, [pc, #164]	; (800a758 <_vfiprintf_r+0x224>)
 800a6b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6b8:	2206      	movs	r2, #6
 800a6ba:	f7f5 fd89 	bl	80001d0 <memchr>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d03f      	beq.n	800a742 <_vfiprintf_r+0x20e>
 800a6c2:	4b26      	ldr	r3, [pc, #152]	; (800a75c <_vfiprintf_r+0x228>)
 800a6c4:	bb1b      	cbnz	r3, 800a70e <_vfiprintf_r+0x1da>
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	3307      	adds	r3, #7
 800a6ca:	f023 0307 	bic.w	r3, r3, #7
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	9303      	str	r3, [sp, #12]
 800a6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d4:	443b      	add	r3, r7
 800a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d8:	e768      	b.n	800a5ac <_vfiprintf_r+0x78>
 800a6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6de:	460c      	mov	r4, r1
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	e7a6      	b.n	800a632 <_vfiprintf_r+0xfe>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	3401      	adds	r4, #1
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	f04f 0c0a 	mov.w	ip, #10
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6f6:	3a30      	subs	r2, #48	; 0x30
 800a6f8:	2a09      	cmp	r2, #9
 800a6fa:	d903      	bls.n	800a704 <_vfiprintf_r+0x1d0>
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0c6      	beq.n	800a68e <_vfiprintf_r+0x15a>
 800a700:	9105      	str	r1, [sp, #20]
 800a702:	e7c4      	b.n	800a68e <_vfiprintf_r+0x15a>
 800a704:	fb0c 2101 	mla	r1, ip, r1, r2
 800a708:	4604      	mov	r4, r0
 800a70a:	2301      	movs	r3, #1
 800a70c:	e7f0      	b.n	800a6f0 <_vfiprintf_r+0x1bc>
 800a70e:	ab03      	add	r3, sp, #12
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	462a      	mov	r2, r5
 800a714:	4b12      	ldr	r3, [pc, #72]	; (800a760 <_vfiprintf_r+0x22c>)
 800a716:	a904      	add	r1, sp, #16
 800a718:	4630      	mov	r0, r6
 800a71a:	f7fc f8bb 	bl	8006894 <_printf_float>
 800a71e:	4607      	mov	r7, r0
 800a720:	1c78      	adds	r0, r7, #1
 800a722:	d1d6      	bne.n	800a6d2 <_vfiprintf_r+0x19e>
 800a724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a726:	07d9      	lsls	r1, r3, #31
 800a728:	d405      	bmi.n	800a736 <_vfiprintf_r+0x202>
 800a72a:	89ab      	ldrh	r3, [r5, #12]
 800a72c:	059a      	lsls	r2, r3, #22
 800a72e:	d402      	bmi.n	800a736 <_vfiprintf_r+0x202>
 800a730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a732:	f7fd f899 	bl	8007868 <__retarget_lock_release_recursive>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	065b      	lsls	r3, r3, #25
 800a73a:	f53f af1d 	bmi.w	800a578 <_vfiprintf_r+0x44>
 800a73e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a740:	e71c      	b.n	800a57c <_vfiprintf_r+0x48>
 800a742:	ab03      	add	r3, sp, #12
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	462a      	mov	r2, r5
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <_vfiprintf_r+0x22c>)
 800a74a:	a904      	add	r1, sp, #16
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7fc fb45 	bl	8006ddc <_printf_i>
 800a752:	e7e4      	b.n	800a71e <_vfiprintf_r+0x1ea>
 800a754:	0800af35 	.word	0x0800af35
 800a758:	0800af3f 	.word	0x0800af3f
 800a75c:	08006895 	.word	0x08006895
 800a760:	0800a511 	.word	0x0800a511
 800a764:	0800af3b 	.word	0x0800af3b

0800a768 <__swbuf_r>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	460e      	mov	r6, r1
 800a76c:	4614      	mov	r4, r2
 800a76e:	4605      	mov	r5, r0
 800a770:	b118      	cbz	r0, 800a77a <__swbuf_r+0x12>
 800a772:	6a03      	ldr	r3, [r0, #32]
 800a774:	b90b      	cbnz	r3, 800a77a <__swbuf_r+0x12>
 800a776:	f7fc feef 	bl	8007558 <__sinit>
 800a77a:	69a3      	ldr	r3, [r4, #24]
 800a77c:	60a3      	str	r3, [r4, #8]
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	071a      	lsls	r2, r3, #28
 800a782:	d525      	bpl.n	800a7d0 <__swbuf_r+0x68>
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	b31b      	cbz	r3, 800a7d0 <__swbuf_r+0x68>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	6922      	ldr	r2, [r4, #16]
 800a78c:	1a98      	subs	r0, r3, r2
 800a78e:	6963      	ldr	r3, [r4, #20]
 800a790:	b2f6      	uxtb	r6, r6
 800a792:	4283      	cmp	r3, r0
 800a794:	4637      	mov	r7, r6
 800a796:	dc04      	bgt.n	800a7a2 <__swbuf_r+0x3a>
 800a798:	4621      	mov	r1, r4
 800a79a:	4628      	mov	r0, r5
 800a79c:	f7ff fcf2 	bl	800a184 <_fflush_r>
 800a7a0:	b9e0      	cbnz	r0, 800a7dc <__swbuf_r+0x74>
 800a7a2:	68a3      	ldr	r3, [r4, #8]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	60a3      	str	r3, [r4, #8]
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	6022      	str	r2, [r4, #0]
 800a7ae:	701e      	strb	r6, [r3, #0]
 800a7b0:	6962      	ldr	r2, [r4, #20]
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d004      	beq.n	800a7c2 <__swbuf_r+0x5a>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	07db      	lsls	r3, r3, #31
 800a7bc:	d506      	bpl.n	800a7cc <__swbuf_r+0x64>
 800a7be:	2e0a      	cmp	r6, #10
 800a7c0:	d104      	bne.n	800a7cc <__swbuf_r+0x64>
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f7ff fcdd 	bl	800a184 <_fflush_r>
 800a7ca:	b938      	cbnz	r0, 800a7dc <__swbuf_r+0x74>
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 f806 	bl	800a7e4 <__swsetup_r>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d0d5      	beq.n	800a788 <__swbuf_r+0x20>
 800a7dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a7e0:	e7f4      	b.n	800a7cc <__swbuf_r+0x64>
	...

0800a7e4 <__swsetup_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4b2a      	ldr	r3, [pc, #168]	; (800a890 <__swsetup_r+0xac>)
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	6818      	ldr	r0, [r3, #0]
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	b118      	cbz	r0, 800a7f8 <__swsetup_r+0x14>
 800a7f0:	6a03      	ldr	r3, [r0, #32]
 800a7f2:	b90b      	cbnz	r3, 800a7f8 <__swsetup_r+0x14>
 800a7f4:	f7fc feb0 	bl	8007558 <__sinit>
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7fe:	0718      	lsls	r0, r3, #28
 800a800:	d422      	bmi.n	800a848 <__swsetup_r+0x64>
 800a802:	06d9      	lsls	r1, r3, #27
 800a804:	d407      	bmi.n	800a816 <__swsetup_r+0x32>
 800a806:	2309      	movs	r3, #9
 800a808:	602b      	str	r3, [r5, #0]
 800a80a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	e034      	b.n	800a880 <__swsetup_r+0x9c>
 800a816:	0758      	lsls	r0, r3, #29
 800a818:	d512      	bpl.n	800a840 <__swsetup_r+0x5c>
 800a81a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a81c:	b141      	cbz	r1, 800a830 <__swsetup_r+0x4c>
 800a81e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a822:	4299      	cmp	r1, r3
 800a824:	d002      	beq.n	800a82c <__swsetup_r+0x48>
 800a826:	4628      	mov	r0, r5
 800a828:	f7fd feb8 	bl	800859c <_free_r>
 800a82c:	2300      	movs	r3, #0
 800a82e:	6363      	str	r3, [r4, #52]	; 0x34
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	2300      	movs	r3, #0
 800a83a:	6063      	str	r3, [r4, #4]
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f043 0308 	orr.w	r3, r3, #8
 800a846:	81a3      	strh	r3, [r4, #12]
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	b94b      	cbnz	r3, 800a860 <__swsetup_r+0x7c>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a856:	d003      	beq.n	800a860 <__swsetup_r+0x7c>
 800a858:	4621      	mov	r1, r4
 800a85a:	4628      	mov	r0, r5
 800a85c:	f000 f884 	bl	800a968 <__smakebuf_r>
 800a860:	89a0      	ldrh	r0, [r4, #12]
 800a862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a866:	f010 0301 	ands.w	r3, r0, #1
 800a86a:	d00a      	beq.n	800a882 <__swsetup_r+0x9e>
 800a86c:	2300      	movs	r3, #0
 800a86e:	60a3      	str	r3, [r4, #8]
 800a870:	6963      	ldr	r3, [r4, #20]
 800a872:	425b      	negs	r3, r3
 800a874:	61a3      	str	r3, [r4, #24]
 800a876:	6923      	ldr	r3, [r4, #16]
 800a878:	b943      	cbnz	r3, 800a88c <__swsetup_r+0xa8>
 800a87a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a87e:	d1c4      	bne.n	800a80a <__swsetup_r+0x26>
 800a880:	bd38      	pop	{r3, r4, r5, pc}
 800a882:	0781      	lsls	r1, r0, #30
 800a884:	bf58      	it	pl
 800a886:	6963      	ldrpl	r3, [r4, #20]
 800a888:	60a3      	str	r3, [r4, #8]
 800a88a:	e7f4      	b.n	800a876 <__swsetup_r+0x92>
 800a88c:	2000      	movs	r0, #0
 800a88e:	e7f7      	b.n	800a880 <__swsetup_r+0x9c>
 800a890:	20000220 	.word	0x20000220

0800a894 <_raise_r>:
 800a894:	291f      	cmp	r1, #31
 800a896:	b538      	push	{r3, r4, r5, lr}
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	d904      	bls.n	800a8a8 <_raise_r+0x14>
 800a89e:	2316      	movs	r3, #22
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8aa:	b112      	cbz	r2, 800a8b2 <_raise_r+0x1e>
 800a8ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8b0:	b94b      	cbnz	r3, 800a8c6 <_raise_r+0x32>
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f830 	bl	800a918 <_getpid_r>
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8c2:	f000 b817 	b.w	800a8f4 <_kill_r>
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d00a      	beq.n	800a8e0 <_raise_r+0x4c>
 800a8ca:	1c59      	adds	r1, r3, #1
 800a8cc:	d103      	bne.n	800a8d6 <_raise_r+0x42>
 800a8ce:	2316      	movs	r3, #22
 800a8d0:	6003      	str	r3, [r0, #0]
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	e7e7      	b.n	800a8a6 <_raise_r+0x12>
 800a8d6:	2400      	movs	r4, #0
 800a8d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8dc:	4628      	mov	r0, r5
 800a8de:	4798      	blx	r3
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e7e0      	b.n	800a8a6 <_raise_r+0x12>

0800a8e4 <raise>:
 800a8e4:	4b02      	ldr	r3, [pc, #8]	; (800a8f0 <raise+0xc>)
 800a8e6:	4601      	mov	r1, r0
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	f7ff bfd3 	b.w	800a894 <_raise_r>
 800a8ee:	bf00      	nop
 800a8f0:	20000220 	.word	0x20000220

0800a8f4 <_kill_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d07      	ldr	r5, [pc, #28]	; (800a914 <_kill_r+0x20>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	f7f7 fa59 	bl	8001db8 <_kill>
 800a906:	1c43      	adds	r3, r0, #1
 800a908:	d102      	bne.n	800a910 <_kill_r+0x1c>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	b103      	cbz	r3, 800a910 <_kill_r+0x1c>
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	bd38      	pop	{r3, r4, r5, pc}
 800a912:	bf00      	nop
 800a914:	20000554 	.word	0x20000554

0800a918 <_getpid_r>:
 800a918:	f7f7 ba46 	b.w	8001da8 <_getpid>

0800a91c <__swhatbuf_r>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	460c      	mov	r4, r1
 800a920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a924:	2900      	cmp	r1, #0
 800a926:	b096      	sub	sp, #88	; 0x58
 800a928:	4615      	mov	r5, r2
 800a92a:	461e      	mov	r6, r3
 800a92c:	da0d      	bge.n	800a94a <__swhatbuf_r+0x2e>
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a934:	f04f 0100 	mov.w	r1, #0
 800a938:	bf0c      	ite	eq
 800a93a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a93e:	2340      	movne	r3, #64	; 0x40
 800a940:	2000      	movs	r0, #0
 800a942:	6031      	str	r1, [r6, #0]
 800a944:	602b      	str	r3, [r5, #0]
 800a946:	b016      	add	sp, #88	; 0x58
 800a948:	bd70      	pop	{r4, r5, r6, pc}
 800a94a:	466a      	mov	r2, sp
 800a94c:	f000 f848 	bl	800a9e0 <_fstat_r>
 800a950:	2800      	cmp	r0, #0
 800a952:	dbec      	blt.n	800a92e <__swhatbuf_r+0x12>
 800a954:	9901      	ldr	r1, [sp, #4]
 800a956:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a95a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a95e:	4259      	negs	r1, r3
 800a960:	4159      	adcs	r1, r3
 800a962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a966:	e7eb      	b.n	800a940 <__swhatbuf_r+0x24>

0800a968 <__smakebuf_r>:
 800a968:	898b      	ldrh	r3, [r1, #12]
 800a96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a96c:	079d      	lsls	r5, r3, #30
 800a96e:	4606      	mov	r6, r0
 800a970:	460c      	mov	r4, r1
 800a972:	d507      	bpl.n	800a984 <__smakebuf_r+0x1c>
 800a974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	6123      	str	r3, [r4, #16]
 800a97c:	2301      	movs	r3, #1
 800a97e:	6163      	str	r3, [r4, #20]
 800a980:	b002      	add	sp, #8
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	ab01      	add	r3, sp, #4
 800a986:	466a      	mov	r2, sp
 800a988:	f7ff ffc8 	bl	800a91c <__swhatbuf_r>
 800a98c:	9900      	ldr	r1, [sp, #0]
 800a98e:	4605      	mov	r5, r0
 800a990:	4630      	mov	r0, r6
 800a992:	f7fa ffd1 	bl	8005938 <_malloc_r>
 800a996:	b948      	cbnz	r0, 800a9ac <__smakebuf_r+0x44>
 800a998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99c:	059a      	lsls	r2, r3, #22
 800a99e:	d4ef      	bmi.n	800a980 <__smakebuf_r+0x18>
 800a9a0:	f023 0303 	bic.w	r3, r3, #3
 800a9a4:	f043 0302 	orr.w	r3, r3, #2
 800a9a8:	81a3      	strh	r3, [r4, #12]
 800a9aa:	e7e3      	b.n	800a974 <__smakebuf_r+0xc>
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	6020      	str	r0, [r4, #0]
 800a9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	9b00      	ldr	r3, [sp, #0]
 800a9b8:	6163      	str	r3, [r4, #20]
 800a9ba:	9b01      	ldr	r3, [sp, #4]
 800a9bc:	6120      	str	r0, [r4, #16]
 800a9be:	b15b      	cbz	r3, 800a9d8 <__smakebuf_r+0x70>
 800a9c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f000 f81d 	bl	800aa04 <_isatty_r>
 800a9ca:	b128      	cbz	r0, 800a9d8 <__smakebuf_r+0x70>
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	f023 0303 	bic.w	r3, r3, #3
 800a9d2:	f043 0301 	orr.w	r3, r3, #1
 800a9d6:	81a3      	strh	r3, [r4, #12]
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	431d      	orrs	r5, r3
 800a9dc:	81a5      	strh	r5, [r4, #12]
 800a9de:	e7cf      	b.n	800a980 <__smakebuf_r+0x18>

0800a9e0 <_fstat_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d07      	ldr	r5, [pc, #28]	; (800aa00 <_fstat_r+0x20>)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	4608      	mov	r0, r1
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	f7f7 fa42 	bl	8001e76 <_fstat>
 800a9f2:	1c43      	adds	r3, r0, #1
 800a9f4:	d102      	bne.n	800a9fc <_fstat_r+0x1c>
 800a9f6:	682b      	ldr	r3, [r5, #0]
 800a9f8:	b103      	cbz	r3, 800a9fc <_fstat_r+0x1c>
 800a9fa:	6023      	str	r3, [r4, #0]
 800a9fc:	bd38      	pop	{r3, r4, r5, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000554 	.word	0x20000554

0800aa04 <_isatty_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d06      	ldr	r5, [pc, #24]	; (800aa20 <_isatty_r+0x1c>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f7f7 fa41 	bl	8001e96 <_isatty>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_isatty_r+0x1a>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_isatty_r+0x1a>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	20000554 	.word	0x20000554

0800aa24 <_init>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	bf00      	nop
 800aa28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2a:	bc08      	pop	{r3}
 800aa2c:	469e      	mov	lr, r3
 800aa2e:	4770      	bx	lr

0800aa30 <_fini>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	bf00      	nop
 800aa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa36:	bc08      	pop	{r3}
 800aa38:	469e      	mov	lr, r3
 800aa3a:	4770      	bx	lr
